{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v4.json", "dbt_version": "1.0.4", "generated_at": "2022-09-20T21:05:46.619202Z", "invocation_id": "a53cfe7a-4d92-4592-ad76-c3818206bda2", "env": {}, "project_id": "5f759e264a5963f1044a1500d3c2f166", "user_id": "8929baf0-9bc1-477e-9a57-eb8b0db4da62", "send_anonymous_usage_stats": true, "adapter_type": "postgres"}, "nodes": {"seed.jira_integration_tests.issue_link": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests", "fqn": ["jira_integration_tests", "issue_link"], "unique_id": "seed.jira_integration_tests.issue_link", "package_name": "jira_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests", "path": "issue_link.csv", "original_file_path": "seeds/issue_link.csv", "name": "issue_link", "alias": "issue_link", "checksum": {"name": "sha256", "checksum": "5d31489970cb5d0c119af37bb32e993cad93f07c07de382dffec4e43846a65e3"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1663707928.717946, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests\".\"issue_link\""}, "seed.jira_integration_tests.issue_type": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests", "fqn": ["jira_integration_tests", "issue_type"], "unique_id": "seed.jira_integration_tests.issue_type", "package_name": "jira_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests", "path": "issue_type.csv", "original_file_path": "seeds/issue_type.csv", "name": "issue_type", "alias": "issue_type", "checksum": {"name": "sha256", "checksum": "79281a86f92794b477aa2b1c9578ba012fedc4415592051972b35fc0f173a01b"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1663707928.723047, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests\".\"issue_type\""}, "seed.jira_integration_tests.project_board": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests", "fqn": ["jira_integration_tests", "project_board"], "unique_id": "seed.jira_integration_tests.project_board", "package_name": "jira_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests", "path": "project_board.csv", "original_file_path": "seeds/project_board.csv", "name": "project_board", "alias": "project_board", "checksum": {"name": "sha256", "checksum": "04f1ff6543a5214207218e40e7e1664555ccb512d76ba5e14c2ecc42bb9644ad"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1663707928.7240288, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests\".\"project_board\""}, "seed.jira_integration_tests.resolution": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests", "fqn": ["jira_integration_tests", "resolution"], "unique_id": "seed.jira_integration_tests.resolution", "package_name": "jira_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests", "path": "resolution.csv", "original_file_path": "seeds/resolution.csv", "name": "resolution", "alias": "resolution", "checksum": {"name": "sha256", "checksum": "531ee2fe6400e78041d7573ccf989aa9b9e3e43aad8cd701b7c3e25fd653cc90"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1663707928.724896, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests\".\"resolution\""}, "seed.jira_integration_tests.version": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests", "fqn": ["jira_integration_tests", "version"], "unique_id": "seed.jira_integration_tests.version", "package_name": "jira_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests", "path": "version.csv", "original_file_path": "seeds/version.csv", "name": "version", "alias": "version", "checksum": {"name": "sha256", "checksum": "bf33e0bb428925e76d6c321ab89507798cd959a1eac7969d91f5e4f0836bee99"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1663707928.725761, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests\".\"version\""}, "seed.jira_integration_tests.status": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests", "fqn": ["jira_integration_tests", "status"], "unique_id": "seed.jira_integration_tests.status", "package_name": "jira_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests", "path": "status.csv", "original_file_path": "seeds/status.csv", "name": "status", "alias": "status", "checksum": {"name": "sha256", "checksum": "8a8c0167d920ede6bfabc65b7222e8d7dd8a89980300ea94b2f3b73c0a5fd645"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1663707928.72662, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests\".\"status\""}, "seed.jira_integration_tests.user_group": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests", "fqn": ["jira_integration_tests", "user_group"], "unique_id": "seed.jira_integration_tests.user_group", "package_name": "jira_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests", "path": "user_group.csv", "original_file_path": "seeds/user_group.csv", "name": "user_group", "alias": "user_group", "checksum": {"name": "sha256", "checksum": "d4f0f807391428848ccbed1222b3a257ec19268893a4bd5bb99232636bf1d105"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1663707928.727575, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests\".\"user_group\""}, "seed.jira_integration_tests.component": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "bigint", "project_id": "bigint"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests", "fqn": ["jira_integration_tests", "component"], "unique_id": "seed.jira_integration_tests.component", "package_name": "jira_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests", "path": "component.csv", "original_file_path": "seeds/component.csv", "name": "component", "alias": "component", "checksum": {"name": "sha256", "checksum": "4488ce1f19d7cba2e11b81d79de180b955e52ec4028dd5e3061f6d8866919a2a"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "project_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "created_at": 1663707928.728448, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests\".\"component\""}, "seed.jira_integration_tests.project": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests", "fqn": ["jira_integration_tests", "project"], "unique_id": "seed.jira_integration_tests.project", "package_name": "jira_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests", "path": "project.csv", "original_file_path": "seeds/project.csv", "name": "project", "alias": "project", "checksum": {"name": "sha256", "checksum": "fd8986c9b9a2eaecbe37500e7f5c7529b959dfe2422bf2d662754e292d53c134"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1663707928.729325, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests\".\"project\""}, "seed.jira_integration_tests.issue_multiselect_history": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "time": "timestamp", "issue_id": "bigint", "value": "varchar"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests", "fqn": ["jira_integration_tests", "issue_multiselect_history"], "unique_id": "seed.jira_integration_tests.issue_multiselect_history", "package_name": "jira_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests", "path": "issue_multiselect_history.csv", "original_file_path": "seeds/issue_multiselect_history.csv", "name": "issue_multiselect_history", "alias": "issue_multiselect_history", "checksum": {"name": "sha256", "checksum": "266af0ef486fec0a6db9679d2dd4d15ecba43bff757867eb5de674c8e6257b81"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"time": "timestamp", "issue_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "value": "{{ 'string' if target.name in ('bigquery', 'spark') else 'varchar' }}"}}, "created_at": 1663707928.730199, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests\".\"issue_multiselect_history\""}, "seed.jira_integration_tests.comment": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "bigint", "created": "timestamp", "issue_id": "bigint", "updated": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests", "fqn": ["jira_integration_tests", "comment"], "unique_id": "seed.jira_integration_tests.comment", "package_name": "jira_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests", "path": "comment.csv", "original_file_path": "seeds/comment.csv", "name": "comment", "alias": "comment", "checksum": {"name": "sha256", "checksum": "d3e7dc573cc229747d3a0097e90324be44bd7633336d7d854af579637cd65963"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "created": "timestamp", "issue_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "updated": "timestamp"}}, "created_at": 1663707928.7311811, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests\".\"comment\""}, "seed.jira_integration_tests.issue": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "bigint", "created": "timestamp", "work_ratio": "float", "resolved": "timestamp", "updated": "timestamp", "assignee": "varchar"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests", "fqn": ["jira_integration_tests", "issue"], "unique_id": "seed.jira_integration_tests.issue", "package_name": "jira_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests", "path": "issue.csv", "original_file_path": "seeds/issue.csv", "name": "issue", "alias": "issue", "checksum": {"name": "sha256", "checksum": "0fb53af4ec6b72400d2bb588cc8ee5df88e90bd28f50bbb1d6d527861fa7df94"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "created": "timestamp", "work_ratio": "float", "resolved": "timestamp", "updated": "timestamp", "assignee": "{{ 'string' if target.name in ('bigquery', 'spark') else 'varchar' }}"}}, "created_at": 1663707928.732086, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests\".\"issue\""}, "seed.jira_integration_tests.sprint": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "bigint", "complete_date": "timestamp", "end_date": "timestamp", "start_date": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests", "fqn": ["jira_integration_tests", "sprint"], "unique_id": "seed.jira_integration_tests.sprint", "package_name": "jira_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests", "path": "sprint.csv", "original_file_path": "seeds/sprint.csv", "name": "sprint", "alias": "sprint", "checksum": {"name": "sha256", "checksum": "919fd64d33b7c2a55fdcd3bb30eb19030dff6825b7c651867ad17512407df873"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "complete_date": "timestamp", "end_date": "timestamp", "start_date": "timestamp"}}, "created_at": 1663707928.733004, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests\".\"sprint\""}, "seed.jira_integration_tests.field_option": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "bigint"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests", "fqn": ["jira_integration_tests", "field_option"], "unique_id": "seed.jira_integration_tests.field_option", "package_name": "jira_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests", "path": "field_option.csv", "original_file_path": "seeds/field_option.csv", "name": "field_option", "alias": "field_option", "checksum": {"name": "sha256", "checksum": "7098765ca05d57eb72a62dbf8a73dec47359a14fe74d4438a5f8ac0b43b84fb5"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "created_at": 1663707928.733898, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests\".\"field_option\""}, "seed.jira_integration_tests.epic": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "bigint"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests", "fqn": ["jira_integration_tests", "epic"], "unique_id": "seed.jira_integration_tests.epic", "package_name": "jira_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests", "path": "epic.csv", "original_file_path": "seeds/epic.csv", "name": "epic", "alias": "epic", "checksum": {"name": "sha256", "checksum": "c0330c18dbeb3ba527c84e3625f7ce51994d90296970a0f03cd7bf74dd37b68e"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}"}}, "created_at": 1663707928.7347999, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests\".\"epic\""}, "seed.jira_integration_tests.field": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "id": "varchar"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests", "fqn": ["jira_integration_tests", "field"], "unique_id": "seed.jira_integration_tests.field", "package_name": "jira_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests", "path": "field.csv", "original_file_path": "seeds/field.csv", "name": "field", "alias": "field", "checksum": {"name": "sha256", "checksum": "1a1bf85a3609dae9208a40cdb353b710125668595523093b4c36109b2f99aa07"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"id": "{{ 'string' if target.name in ('bigquery', 'spark') else 'varchar' }}"}}, "created_at": 1663707928.7357829, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests\".\"field\""}, "seed.jira_integration_tests.user": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests", "fqn": ["jira_integration_tests", "user"], "unique_id": "seed.jira_integration_tests.user", "package_name": "jira_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests", "path": "user.csv", "original_file_path": "seeds/user.csv", "name": "user", "alias": "user", "checksum": {"name": "sha256", "checksum": "09b765c18fcde1e10c80196dc6b38d635fa6ce1361ba31aa2b2da75f447951ab"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1663707928.7366521, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests\".\"user\""}, "seed.jira_integration_tests.priority": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests", "fqn": ["jira_integration_tests", "priority"], "unique_id": "seed.jira_integration_tests.priority", "package_name": "jira_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests", "path": "priority.csv", "original_file_path": "seeds/priority.csv", "name": "priority", "alias": "priority", "checksum": {"name": "sha256", "checksum": "c64e8f0963669242bf6355d5658bef9bacea31c4ee9378d970965b4cef06c691"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1663707928.737497, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests\".\"priority\""}, "seed.jira_integration_tests.status_category": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests", "fqn": ["jira_integration_tests", "status_category"], "unique_id": "seed.jira_integration_tests.status_category", "package_name": "jira_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests", "path": "status_category.csv", "original_file_path": "seeds/status_category.csv", "name": "status_category", "alias": "status_category", "checksum": {"name": "sha256", "checksum": "b70923cd595a54c3e64fe588783062ca1115e9055dbe63329c203fcb3c14b1c3"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1663707928.7383418, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests\".\"status_category\""}, "seed.jira_integration_tests.issue_field_history": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "time": "timestamp", "issue_id": "bigint", "value": "varchar"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests", "fqn": ["jira_integration_tests", "issue_field_history"], "unique_id": "seed.jira_integration_tests.issue_field_history", "package_name": "jira_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests", "path": "issue_field_history.csv", "original_file_path": "seeds/issue_field_history.csv", "name": "issue_field_history", "alias": "issue_field_history", "checksum": {"name": "sha256", "checksum": "3cbf9808964cb92833f78327f878bd6fc174784bcdb1630d8a56959fdf7e1f9c"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"time": "timestamp", "issue_id": "{{ 'int64' if target.name == 'bigquery' else 'bigint' }}", "value": "{{ 'string' if target.name in ('bigquery', 'spark') else 'varchar' }}"}}, "created_at": 1663707928.739646, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests\".\"issue_field_history\""}, "seed.jira_integration_tests.project_category": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp"}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests", "fqn": ["jira_integration_tests", "project_category"], "unique_id": "seed.jira_integration_tests.project_category", "package_name": "jira_integration_tests", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests", "path": "project_category.csv", "original_file_path": "seeds/project_category.csv", "name": "project_category", "alias": "project_category", "checksum": {"name": "sha256", "checksum": "0420d8a815583af92a68a51fa4b46d3081a33aa8c2d6649d7f52065721a0301d"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp"}}, "created_at": 1663707928.740574, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests\".\"project_category\""}, "model.jira.jira__daily_issue_field_history": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        partition_by = {'field': 'date_day', 'data_type': 'date'}\n            if target.type != 'spark' else ['date_day'],\n        unique_key='issue_day_id',\n        incremental_strategy = 'merge',\n        file_format = 'delta'\n    )\n}}\n\n-- grab column names that were pivoted out\n{%- set pivot_data_columns = adapter.get_columns_in_relation(ref('int_jira__field_history_scd')) -%}\n\n-- in intermediate/field_history/\nwith pivoted_daily_history as (\n\n    select * \n    from {{ ref('int_jira__field_history_scd') }}\n\n    {% if is_incremental() %}\n    \n    where valid_starting_on >= (select max(date_day) from {{ this }} )\n\n-- If no issue fields have been updated since the last incremental run, the pivoted_daily_history CTE will return no record/rows.\n-- When this is the case, we need to grab the most recent day's records from the previously built table so that we can persist \n-- those values into the future.\n\n), most_recent_data as ( \n \n    select \n        *\n    from {{ this }}\n    where date_day = (select max(date_day) from {{ this }} )\n\n{% endif %}\n\n), field_option as (\n    \n    select *\n    from {{ var('field_option') }}\n),\n\nstatuses as (\n    \n    select *\n    from {{ var('status') }}\n),\n\n-- in intermediate/field_history/\ncalendar as (\n\n    select *\n    from {{ ref('int_jira__issue_calendar_spine') }}\n\n    {% if is_incremental() %}\n    where date_day >= (select max(date_day) from {{ this }} )\n    {% endif %}\n),\n\njoined as (\n\n    select\n        calendar.date_day,\n        calendar.issue_id\n    \n    {% if is_incremental() %}    \n        {% for col in pivot_data_columns if col.name|lower not in ['issue_day_id','issue_id','valid_starting_on'] %} \n        , coalesce(pivoted_daily_history.{{ col.name }}, most_recent_data.{{ col.name }}) as {{ col.name }}\n        {% endfor %}\n    \n    {% else %}\n        {% for col in pivot_data_columns if col.name|lower not in ['issue_day_id','issue_id','valid_starting_on'] %} \n        , {{ col.name }}\n        {% endfor %}\n    {% endif %}\n    \n    from calendar\n    left join pivoted_daily_history \n        on calendar.issue_id = pivoted_daily_history.issue_id\n        and calendar.date_day = pivoted_daily_history.valid_starting_on\n    \n    {% if is_incremental() %}\n    left join most_recent_data\n        on calendar.issue_id = most_recent_data.issue_id\n        and calendar.date_day = most_recent_data.date_day\n    {% endif %}\n),\n\nset_values as (\n\n    select\n        date_day,\n        issue_id,\n        statuses.status_name as status,\n        sum( case when statuses.status_name is null then 0 else 1 end) over ( partition by issue_id\n            order by date_day rows unbounded preceding) as status_field_partition\n\n        {% for col in pivot_data_columns if col.name|lower not in ['issue_id','issue_day_id','valid_starting_on','status'] %}\n        , coalesce(field_option_{{ col.name }}.field_option_name, {{ col.name }}) as {{ col.name }}\n        -- create a batch/partition once a new value is provided\n        , sum( case when {{ col.name }} is null then 0 else 1 end) over ( partition by issue_id\n            order by date_day rows unbounded preceding) as {{ col.name }}_field_partition\n\n        {% endfor %}\n\n    from joined\n\n    left join statuses\n        on cast(statuses.status_id as {{ dbt_utils.type_string() }}) = joined.status\n\n    {% for col in pivot_data_columns if col.name|lower not in ['issue_id','issue_day_id','valid_starting_on','status'] %}\n    left join field_option as field_option_{{ col.name }}\n        on cast(field_option_{{ col.name }}.field_id as {{ dbt_utils.type_string() }}) = {{ col.name }}\n    {% endfor %}\n),\n\nfill_values as (\n\n    select  \n        date_day,\n        issue_id,\n        first_value( status ) over (\n            partition by issue_id, status_field_partition \n            order by date_day asc rows between unbounded preceding and current row) as status\n\n        {% for col in pivot_data_columns if col.name|lower not in ['issue_id','issue_day_id','valid_starting_on','status'] %}\n        -- grab the value that started this batch/partition\n        , first_value( {{ col.name }} ) over (\n            partition by issue_id, {{ col.name }}_field_partition \n            order by date_day asc rows between unbounded preceding and current row) as {{ col.name }}\n        {% endfor %}\n\n    from set_values\n),\n\nfix_null_values as (\n\n    select  \n        date_day,\n        issue_id,\n        case when status = 'is_null' then null else status end as status\n        {% for col in pivot_data_columns if col.name|lower not in ['issue_id','issue_day_id','valid_starting_on','status'] %} \n\n        -- we de-nulled the true null values earlier in order to differentiate them from nulls that just needed to be backfilled\n        , case when {{ col.name }} = 'is_null' then null else {{ col.name }} end as {{ col.name }}\n        {% endfor %}\n\n    from fill_values\n\n),\n\nsurrogate_key as (\n\n    select\n        *,\n        {{ dbt_utils.surrogate_key(['date_day','issue_id']) }} as issue_day_id\n\n    from fix_null_values\n)\n\nselect *\nfrom surrogate_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.type_string", "macro.dbt_utils.surrogate_key"], "nodes": ["model.jira.int_jira__field_history_scd", "model.jira.int_jira__field_history_scd", "model.jira_source.stg_jira__field_option", "model.jira_source.stg_jira__status", "model.jira.int_jira__issue_calendar_spine"]}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "partition_by": {"field": "date_day", "data_type": "date"}, "unique_key": "issue_day_id", "incremental_strategy": "merge", "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira", "fqn": ["jira", "jira__daily_issue_field_history"], "unique_id": "model.jira.jira__daily_issue_field_history", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "jira__daily_issue_field_history.sql", "original_file_path": "models/jira__daily_issue_field_history.sql", "name": "jira__daily_issue_field_history", "alias": "jira__daily_issue_field_history", "checksum": {"name": "sha256", "checksum": "82f7d8463abe5fa9725e799cf3c55d21d296a6c8252211ef067ac75bbec6de59"}, "tags": [], "refs": [["int_jira__field_history_scd"], ["int_jira__field_history_scd"], ["stg_jira__field_option"], ["stg_jira__status"], ["int_jira__issue_calendar_spine"]], "sources": [], "description": "Each record represents a snapshot of an issue's selected fields (as specified in the `issue_history_columns` variable + sprint and status by default) on a given day. Each issue will have a record for every day in which it was open and/or being updated.  For currently open issues, the latest date will be the current date, and for closed issues, this will be the last time the issue was resolved OR updated in any way (plus a configurable buffer afterward, set to a month by default). Note: this is an incremental model.\n", "columns": {"date_day": {"name": "date_day", "description": "Date on which the issue had these field values.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_id": {"name": "issue_id", "description": "Foreign key referencing the ID of the `issue` with these values.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_day_id": {"name": "issue_day_id", "description": "Surrogate key hashed on `date_day` and `issue_id`", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sprint": {"name": "sprint", "description": "The ID of the sprint that an issue is slotted into on a given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The ID of the status that an issue has on a given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira://models/jira.yml", "compiled_path": "target/compiled/jira/models/jira__daily_issue_field_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "jira", "partition_by": {"field": "date_day", "data_type": "date"}, "unique_key": "issue_day_id", "incremental_strategy": "merge", "file_format": "delta"}, "created_at": 1663707929.1071029, "compiled_sql": "\n\n-- grab column names that were pivoted out-- in intermediate/field_history/\nwith pivoted_daily_history as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__field_history_scd\"\n\n    \n    \n    where valid_starting_on >= (select max(date_day) from \"postgres\".\"jira_integration_tests_jira\".\"jira__daily_issue_field_history\" )\n\n-- If no issue fields have been updated since the last incremental run, the pivoted_daily_history CTE will return no record/rows.\n-- When this is the case, we need to grab the most recent day's records from the previously built table so that we can persist \n-- those values into the future.\n\n), most_recent_data as ( \n \n    select \n        *\n    from \"postgres\".\"jira_integration_tests_jira\".\"jira__daily_issue_field_history\"\n    where date_day = (select max(date_day) from \"postgres\".\"jira_integration_tests_jira\".\"jira__daily_issue_field_history\" )\n\n\n\n), field_option as (\n    \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field_option\"\n),\n\nstatuses as (\n    \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__status\"\n),\n\n-- in intermediate/field_history/\ncalendar as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__issue_calendar_spine\"\n\n    \n    where date_day >= (select max(date_day) from \"postgres\".\"jira_integration_tests_jira\".\"jira__daily_issue_field_history\" )\n    \n),\n\njoined as (\n\n    select\n        calendar.date_day,\n        calendar.issue_id\n    \n        \n         \n        , coalesce(pivoted_daily_history.status, most_recent_data.status) as status\n         \n        , coalesce(pivoted_daily_history.sprint, most_recent_data.sprint) as sprint\n         \n        , coalesce(pivoted_daily_history.summary, most_recent_data.summary) as summary\n         \n        , coalesce(pivoted_daily_history.components, most_recent_data.components) as components\n         \n        , coalesce(pivoted_daily_history.story_points, most_recent_data.story_points) as story_points\n        \n    \n    \n    \n    from calendar\n    left join pivoted_daily_history \n        on calendar.issue_id = pivoted_daily_history.issue_id\n        and calendar.date_day = pivoted_daily_history.valid_starting_on\n    \n    \n    left join most_recent_data\n        on calendar.issue_id = most_recent_data.issue_id\n        and calendar.date_day = most_recent_data.date_day\n    \n),\n\nset_values as (\n\n    select\n        date_day,\n        issue_id,\n        statuses.status_name as status,\n        sum( case when statuses.status_name is null then 0 else 1 end) over ( partition by issue_id\n            order by date_day rows unbounded preceding) as status_field_partition\n\n        \n        , coalesce(field_option_sprint.field_option_name, sprint) as sprint\n        -- create a batch/partition once a new value is provided\n        , sum( case when sprint is null then 0 else 1 end) over ( partition by issue_id\n            order by date_day rows unbounded preceding) as sprint_field_partition\n\n        \n        , coalesce(field_option_summary.field_option_name, summary) as summary\n        -- create a batch/partition once a new value is provided\n        , sum( case when summary is null then 0 else 1 end) over ( partition by issue_id\n            order by date_day rows unbounded preceding) as summary_field_partition\n\n        \n        , coalesce(field_option_components.field_option_name, components) as components\n        -- create a batch/partition once a new value is provided\n        , sum( case when components is null then 0 else 1 end) over ( partition by issue_id\n            order by date_day rows unbounded preceding) as components_field_partition\n\n        \n        , coalesce(field_option_story_points.field_option_name, story_points) as story_points\n        -- create a batch/partition once a new value is provided\n        , sum( case when story_points is null then 0 else 1 end) over ( partition by issue_id\n            order by date_day rows unbounded preceding) as story_points_field_partition\n\n        \n\n    from joined\n\n    left join statuses\n        on cast(statuses.status_id as \n    varchar\n) = joined.status\n\n    \n    left join field_option as field_option_sprint\n        on cast(field_option_sprint.field_id as \n    varchar\n) = sprint\n    \n    left join field_option as field_option_summary\n        on cast(field_option_summary.field_id as \n    varchar\n) = summary\n    \n    left join field_option as field_option_components\n        on cast(field_option_components.field_id as \n    varchar\n) = components\n    \n    left join field_option as field_option_story_points\n        on cast(field_option_story_points.field_id as \n    varchar\n) = story_points\n    \n),\n\nfill_values as (\n\n    select  \n        date_day,\n        issue_id,\n        first_value( status ) over (\n            partition by issue_id, status_field_partition \n            order by date_day asc rows between unbounded preceding and current row) as status\n\n        \n        -- grab the value that started this batch/partition\n        , first_value( sprint ) over (\n            partition by issue_id, sprint_field_partition \n            order by date_day asc rows between unbounded preceding and current row) as sprint\n        \n        -- grab the value that started this batch/partition\n        , first_value( summary ) over (\n            partition by issue_id, summary_field_partition \n            order by date_day asc rows between unbounded preceding and current row) as summary\n        \n        -- grab the value that started this batch/partition\n        , first_value( components ) over (\n            partition by issue_id, components_field_partition \n            order by date_day asc rows between unbounded preceding and current row) as components\n        \n        -- grab the value that started this batch/partition\n        , first_value( story_points ) over (\n            partition by issue_id, story_points_field_partition \n            order by date_day asc rows between unbounded preceding and current row) as story_points\n        \n\n    from set_values\n),\n\nfix_null_values as (\n\n    select  \n        date_day,\n        issue_id,\n        case when status = 'is_null' then null else status end as status\n         \n\n        -- we de-nulled the true null values earlier in order to differentiate them from nulls that just needed to be backfilled\n        , case when sprint = 'is_null' then null else sprint end as sprint\n         \n\n        -- we de-nulled the true null values earlier in order to differentiate them from nulls that just needed to be backfilled\n        , case when summary = 'is_null' then null else summary end as summary\n         \n\n        -- we de-nulled the true null values earlier in order to differentiate them from nulls that just needed to be backfilled\n        , case when components = 'is_null' then null else components end as components\n         \n\n        -- we de-nulled the true null values earlier in order to differentiate them from nulls that just needed to be backfilled\n        , case when story_points = 'is_null' then null else story_points end as story_points\n        \n\n    from fill_values\n\n),\n\nsurrogate_key as (\n\n    select\n        *,\n        md5(cast(coalesce(cast(date_day as \n    varchar\n), '') || '-' || coalesce(cast(issue_id as \n    varchar\n), '') as \n    varchar\n)) as issue_day_id\n\n    from fix_null_values\n)\n\nselect *\nfrom surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira\".\"jira__daily_issue_field_history\""}, "model.jira.jira__user_enhanced": {"raw_sql": "with jira_user as (\n\n    select *\n    from {{ var('user') }}\n),\n\nuser_metrics as (\n\n    select *\n    from {{ ref('int_jira__user_metrics') }}\n),\n\nissue as (\n\n    select *\n    from {{ ref('jira__issue_enhanced') }} \n),\n\nuser_project as (\n\n    select \n        assignee_user_id,\n        project_name\n\n    from issue\n    group by 1,2\n\n),\n\nagg_user_projects as (\n\n    select \n        assignee_user_id,\n        {{ fivetran_utils.string_agg( \"project_name\", \"', '\" ) }} as projects\n\n    from user_project\n    group by 1\n),\n\nuser_join as (\n\n    select\n        jira_user.*,\n        agg_user_projects.projects, -- projects they've worked on issues for\n        coalesce(user_metrics.count_closed_issues, 0) as count_closed_issues,\n        coalesce(user_metrics.count_open_issues, 0) as count_open_issues,\n\n        -- days\n        user_metrics.avg_close_time_days,\n        user_metrics.avg_age_currently_open_days,\n        \n        user_metrics.median_close_time_days,\n        user_metrics.median_age_currently_open_days,\n\n        -- seconds\n        user_metrics.avg_close_time_seconds,\n        user_metrics.avg_age_currently_open_seconds,\n        \n        user_metrics.median_close_time_seconds,\n        user_metrics.median_age_currently_open_seconds\n\n    from jira_user \n    left join user_metrics on jira_user.user_id = user_metrics.user_id\n    left join agg_user_projects on jira_user.user_id = agg_user_projects.assignee_user_id\n)\n\nselect * from user_join", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.string_agg"], "nodes": ["model.jira_source.stg_jira__user", "model.jira.int_jira__user_metrics", "model.jira.jira__issue_enhanced"]}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira", "fqn": ["jira", "jira__user_enhanced"], "unique_id": "model.jira.jira__user_enhanced", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "jira__user_enhanced.sql", "original_file_path": "models/jira__user_enhanced.sql", "name": "jira__user_enhanced", "alias": "jira__user_enhanced", "checksum": {"name": "sha256", "checksum": "6f7332740533b307bc99ce9cf8fc6cf3e91cd88860b14b2c986ec56f0826fdbf"}, "tags": [], "refs": [["stg_jira__user"], ["int_jira__user_metrics"], ["jira__issue_enhanced"]], "sources": [], "description": "Table of users enriched with their projects, and the volume and velocity of their issues.\n", "columns": {"user_id": {"name": "user_id", "description": "Unique ID of the user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Email associated with the user acccount.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "locale": {"name": "locale", "description": "The Java locale of the user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_display_name": {"name": "user_display_name", "description": "Name of the user as it appears in the UI.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_zone": {"name": "time_zone", "description": "The user's timezone, as defined in their settings.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "username": {"name": "username", "description": "Account username.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "projects": {"name": "projects", "description": "Comma-separated list of projects on which the user has been assigned to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_closed_issues": {"name": "count_closed_issues", "description": "The number of issues that the user has closed (while being assigned to).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_open_issues": {"name": "count_open_issues", "description": "The number of currently open issues that the user is assigned to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_close_time_seconds": {"name": "avg_close_time_seconds", "description": "The average time taken to close issues since assignment, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_age_currently_open_seconds": {"name": "avg_age_currently_open_seconds", "description": "Tjhe average age of a user's currently open issues.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "median_close_time_seconds": {"name": "median_close_time_seconds", "description": "The median time taken to close issues since assignment, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "median_age_currently_open_seconds": {"name": "median_age_currently_open_seconds", "description": "The median age of a user's currently open issues.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_close_time_days": {"name": "avg_close_time_days", "description": "The average time taken to close issues since assignment, in days.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_age_currently_open_days": {"name": "avg_age_currently_open_days", "description": "The average age of a user's currently open issues.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "median_close_time_days": {"name": "median_close_time_days", "description": "The median time taken to close issues since assignment, in days.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "median_age_currently_open_days": {"name": "median_age_currently_open_days", "description": "The median age of a user's currently open issues.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira://models/jira.yml", "compiled_path": "target/compiled/jira/models/jira__user_enhanced.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1663707929.1222441, "compiled_sql": "with  __dbt__cte__int_jira__user_metrics as (\nwith issue as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira\".\"jira__issue_enhanced\" \n    where assignee_user_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        assignee_user_id as user_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n), 0) as median_close_time_seconds,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n), 0) as median_age_currently_open_seconds\n\n    from issue\n\n     group by 1 \n),\n\n-- grouping because the medians were calculated using window functions (except postgres)\nmedian_metrics as (\n\n    select \n        user_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds\n\n    from calculate_medians\n    group by 1,2,3\n),\n\n\nuser_issues as (\n\n    select\n        assignee_user_id as user_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        sum(case when resolved_at is not null then last_assignment_duration_seconds end) as sum_current_open_seconds,\n        sum(case when resolved_at is null then last_assignment_duration_seconds end) as sum_close_time_seconds\n\n    from issue\n\n    group by 1\n\n),\n\ncalculate_avg_metrics as (\n\n    select \n        user_id,\n        count_closed_issues,\n        count_open_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues as \n    numeric(28, 6)\n ), 0) end as avg_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_current_open_seconds * 1.0 / count_open_issues as \n    numeric(28, 6)\n ), 0) end as avg_age_currently_open_seconds\n\n    from user_issues\n),\n\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_age_currently_open_days,\n\n        median_metrics.median_close_time_seconds,\n        median_metrics.median_age_currently_open_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(user_id)\n)\n\nselect * from join_metrics\n),jira_user as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__user\"\n),\n\nuser_metrics as (\n\n    select *\n    from __dbt__cte__int_jira__user_metrics\n),\n\nissue as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira\".\"jira__issue_enhanced\" \n),\n\nuser_project as (\n\n    select \n        assignee_user_id,\n        project_name\n\n    from issue\n    group by 1,2\n\n),\n\nagg_user_projects as (\n\n    select \n        assignee_user_id,\n        \n    string_agg(project_name, ', ')\n\n as projects\n\n    from user_project\n    group by 1\n),\n\nuser_join as (\n\n    select\n        jira_user.*,\n        agg_user_projects.projects, -- projects they've worked on issues for\n        coalesce(user_metrics.count_closed_issues, 0) as count_closed_issues,\n        coalesce(user_metrics.count_open_issues, 0) as count_open_issues,\n\n        -- days\n        user_metrics.avg_close_time_days,\n        user_metrics.avg_age_currently_open_days,\n        \n        user_metrics.median_close_time_days,\n        user_metrics.median_age_currently_open_days,\n\n        -- seconds\n        user_metrics.avg_close_time_seconds,\n        user_metrics.avg_age_currently_open_seconds,\n        \n        user_metrics.median_close_time_seconds,\n        user_metrics.median_age_currently_open_seconds\n\n    from jira_user \n    left join user_metrics on jira_user.user_id = user_metrics.user_id\n    left join agg_user_projects on jira_user.user_id = agg_user_projects.assignee_user_id\n)\n\nselect * from user_join", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.jira.int_jira__user_metrics", "sql": " __dbt__cte__int_jira__user_metrics as (\nwith issue as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira\".\"jira__issue_enhanced\" \n    where assignee_user_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        assignee_user_id as user_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n), 0) as median_close_time_seconds,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n), 0) as median_age_currently_open_seconds\n\n    from issue\n\n     group by 1 \n),\n\n-- grouping because the medians were calculated using window functions (except postgres)\nmedian_metrics as (\n\n    select \n        user_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds\n\n    from calculate_medians\n    group by 1,2,3\n),\n\n\nuser_issues as (\n\n    select\n        assignee_user_id as user_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        sum(case when resolved_at is not null then last_assignment_duration_seconds end) as sum_current_open_seconds,\n        sum(case when resolved_at is null then last_assignment_duration_seconds end) as sum_close_time_seconds\n\n    from issue\n\n    group by 1\n\n),\n\ncalculate_avg_metrics as (\n\n    select \n        user_id,\n        count_closed_issues,\n        count_open_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues as \n    numeric(28, 6)\n ), 0) end as avg_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_current_open_seconds * 1.0 / count_open_issues as \n    numeric(28, 6)\n ), 0) end as avg_age_currently_open_seconds\n\n    from user_issues\n),\n\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_age_currently_open_days,\n\n        median_metrics.median_close_time_seconds,\n        median_metrics.median_age_currently_open_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(user_id)\n)\n\nselect * from join_metrics\n)"}], "relation_name": "\"postgres\".\"jira_integration_tests_jira\".\"jira__user_enhanced\""}, "model.jira.jira__issue_enhanced": {"raw_sql": "with issue as (\n\n    select *\n    from {{ ref('int_jira__issue_join' ) }}\n),\n\n{%- set pivot_data_columns = adapter.get_columns_in_relation(ref('jira__daily_issue_field_history')) -%}\n\n{%- set issue_data_columns = adapter.get_columns_in_relation(ref('int_jira__issue_join' )) -%}\n{%- set issue_data_columns_clean = [] -%}\n\n{%- for k in issue_data_columns -%}\n    {{ issue_data_columns_clean.append(k.name|lower)|default(\"\", True)  }}\n{%- endfor -%}\n\ndaily_issue_field_history as (\n    \n    select\n        *,\n        row_number() over (partition by issue_id order by date_day desc) = 1 as latest_record\n    from {{ ref('jira__daily_issue_field_history')}}\n\n),\n\nlatest_issue_field_history as (\n    \n    select\n        *\n    from daily_issue_field_history\n    where latest_record\n),\n\nfinal as (\n\n    select \n    \n        issue.*,\n\n        {{ dbt_utils.datediff('created_at', \"coalesce(resolved_at, \" ~ dbt_utils.current_timestamp() ~ ')', 'second') }} open_duration_seconds,\n\n        -- this will be null if no one has been assigned\n        {{ dbt_utils.datediff('first_assigned_at', \"coalesce(resolved_at, \" ~ dbt_utils.current_timestamp() ~ ')', 'second') }} any_assignment_duration_seconds,\n\n        -- if an issue is not currently assigned this will not be null\n        {{ dbt_utils.datediff('last_assigned_at', \"coalesce(resolved_at, \" ~ dbt_utils.current_timestamp() ~ ')', 'second') }} last_assignment_duration_seconds \n\n        {% for col in pivot_data_columns if col.name|lower not in issue_data_columns_clean %} \n            {%- if col.name|lower not in ['issue_day_id','issue_id','latest_record', 'date_day'] -%}\n                , {{ col.name }}\n            {%- endif -%}\n        {% endfor %}\n\n    from issue\n    \n    left join latest_issue_field_history \n        on issue.issue_id = latest_issue_field_history.issue_id\n        \n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"], "nodes": ["model.jira.int_jira__issue_join", "model.jira.jira__daily_issue_field_history", "model.jira.int_jira__issue_join", "model.jira.jira__daily_issue_field_history"]}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira", "fqn": ["jira", "jira__issue_enhanced"], "unique_id": "model.jira.jira__issue_enhanced", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "jira__issue_enhanced.sql", "original_file_path": "models/jira__issue_enhanced.sql", "name": "jira__issue_enhanced", "alias": "jira__issue_enhanced", "checksum": {"name": "sha256", "checksum": "09af28c206d77bf65995367fd53e55e7c031dcd952cde27f7552d4d602428850"}, "tags": [], "refs": [["int_jira__issue_join"], ["jira__daily_issue_field_history"], ["int_jira__issue_join"], ["jira__daily_issue_field_history"]], "sources": [], "description": "The core issue table, enhanced with current-status attributes from foreign-key-related tables, and metrics regarding resolutions and assignments.\n", "columns": {"issue_id": {"name": "issue_id", "description": "Unique ID of the issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_name": {"name": "issue_name", "description": "Title of the issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the issue was last updated in some way.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_type": {"name": "issue_type", "description": "Name of the issue type (ie Epic, Task, Subtask, any custom types).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the issue was created (in UTC).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_description": {"name": "issue_description", "description": "The issue description, if given.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "Calendar day on which the issue is due, if a due date is provided.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "environment": {"name": "environment", "description": "Text field describing the environment in which the issue occurred (ie \"IE9 on Windows 7\").", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assignee_user_id": {"name": "assignee_user_id", "description": "Foreign key referencing the ID of the `user` currently assigned to this task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assignee_name": {"name": "assignee_name", "description": "User display name of the person currently assigned this issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reporter_user_id": {"name": "reporter_user_id", "description": "Foreign key referencing the ID of the `user` who reported the issue. This differs from the `issue.creator` column  in that the reporter can be changed in-app, though it is initialized as the creator.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reporter_name": {"name": "reporter_name", "description": "User display name of the person who reported the issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assignee_timezone": {"name": "assignee_timezone", "description": "Timezone of the user currently assigned this issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assignee_email": {"name": "assignee_email", "description": "Email associated with the user currently assigned this issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_key": {"name": "issue_key", "description": "UI-facing id of the issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_issue_id": {"name": "parent_issue_id", "description": "Self-referencing ID of the parent `issue`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_issue_name": {"name": "parent_issue_name", "description": "Title of the parent issue/epic.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_issue_key": {"name": "parent_issue_key", "description": "Issue key of the sub-issue's parent/epic.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_issue_type": {"name": "parent_issue_type", "description": "Name of the type of issue that the parent is.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_priority": {"name": "current_priority", "description": "Name of the issue's current priority as it appears in the UI.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_id": {"name": "project_id", "description": "Foreign key referencing the `project` that the issue belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "Title of the issue's project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "resolution_type": {"name": "resolution_type", "description": "Display name of the type of resolution that closed the issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "resolved_at": {"name": "resolved_at", "description": "Timestamp of when the issue was resolved (ie completed, marked as duplicate). If an issue is un-resolved, this will be null.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_status": {"name": "current_status", "description": "Title of the category of status.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status_changed_at": {"name": "status_changed_at", "description": "Timestamp of when the status was last changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sprint_id": {"name": "sprint_id", "description": "Foreign key referencing the `sprint` that the issue is currently in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sprint_name": {"name": "sprint_name", "description": "Title of the issue's sprint.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_sprint_changes": {"name": "count_sprint_changes", "description": "The total number of sprints that the issue has belonged to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active_sprint": {"name": "is_active_sprint", "description": "Yes, if the sprint started after the current time and if the sprint ends in the future.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sprint_completed_at": {"name": "sprint_completed_at", "description": "Timestamp of when the sprint was completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sprint_ended_at": {"name": "sprint_ended_at", "description": "Timestamp of when the sprint is planned to end.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sprint_started_at": {"name": "sprint_started_at", "description": "Timestamp of when the sprint began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_estimate_seconds": {"name": "original_estimate_seconds", "description": "The original estimate of how long working on this issue would take, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "remaining_estimate_seconds": {"name": "remaining_estimate_seconds", "description": "The estimate of how much longer working on this issue will take, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_spent_seconds": {"name": "time_spent_seconds", "description": "The time that was spent working on this issue, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "work_ratio": {"name": "work_ratio", "description": "The percentage of work that has been logged against the issue (time_spent) vs the original estimate of worktime. Equals -1.0 when the fields required for calculation are not provided.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversation": {"name": "conversation", "description": "Line-separated list of comments made on this issue, including the timestamp and author name of each comment.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_comments": {"name": "count_comments", "description": "The number of comments made on this issues.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_assigned_at": {"name": "first_assigned_at", "description": "Timestamp of when the issue was first assigned to a user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_assigned_at": {"name": "last_assigned_at", "description": "Timestamp of when the issue was last assigned to a user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_resolved_at": {"name": "first_resolved_at", "description": "Timestamp of when the issue was first resolved.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "open_duration_seconds": {"name": "open_duration_seconds", "description": "The number of seconds that the issue has spent open (until resolution, or the current timestamp).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "any_assignment_duration_seconds": {"name": "any_assignment_duration_seconds", "description": "The number of seconds that the issue has spent assigned (until resolution, or the current timestamp).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_assignment_duration_seconds": {"name": "last_assignment_duration_seconds", "description": "The number of seconds that the issue has spent assigned to the current/most recent user (until resolution, or the current timestamp).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creator_user_id": {"name": "creator_user_id", "description": "Foreign key referencing the `user` who first created the issue. Cannot be changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_type_id": {"name": "issue_type_id", "description": "Foreign key referencing the ID of the `issue_type`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "priority_id": {"name": "priority_id", "description": "Foreign key referencing the ID of the issue's current `priority`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "resolution_id": {"name": "resolution_id", "description": "Foreign key referencing the ID of the issue's type of `resolution`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status_id": {"name": "status_id", "description": "Foreign key referencing the ID of the issue's `status` (the step that the issue is currently at  in the project's workflow).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_parent_epic": {"name": "is_parent_epic", "description": "Boolean that is true if the parent is an epic.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reporter_email": {"name": "reporter_email", "description": "Email associated with the user who reported this issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reporter_timezone": {"name": "reporter_timezone", "description": "Timezone of the user currently who reported this issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "affects_versions": {"name": "affects_versions", "description": "Comma-separated list of the names of project versions that this issue affects.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fixes_versions": {"name": "fixes_versions", "description": "Comma-separated list of the names of project versions that this issue fixes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_status_category": {"name": "current_status_category", "description": "Title of the umbrella status category that the issue is currently in.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira://models/jira.yml", "compiled_path": "target/compiled/jira/models/jira__issue_enhanced.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1663707929.115681, "compiled_sql": "with issue as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__issue_join\"\n),daily_issue_field_history as (\n    \n    select\n        *,\n        row_number() over (partition by issue_id order by date_day desc) = 1 as latest_record\n    from \"postgres\".\"jira_integration_tests_jira\".\"jira__daily_issue_field_history\"\n\n),\n\nlatest_issue_field_history as (\n    \n    select\n        *\n    from daily_issue_field_history\n    where latest_record\n),\n\nfinal as (\n\n    select \n    \n        issue.*,\n\n        \n        (\n        (\n        (\n        ((coalesce(resolved_at, \n    current_timestamp::\n    timestamp without time zone\n\n))::date - (created_at)::date)\n     * 24 + date_part('hour', (coalesce(resolved_at, \n    current_timestamp::\n    timestamp without time zone\n\n))::timestamp) - date_part('hour', (created_at)::timestamp))\n     * 60 + date_part('minute', (coalesce(resolved_at, \n    current_timestamp::\n    timestamp without time zone\n\n))::timestamp) - date_part('minute', (created_at)::timestamp))\n     * 60 + floor(date_part('second', (coalesce(resolved_at, \n    current_timestamp::\n    timestamp without time zone\n\n))::timestamp)) - floor(date_part('second', (created_at)::timestamp)))\n     open_duration_seconds,\n\n        -- this will be null if no one has been assigned\n        \n        (\n        (\n        (\n        ((coalesce(resolved_at, \n    current_timestamp::\n    timestamp without time zone\n\n))::date - (first_assigned_at)::date)\n     * 24 + date_part('hour', (coalesce(resolved_at, \n    current_timestamp::\n    timestamp without time zone\n\n))::timestamp) - date_part('hour', (first_assigned_at)::timestamp))\n     * 60 + date_part('minute', (coalesce(resolved_at, \n    current_timestamp::\n    timestamp without time zone\n\n))::timestamp) - date_part('minute', (first_assigned_at)::timestamp))\n     * 60 + floor(date_part('second', (coalesce(resolved_at, \n    current_timestamp::\n    timestamp without time zone\n\n))::timestamp)) - floor(date_part('second', (first_assigned_at)::timestamp)))\n     any_assignment_duration_seconds,\n\n        -- if an issue is not currently assigned this will not be null\n        \n        (\n        (\n        (\n        ((coalesce(resolved_at, \n    current_timestamp::\n    timestamp without time zone\n\n))::date - (last_assigned_at)::date)\n     * 24 + date_part('hour', (coalesce(resolved_at, \n    current_timestamp::\n    timestamp without time zone\n\n))::timestamp) - date_part('hour', (last_assigned_at)::timestamp))\n     * 60 + date_part('minute', (coalesce(resolved_at, \n    current_timestamp::\n    timestamp without time zone\n\n))::timestamp) - date_part('minute', (last_assigned_at)::timestamp))\n     * 60 + floor(date_part('second', (coalesce(resolved_at, \n    current_timestamp::\n    timestamp without time zone\n\n))::timestamp)) - floor(date_part('second', (last_assigned_at)::timestamp)))\n     last_assignment_duration_seconds \n\n        , status, sprint, summary, components, story_points\n\n    from issue\n    \n    left join latest_issue_field_history \n        on issue.issue_id = latest_issue_field_history.issue_id\n        \n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira\".\"jira__issue_enhanced\""}, "model.jira.jira__project_enhanced": {"raw_sql": "with project as (\n\n    select *\n    from {{ var('project') }}\n),\n\nproject_metrics as (\n\n    select * \n    from {{ ref('int_jira__project_metrics') }}\n),\n\n-- user is reserved in AWS\njira_user as (\n-- to grab the project lead\n    select *\n    from {{ var('user') }}\n),\n\nagg_epics as (\n\n    select \n        project_id,\n        {{ fivetran_utils.string_agg( \"issue_name\", \"', '\" ) }} as epics\n\n    from {{ ref('jira__issue_enhanced') }}\n    where lower(issue_type) = 'epic'\n    -- should we limit to active epics?\n    group by 1\n\n),\n\n{% if var('jira_using_components', True) %}\n\nagg_components as (\n    -- i'm just aggregating the components here, but perhaps pivoting out components (and epics) \n    -- into columns where the values are the number of issues completed and/or open would be more valuable\n    select \n        project_id,\n        {{ fivetran_utils.string_agg( \"component_name\", \"', '\" ) }} as components\n\n    from {{ var('component') }}\n\n    group by 1\n),\n\n{% endif %}\n\nproject_join as (\n\n    select\n        project.*,\n        jira_user.user_display_name as project_lead_user_name,\n        jira_user.email as project_lead_email,\n        agg_epics.epics,\n        \n        {% if var('jira_using_components', True) %}\n        agg_components.components,\n        {% endif %}\n\n        coalesce(project_metrics.count_closed_issues, 0) as count_closed_issues,\n        coalesce(project_metrics.count_open_issues, 0) as count_open_issues,\n        coalesce(project_metrics.count_open_assigned_issues, 0) as count_open_assigned_issues,\n\n        -- days\n        project_metrics.avg_close_time_days,\n        project_metrics.avg_assigned_close_time_days,\n\n        project_metrics.avg_age_currently_open_days,\n        project_metrics.avg_age_currently_open_assigned_days,\n\n        project_metrics.median_close_time_days, \n        project_metrics.median_age_currently_open_days,\n        project_metrics.median_assigned_close_time_days,\n        project_metrics.median_age_currently_open_assigned_days,\n\n        -- seconds\n        project_metrics.avg_close_time_seconds,\n        project_metrics.avg_assigned_close_time_seconds,\n\n        project_metrics.avg_age_currently_open_seconds,\n        project_metrics.avg_age_currently_open_assigned_seconds,\n\n        project_metrics.median_close_time_seconds, \n        project_metrics.median_age_currently_open_seconds,\n        project_metrics.median_assigned_close_time_seconds,\n        project_metrics.median_age_currently_open_assigned_seconds\n\n    from project\n    left join project_metrics on project.project_id = project_metrics.project_id\n    left join jira_user on project.project_lead_user_id = jira_user.user_id\n    left join agg_epics on project.project_id = agg_epics.project_id \n    \n    {% if var('jira_using_components', True) %}\n    left join agg_components on project.project_id = agg_components.project_id \n    {% endif %}\n\n)\n\nselect * from project_join", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.string_agg"], "nodes": ["model.jira_source.stg_jira__project", "model.jira.int_jira__project_metrics", "model.jira_source.stg_jira__user", "model.jira.jira__issue_enhanced", "model.jira_source.stg_jira__component"]}, "config": {"enabled": true, "alias": null, "schema": "jira", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira", "fqn": ["jira", "jira__project_enhanced"], "unique_id": "model.jira.jira__project_enhanced", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "jira__project_enhanced.sql", "original_file_path": "models/jira__project_enhanced.sql", "name": "jira__project_enhanced", "alias": "jira__project_enhanced", "checksum": {"name": "sha256", "checksum": "214672c28dde6208559758526fd1c6881211d5668b061387a02b196173a461d0"}, "tags": [], "refs": [["stg_jira__project"], ["int_jira__project_metrics"], ["stg_jira__user"], ["jira__issue_enhanced"], ["stg_jira__component"]], "sources": [], "description": "Table of projects enriched with data about its lead, epics, components, and volume and velocity of worktime.\n", "columns": {"project_id": {"name": "project_id", "description": "Unique ID of the project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_description": {"name": "project_description", "description": "Description of the project, if given.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_key": {"name": "project_key", "description": "UI-facing ID of the project. This becomes the default prefix for tasks created within this project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_lead_user_id": {"name": "project_lead_user_id", "description": "Foreign key referencing the ID of the `user` who leads this project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "Title of the project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "permission_scheme_id": {"name": "permission_scheme_id", "description": "Foreign key referencing the ID of the `permission_scheme` that the project ascribes to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_category_id": {"name": "project_category_id", "description": "Foreign key referencing the ID of the `project_category` that the project is associated with, if any.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_lead_user_name": {"name": "project_lead_user_name", "description": "User display name of the person leading this project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_lead_email": {"name": "project_lead_email", "description": "Email associated with the project lead.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "epics": {"name": "epics", "description": "Comma-separated list of epics worked on in this project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "components": {"name": "components", "description": "Comma-separated list of components of this project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_closed_issues": {"name": "count_closed_issues", "description": "The number of issues closed in this project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_open_issues": {"name": "count_open_issues", "description": "The number of currently un-resolved issues in the project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_open_assigned_issues": {"name": "count_open_assigned_issues", "description": "The number of currently open and currently assigned issues in the project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_close_time_seconds": {"name": "avg_close_time_seconds", "description": "The average time taken to close issues, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_assigned_close_time_seconds": {"name": "avg_assigned_close_time_seconds", "description": "The average time taken to close issues from their first assignment, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_age_currently_open_seconds": {"name": "avg_age_currently_open_seconds", "description": "The average age of any currently-open issues.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_age_currently_open_assigned_seconds": {"name": "avg_age_currently_open_assigned_seconds", "description": "The average age of any currently-open issues, from their first assignment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "median_close_time_seconds": {"name": "median_close_time_seconds", "description": "The median time taken to close issues, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "median_age_currently_open_seconds": {"name": "median_age_currently_open_seconds", "description": "The median age of any currently-open issues.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "median_assigned_close_time_seconds": {"name": "median_assigned_close_time_seconds", "description": "The median time taken to close issues from their first assignment, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "median_age_currently_open_assigned_seconds": {"name": "median_age_currently_open_assigned_seconds", "description": "The median age of any currently-open issues, from their first assignment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_close_time_days": {"name": "avg_close_time_days", "description": "The average time taken to close issues, in days.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_assigned_close_time_days": {"name": "avg_assigned_close_time_days", "description": "The average time taken to close issues from their first assignment, in days.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_age_currently_open_days": {"name": "avg_age_currently_open_days", "description": "The average age of any currently-open issues.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_age_currently_open_assigned_days": {"name": "avg_age_currently_open_assigned_days", "description": "The average age of any currently-open issues, from their first assignment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "median_close_time_days": {"name": "median_close_time_days", "description": "The median time taken to close issues, in days.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "median_age_currently_open_days": {"name": "median_age_currently_open_days", "description": "The median age of any currently-open issues.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "median_assigned_close_time_days": {"name": "median_assigned_close_time_days", "description": "The median time taken to close issues from their first assignment, in days.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "median_age_currently_open_assigned_days": {"name": "median_age_currently_open_assigned_days", "description": "The median age of any currently-open issues, from their first assignment.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira://models/jira.yml", "compiled_path": "target/compiled/jira/models/jira__project_enhanced.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira"}, "created_at": 1663707929.119802, "compiled_sql": "with  __dbt__cte__int_jira__project_metrics as (\nwith issue as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira\".\"jira__issue_enhanced\"\n    where project_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        project_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n ), 0) as median_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_seconds,\n\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n ), 0) as median_assigned_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_assigned_seconds\n\n    from issue\n\n     group by project_id \n),\n\n-- grouping because the medians were calculated using window functions (except in postgres)\nmedian_metrics as (\n\n    select \n        project_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds,\n        median_assigned_close_time_seconds,\n        median_age_currently_open_assigned_seconds\n\n    from calculate_medians\n    group by 1,2,3,4,5\n),\n\n\n-- get appropriate counts + sums to calculate averages\nproject_issues as (\n    select\n        project_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        -- using the below to calculate averages\n\n        -- assigned issues\n        sum(case when resolved_at is null and assignee_user_id is not null then 1 else 0 end) as count_open_assigned_issues,\n        sum(case when resolved_at is not null and assignee_user_id is not null then 1 else 0 end) as count_closed_assigned_issues,\n\n        -- close time \n        sum(case when resolved_at is not null then open_duration_seconds else 0 end) as sum_close_time_seconds,\n        sum(case when resolved_at is not null then any_assignment_duration_seconds else 0 end) as sum_assigned_close_time_seconds,\n\n        -- age of currently open tasks\n        sum(case when resolved_at is null then open_duration_seconds else 0 end) as sum_currently_open_duration_seconds,\n        sum(case when resolved_at is null then any_assignment_duration_seconds else 0 end) as sum_currently_open_assigned_duration_seconds\n\n    from issue\n\n    group by 1\n),\n\ncalculate_avg_metrics as (\n\n    select\n        project_id,\n        count_closed_issues,\n        count_open_issues,\n        count_open_assigned_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues  as \n    numeric(28, 6)\n ), 0) end as avg_close_time_seconds,\n\n        case when count_closed_assigned_issues = 0 then 0 else\n        round( cast(sum_assigned_close_time_seconds * 1.0 / count_closed_assigned_issues  as \n    numeric(28, 6)\n ), 0) end as avg_assigned_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_currently_open_duration_seconds * 1.0 / count_open_issues as \n    numeric(28, 6)\n ), 0) end as avg_age_currently_open_seconds,\n\n        case when count_open_assigned_issues = 0 then 0 else\n        round( cast(sum_currently_open_assigned_duration_seconds * 1.0 / count_open_assigned_issues as \n    numeric(28, 6)\n ), 0) end as avg_age_currently_open_assigned_seconds\n\n    from project_issues\n),\n\n-- join medians and averages + convert to days\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n\n        -- there are 86400 seconds in a day\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_assigned_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_assigned_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_age_currently_open_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_assigned_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_age_currently_open_assigned_days,\n\n        median_metrics.median_close_time_seconds, \n        median_metrics.median_age_currently_open_seconds,\n        median_metrics.median_assigned_close_time_seconds,\n        median_metrics.median_age_currently_open_assigned_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_days,\n        round( cast(median_metrics.median_assigned_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_assigned_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_assigned_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_assigned_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(project_id)\n)\n\nselect * from join_metrics\n),project as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__project\"\n),\n\nproject_metrics as (\n\n    select * \n    from __dbt__cte__int_jira__project_metrics\n),\n\n-- user is reserved in AWS\njira_user as (\n-- to grab the project lead\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__user\"\n),\n\nagg_epics as (\n\n    select \n        project_id,\n        \n    string_agg(issue_name, ', ')\n\n as epics\n\n    from \"postgres\".\"jira_integration_tests_jira\".\"jira__issue_enhanced\"\n    where lower(issue_type) = 'epic'\n    -- should we limit to active epics?\n    group by 1\n\n),\n\n\n\nagg_components as (\n    -- i'm just aggregating the components here, but perhaps pivoting out components (and epics) \n    -- into columns where the values are the number of issues completed and/or open would be more valuable\n    select \n        project_id,\n        \n    string_agg(component_name, ', ')\n\n as components\n\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__component\"\n\n    group by 1\n),\n\n\n\nproject_join as (\n\n    select\n        project.*,\n        jira_user.user_display_name as project_lead_user_name,\n        jira_user.email as project_lead_email,\n        agg_epics.epics,\n        \n        \n        agg_components.components,\n        \n\n        coalesce(project_metrics.count_closed_issues, 0) as count_closed_issues,\n        coalesce(project_metrics.count_open_issues, 0) as count_open_issues,\n        coalesce(project_metrics.count_open_assigned_issues, 0) as count_open_assigned_issues,\n\n        -- days\n        project_metrics.avg_close_time_days,\n        project_metrics.avg_assigned_close_time_days,\n\n        project_metrics.avg_age_currently_open_days,\n        project_metrics.avg_age_currently_open_assigned_days,\n\n        project_metrics.median_close_time_days, \n        project_metrics.median_age_currently_open_days,\n        project_metrics.median_assigned_close_time_days,\n        project_metrics.median_age_currently_open_assigned_days,\n\n        -- seconds\n        project_metrics.avg_close_time_seconds,\n        project_metrics.avg_assigned_close_time_seconds,\n\n        project_metrics.avg_age_currently_open_seconds,\n        project_metrics.avg_age_currently_open_assigned_seconds,\n\n        project_metrics.median_close_time_seconds, \n        project_metrics.median_age_currently_open_seconds,\n        project_metrics.median_assigned_close_time_seconds,\n        project_metrics.median_age_currently_open_assigned_seconds\n\n    from project\n    left join project_metrics on project.project_id = project_metrics.project_id\n    left join jira_user on project.project_lead_user_id = jira_user.user_id\n    left join agg_epics on project.project_id = agg_epics.project_id \n    \n    \n    left join agg_components on project.project_id = agg_components.project_id \n    \n\n)\n\nselect * from project_join", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.jira.int_jira__project_metrics", "sql": " __dbt__cte__int_jira__project_metrics as (\nwith issue as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira\".\"jira__issue_enhanced\"\n    where project_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        project_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n ), 0) as median_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_seconds,\n\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n ), 0) as median_assigned_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_assigned_seconds\n\n    from issue\n\n     group by project_id \n),\n\n-- grouping because the medians were calculated using window functions (except in postgres)\nmedian_metrics as (\n\n    select \n        project_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds,\n        median_assigned_close_time_seconds,\n        median_age_currently_open_assigned_seconds\n\n    from calculate_medians\n    group by 1,2,3,4,5\n),\n\n\n-- get appropriate counts + sums to calculate averages\nproject_issues as (\n    select\n        project_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        -- using the below to calculate averages\n\n        -- assigned issues\n        sum(case when resolved_at is null and assignee_user_id is not null then 1 else 0 end) as count_open_assigned_issues,\n        sum(case when resolved_at is not null and assignee_user_id is not null then 1 else 0 end) as count_closed_assigned_issues,\n\n        -- close time \n        sum(case when resolved_at is not null then open_duration_seconds else 0 end) as sum_close_time_seconds,\n        sum(case when resolved_at is not null then any_assignment_duration_seconds else 0 end) as sum_assigned_close_time_seconds,\n\n        -- age of currently open tasks\n        sum(case when resolved_at is null then open_duration_seconds else 0 end) as sum_currently_open_duration_seconds,\n        sum(case when resolved_at is null then any_assignment_duration_seconds else 0 end) as sum_currently_open_assigned_duration_seconds\n\n    from issue\n\n    group by 1\n),\n\ncalculate_avg_metrics as (\n\n    select\n        project_id,\n        count_closed_issues,\n        count_open_issues,\n        count_open_assigned_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues  as \n    numeric(28, 6)\n ), 0) end as avg_close_time_seconds,\n\n        case when count_closed_assigned_issues = 0 then 0 else\n        round( cast(sum_assigned_close_time_seconds * 1.0 / count_closed_assigned_issues  as \n    numeric(28, 6)\n ), 0) end as avg_assigned_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_currently_open_duration_seconds * 1.0 / count_open_issues as \n    numeric(28, 6)\n ), 0) end as avg_age_currently_open_seconds,\n\n        case when count_open_assigned_issues = 0 then 0 else\n        round( cast(sum_currently_open_assigned_duration_seconds * 1.0 / count_open_assigned_issues as \n    numeric(28, 6)\n ), 0) end as avg_age_currently_open_assigned_seconds\n\n    from project_issues\n),\n\n-- join medians and averages + convert to days\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n\n        -- there are 86400 seconds in a day\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_assigned_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_assigned_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_age_currently_open_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_assigned_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_age_currently_open_assigned_days,\n\n        median_metrics.median_close_time_seconds, \n        median_metrics.median_age_currently_open_seconds,\n        median_metrics.median_assigned_close_time_seconds,\n        median_metrics.median_age_currently_open_assigned_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_days,\n        round( cast(median_metrics.median_assigned_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_assigned_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_assigned_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_assigned_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(project_id)\n)\n\nselect * from join_metrics\n)"}], "relation_name": "\"postgres\".\"jira_integration_tests_jira\".\"jira__project_enhanced\""}, "model.jira.int_jira__issue_type_parents": {"raw_sql": "{{\n    config(\n        materialized='table'\n    )\n}}\n-- needs to be a view to use the dbt_utils.star macro in int_jira__issue_users\n\nwith issue as (\n\n    select * \n    from {{ var('issue') }}\n    \n),\n\nissue_type as (\n\n    select *\n    from {{ var('issue_type') }}\n), \n-- issue-epic relationships are either captured via the issue's parent_issue_id (next-gen projects)\n-- or through the 'Epic Link' field (classic projects)\n\nissues_w_epics as (\n\n  select * \n  from {{ ref('int_jira__issue_epic')}}\n\n), \n\nissue_enriched_with_epics as (\n\n  select\n  \n    issue.*,\n    coalesce(parent_issue_id, epic_issue_id) as revised_parent_issue_id\n  \n  from issue\n  \n  left join issues_w_epics on issues_w_epics.issue_id = issue.issue_id\n\n), \n\nissue_w_types as (\n\n    select \n\n        issue_enriched_with_epics.*,\n        issue_type.issue_type_name as issue_type\n        \n    from issue_enriched_with_epics \n    \n    left join issue_type on issue_type.issue_type_id = issue_enriched_with_epics.issue_type_id\n),\n\nadd_parent_info as (\n\n    select\n        issue_w_types.*,\n        parent.issue_type as parent_issue_type,\n        parent.issue_name as parent_issue_name,\n        parent.issue_key as parent_issue_key,\n        lower(coalesce(parent.issue_type, '')) = 'epic' as is_parent_epic\n\n    from\n    issue_w_types\n\n    -- do a left join so we can grab all issue types from this table in `issue_join`\n    left join issue_w_types as parent on issue_w_types.revised_parent_issue_id = parent.issue_id\n\n)\n\nselect * \nfrom add_parent_info", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.jira_source.stg_jira__issue", "model.jira_source.stg_jira__issue_type", "model.jira.int_jira__issue_epic"]}, "config": {"enabled": true, "alias": null, "schema": "int_jira", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_int_jira", "fqn": ["jira", "intermediate", "int_jira__issue_type_parents"], "unique_id": "model.jira.int_jira__issue_type_parents", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "intermediate/int_jira__issue_type_parents.sql", "original_file_path": "models/intermediate/int_jira__issue_type_parents.sql", "name": "int_jira__issue_type_parents", "alias": "int_jira__issue_type_parents", "checksum": {"name": "sha256", "checksum": "133bbab4e576ac2c0703aaa6b78743fb36bdc0cefbf1f3ecb1ee2c2a91c81cbf"}, "tags": [], "refs": [["stg_jira__issue"], ["stg_jira__issue_type"], ["int_jira__issue_epic"]], "sources": [], "description": "Table relating issues with data regarding their parent issues (which may be epics). Contains all columns present in `stg_jira__issue`.\n", "columns": {"issue_id": {"name": "issue_id", "description": "Unique ID of the issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_issue_id": {"name": "parent_issue_id", "description": "Unique ID of the parent issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "revised_parent_issue_id": {"name": "revised_parent_issue_id", "description": "Unique ID of the parent issue, coalesced with the ID of any linked epics (in classic projects).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_type": {"name": "issue_type", "description": "Name of the issue type (ie Epic, Task, Subtask, any custom types).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_name": {"name": "issue_name", "description": "Title of the issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_key": {"name": "issue_key", "description": "UI-facing id of the issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_issue_type": {"name": "parent_issue_type", "description": "Name of the parent issue type (ie Epic, Task, Subtask, any custom types).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_issue_name": {"name": "parent_issue_name", "description": "Title of the parent issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_issue_key": {"name": "parent_issue_key", "description": "UI-facing id of the parent issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_parent_epic": {"name": "is_parent_epic", "description": "Boolean that is true if the parent is an epic.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assignee_user_id": {"name": "assignee_user_id", "description": "Foreign key referencing the ID of the `user` currently assigned to this task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the issue was created (in UTC).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creator_user_id": {"name": "creator_user_id", "description": "Foreign key referencing the `user` who first created the issue. Cannot be changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_description": {"name": "issue_description", "description": "The issue description, if given.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "Calendar day on which the issue is due, if a due date is provided.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "environment": {"name": "environment", "description": "Text field describing the environment in which the issue occurred (ie \"IE9 on Windows 7\").", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_type_id": {"name": "issue_type_id", "description": "Foreign key referencing the ID of the `issue_type`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_estimate_seconds": {"name": "original_estimate_seconds", "description": "The original estimate of how long working on this issue would take, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "priority_id": {"name": "priority_id", "description": "Foreign key referencing the ID of the issue's current `priority`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_id": {"name": "project_id", "description": "Foreign key referencing the ID of the `project` that the issue belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "remaining_estimate_seconds": {"name": "remaining_estimate_seconds", "description": "The estimate of how much longer working on this issue will take, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reporter_user_id": {"name": "reporter_user_id", "description": "Foreign key referencing the ID of the `user` who reported the issue. This differs from the `creator` column  in that the reporter can be changed in-app.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "resolution_id": {"name": "resolution_id", "description": "Foreign key referencing the ID of the issue's type of `resolution`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "resolved_at": {"name": "resolved_at", "description": "Timestamp of when the issue was resolved (ie completed, marked as duplicate). If an issue is un-resolved, this will be null.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status_id": {"name": "status_id", "description": "Foreign key referencing the ID of the issue's `status` (the step that the issue is currently at  in the project's workflow).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status_changed_at": {"name": "status_changed_at", "description": "Timestamp of when the status was last changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_spent_seconds": {"name": "time_spent_seconds", "description": "The time that was spent working on this issue, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the issue was last updated in some way.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "work_ratio": {"name": "work_ratio", "description": "The percentage of work that has been logged against the issue (time_spent) vs the original estimate of worktime. Equals -1.0 when the fields required for calculation are not provided.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira://models/intermediate/int_jira.yml", "compiled_path": "target/compiled/jira/models/intermediate/int_jira__issue_type_parents.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "int_jira"}, "created_at": 1663707929.153866, "compiled_sql": "\n-- needs to be a view to use the dbt_utils.star macro in int_jira__issue_users\n\nwith  __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    fields.field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_epic as (\n-- issue-epic relationships are either captured via the issue's parent_issue_id (next-gen projects)\n-- or through the 'Epic Link' field (classic projects)\nwith epic_field_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_field_history\n    where lower(field_name) like 'epic%link'\n    \n),\n\norder_epic_links as (\n\n    select\n        issue_id,\n        cast(field_value as \n    int\n ) as epic_issue_id,\n\n        row_number() over (\n                partition by issue_id order by updated_at desc\n                ) as row_num\n\n    from epic_field_history\n),\n\nlast_epic_link as (\n\n    select \n      issue_id, \n      epic_issue_id \n    \n    from order_epic_links\n    where row_num = 1\n)\n\nselect *\nfrom last_epic_link\n),issue as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue\"\n    \n),\n\nissue_type as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_type\"\n), \n-- issue-epic relationships are either captured via the issue's parent_issue_id (next-gen projects)\n-- or through the 'Epic Link' field (classic projects)\n\nissues_w_epics as (\n\n  select * \n  from __dbt__cte__int_jira__issue_epic\n\n), \n\nissue_enriched_with_epics as (\n\n  select\n  \n    issue.*,\n    coalesce(parent_issue_id, epic_issue_id) as revised_parent_issue_id\n  \n  from issue\n  \n  left join issues_w_epics on issues_w_epics.issue_id = issue.issue_id\n\n), \n\nissue_w_types as (\n\n    select \n\n        issue_enriched_with_epics.*,\n        issue_type.issue_type_name as issue_type\n        \n    from issue_enriched_with_epics \n    \n    left join issue_type on issue_type.issue_type_id = issue_enriched_with_epics.issue_type_id\n),\n\nadd_parent_info as (\n\n    select\n        issue_w_types.*,\n        parent.issue_type as parent_issue_type,\n        parent.issue_name as parent_issue_name,\n        parent.issue_key as parent_issue_key,\n        lower(coalesce(parent.issue_type, '')) = 'epic' as is_parent_epic\n\n    from\n    issue_w_types\n\n    -- do a left join so we can grab all issue types from this table in `issue_join`\n    left join issue_w_types as parent on issue_w_types.revised_parent_issue_id = parent.issue_id\n\n)\n\nselect * \nfrom add_parent_info", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.jira.int_jira__issue_field_history", "sql": " __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    fields.field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n)"}, {"id": "model.jira.int_jira__issue_epic", "sql": " __dbt__cte__int_jira__issue_epic as (\n-- issue-epic relationships are either captured via the issue's parent_issue_id (next-gen projects)\n-- or through the 'Epic Link' field (classic projects)\nwith epic_field_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_field_history\n    where lower(field_name) like 'epic%link'\n    \n),\n\norder_epic_links as (\n\n    select\n        issue_id,\n        cast(field_value as \n    int\n ) as epic_issue_id,\n\n        row_number() over (\n                partition by issue_id order by updated_at desc\n                ) as row_num\n\n    from epic_field_history\n),\n\nlast_epic_link as (\n\n    select \n      issue_id, \n      epic_issue_id \n    \n    from order_epic_links\n    where row_num = 1\n)\n\nselect *\nfrom last_epic_link\n)"}], "relation_name": "\"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__issue_type_parents\""}, "model.jira.int_jira__issue_epic": {"raw_sql": "-- issue-epic relationships are either captured via the issue's parent_issue_id (next-gen projects)\n-- or through the 'Epic Link' field (classic projects)\nwith epic_field_history as (\n\n    select *\n    from {{ ref('int_jira__issue_field_history') }}\n    where lower(field_name) like 'epic%link'\n    \n),\n\norder_epic_links as (\n\n    select\n        issue_id,\n        cast(field_value as {{ dbt_utils.type_int() }} ) as epic_issue_id,\n\n        row_number() over (\n                partition by issue_id order by updated_at desc\n                ) as row_num\n\n    from epic_field_history\n),\n\nlast_epic_link as (\n\n    select \n      issue_id, \n      epic_issue_id \n    \n    from order_epic_links\n    where row_num = 1\n)\n\nselect *\nfrom last_epic_link", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.type_int"], "nodes": ["model.jira.int_jira__issue_field_history"]}, "config": {"enabled": true, "alias": null, "schema": "int_jira", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_int_jira", "fqn": ["jira", "intermediate", "int_jira__issue_epic"], "unique_id": "model.jira.int_jira__issue_epic", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "intermediate/int_jira__issue_epic.sql", "original_file_path": "models/intermediate/int_jira__issue_epic.sql", "name": "int_jira__issue_epic", "alias": "int_jira__issue_epic", "checksum": {"name": "sha256", "checksum": "1688724dd08d407ed71e356cfb7b6e02f65fd640df14f529c0778116e277e654"}, "tags": [], "refs": [["int_jira__issue_field_history"]], "sources": [], "description": "Table associating **classic-project** issues with the epics they are linked to. This is necessary  because issue-epic relationships are represented differently in next-gen vs classic projects.  In next-gen projects, epics are stored as an issue's parent issue, whereas in classic projects epics are  captured in the 'epic link' field in `issue_field_history`. Next-gen issues will not appear in this table.\n", "columns": {"issue_id": {"name": "issue_id", "description": "Unique ID of the issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "epic_issue_id": {"name": "epic_issue_id", "description": "Unique ID of the epic associated with this issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira://models/intermediate/int_jira.yml", "compiled_path": "target/compiled/jira/models/intermediate/int_jira__issue_epic.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "schema": "int_jira"}, "created_at": 1663707929.148248, "compiled_sql": "-- issue-epic relationships are either captured via the issue's parent_issue_id (next-gen projects)\n-- or through the 'Epic Link' field (classic projects)\nwith  __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    fields.field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),epic_field_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_field_history\n    where lower(field_name) like 'epic%link'\n    \n),\n\norder_epic_links as (\n\n    select\n        issue_id,\n        cast(field_value as \n    int\n ) as epic_issue_id,\n\n        row_number() over (\n                partition by issue_id order by updated_at desc\n                ) as row_num\n\n    from epic_field_history\n),\n\nlast_epic_link as (\n\n    select \n      issue_id, \n      epic_issue_id \n    \n    from order_epic_links\n    where row_num = 1\n)\n\nselect *\nfrom last_epic_link", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.jira.int_jira__issue_field_history", "sql": " __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    fields.field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n)"}], "relation_name": null}, "model.jira.int_jira__user_metrics": {"raw_sql": "with issue as (\n\n    select *\n    from {{ ref('jira__issue_enhanced') }} \n    where assignee_user_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        assignee_user_id as user_id,\n        round( cast( {{ fivetran_utils.percentile(percentile_field='case when resolved_at is not null then last_assignment_duration_seconds end', \n                    partition_field='assignee_user_id', percent='0.5') }} as {{ dbt_utils.type_numeric() }}), 0) as median_close_time_seconds,\n        round( cast( {{ fivetran_utils.percentile(percentile_field='case when resolved_at is null then last_assignment_duration_seconds end', \n                    partition_field='assignee_user_id', percent='0.5') }} as {{ dbt_utils.type_numeric() }}), 0) as median_age_currently_open_seconds\n\n    from issue\n\n    {% if target.type == 'postgres' %} group by 1 {% endif %}\n),\n\n-- grouping because the medians were calculated using window functions (except postgres)\nmedian_metrics as (\n\n    select \n        user_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds\n\n    from calculate_medians\n    group by 1,2,3\n),\n\n\nuser_issues as (\n\n    select\n        assignee_user_id as user_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        sum(case when resolved_at is not null then last_assignment_duration_seconds end) as sum_current_open_seconds,\n        sum(case when resolved_at is null then last_assignment_duration_seconds end) as sum_close_time_seconds\n\n    from issue\n\n    group by 1\n\n),\n\ncalculate_avg_metrics as (\n\n    select \n        user_id,\n        count_closed_issues,\n        count_open_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues as {{ dbt_utils.type_numeric() }} ), 0) end as avg_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_current_open_seconds * 1.0 / count_open_issues as {{ dbt_utils.type_numeric() }} ), 0) end as avg_age_currently_open_seconds\n\n    from user_issues\n),\n\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as {{ dbt_utils.type_numeric() }} ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as {{ dbt_utils.type_numeric() }} ), 0) as avg_age_currently_open_days,\n\n        median_metrics.median_close_time_seconds,\n        median_metrics.median_age_currently_open_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as {{ dbt_utils.type_numeric() }} ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as {{ dbt_utils.type_numeric() }} ), 0) as median_age_currently_open_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(user_id)\n)\n\nselect * from join_metrics", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.percentile", "macro.dbt_utils.type_numeric"], "nodes": ["model.jira.jira__issue_enhanced"]}, "config": {"enabled": true, "alias": null, "schema": "int_jira", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_int_jira", "fqn": ["jira", "intermediate", "int_jira__user_metrics"], "unique_id": "model.jira.int_jira__user_metrics", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "intermediate/int_jira__user_metrics.sql", "original_file_path": "models/intermediate/int_jira__user_metrics.sql", "name": "int_jira__user_metrics", "alias": "int_jira__user_metrics", "checksum": {"name": "sha256", "checksum": "770e6e19508d7f2b0f80405628be986b0fe1f337b2c7b1f2fe52de60b46d2d31"}, "tags": [], "refs": [["jira__issue_enhanced"]], "sources": [], "description": "Table calculating issue-related metrics per user.", "columns": {"user_id": {"name": "user_id", "description": "Unique ID of the user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_closed_issues": {"name": "count_closed_issues", "description": "The number of issues that the user has closed (while being assigned to).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_open_issues": {"name": "count_open_issues", "description": "The number of currently open issues that the user is assigned to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_close_time_seconds": {"name": "avg_close_time_seconds", "description": "The average time taken to close issues since assignment, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_age_currently_open_seconds": {"name": "avg_age_currently_open_seconds", "description": "The average age of a user's currently open issues.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "median_close_time_seconds": {"name": "median_close_time_seconds", "description": "The median time taken to close issues since assignment, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "median_age_currently_open_seconds": {"name": "median_age_currently_open_seconds", "description": "The median age of a user's currently open issues.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_close_time_days": {"name": "avg_close_time_days", "description": "The average time taken to close issues since assignment, in days.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_age_currently_open_days": {"name": "avg_age_currently_open_days", "description": "The average age of a user's currently open issues.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "median_close_time_days": {"name": "median_close_time_days", "description": "The median time taken to close issues since assignment, in days.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "median_age_currently_open_days": {"name": "median_age_currently_open_days", "description": "The median age of a user's currently open issues.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira://models/intermediate/int_jira.yml", "compiled_path": "target/compiled/jira/models/intermediate/int_jira__user_metrics.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "schema": "int_jira"}, "created_at": 1663707929.147139, "compiled_sql": "with issue as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira\".\"jira__issue_enhanced\" \n    where assignee_user_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        assignee_user_id as user_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n), 0) as median_close_time_seconds,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n), 0) as median_age_currently_open_seconds\n\n    from issue\n\n     group by 1 \n),\n\n-- grouping because the medians were calculated using window functions (except postgres)\nmedian_metrics as (\n\n    select \n        user_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds\n\n    from calculate_medians\n    group by 1,2,3\n),\n\n\nuser_issues as (\n\n    select\n        assignee_user_id as user_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        sum(case when resolved_at is not null then last_assignment_duration_seconds end) as sum_current_open_seconds,\n        sum(case when resolved_at is null then last_assignment_duration_seconds end) as sum_close_time_seconds\n\n    from issue\n\n    group by 1\n\n),\n\ncalculate_avg_metrics as (\n\n    select \n        user_id,\n        count_closed_issues,\n        count_open_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues as \n    numeric(28, 6)\n ), 0) end as avg_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_current_open_seconds * 1.0 / count_open_issues as \n    numeric(28, 6)\n ), 0) end as avg_age_currently_open_seconds\n\n    from user_issues\n),\n\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_age_currently_open_days,\n\n        median_metrics.median_close_time_seconds,\n        median_metrics.median_age_currently_open_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(user_id)\n)\n\nselect * from join_metrics", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.jira.int_jira__issue_join": {"raw_sql": "{{\n    config(\n        materialized = 'table'\n    )\n}}\n\nwith issue as (\n\n    select *\n    from {{ ref('int_jira__issue_users') }}\n\n),\n\nproject as (\n\n    select * \n    from {{ var('project') }}\n),\n\nstatus as (\n\n    select * \n    from {{ var('status') }}\n),\n\nstatus_category as (\n\n    select * \n    from {{ var('status_category') }}\n),\n\nresolution as (\n\n    select * \n    from {{ var('resolution') }}\n),\n\n{% if var('jira_using_priorities', True) %}\npriority as (\n\n    select * \n    from {{ var('priority') }}\n),\n{% endif %}\n\n{% if var('jira_using_sprints', True) %}\nissue_sprint as (\n\n    select *\n    from {{ ref('int_jira__issue_sprint') }}\n),\n{% endif %}\n\n{% if var('jira_include_comments', True) %}\nissue_comments as (\n\n    select * \n    from {{ ref('int_jira__issue_comments') }}\n),\n{% endif %}\n\nissue_assignments_and_resolutions as (\n  \n  select *\n  from {{ ref('int_jira__issue_assign_resolution')}}\n\n),\n\n{% if var('jira_using_versions', True) %}\nissue_versions as (\n\n    select *\n    from {{ ref('int_jira__issue_versions') }}\n),\n{% endif %}\n\njoin_issue as (\n\n    select\n        issue.* \n\n        ,project.project_name as project_name\n\n        ,status.status_name as current_status\n        ,status_category.status_category_name as current_status_category   \n        ,resolution.resolution_name as resolution_type\n        {% if var('jira_using_priorities', True) %}\n        ,priority.priority_name as current_priority\n\t{% endif %}\n\n        {% if var('jira_using_sprints', True) %}\n        ,issue_sprint.sprint_id\n        ,issue_sprint.sprint_name\n        ,coalesce(issue_sprint.count_sprint_changes, 0) as count_sprint_changes\n        ,issue_sprint.sprint_started_at\n        ,issue_sprint.sprint_ended_at\n        ,issue_sprint.sprint_completed_at\n        ,coalesce(issue_sprint.sprint_started_at <= {{ dbt_utils.current_timestamp() }}\n          and coalesce(issue_sprint.sprint_completed_at, {{ dbt_utils.current_timestamp() }}) >= {{ dbt_utils.current_timestamp() }}  \n          , false) as is_active_sprint -- If sprint doesn't have a start date, default to false. If it does have a start date, but no completed date, this means that the sprint is active. The ended_at timestamp is irrelevant here.\n        {% endif %}\n\n        ,issue_assignments_and_resolutions.first_assigned_at\n        ,issue_assignments_and_resolutions.last_assigned_at\n        ,issue_assignments_and_resolutions.first_resolved_at\n\n        {% if var('jira_using_versions', True) %}\n        ,issue_versions.fixes_versions\n        ,issue_versions.affects_versions\n        {% endif %}\n\n        {% if var('jira_include_comments', True) %}\n        ,issue_comments.conversation\n        ,coalesce(issue_comments.count_comments, 0) as count_comments\n        {% endif %}\n    \n    from issue\n    left join project on project.project_id = issue.project_id\n    left join status on status.status_id = issue.status_id\n    left join status_category on status.status_category_id = status_category.status_category_id\n    left join resolution on resolution.resolution_id = issue.resolution_id\n\t{% if var('jira_using_priorities', True) %}\n    left join priority on priority.priority_id = issue.priority_id\n\t{% endif %}\n    left join issue_assignments_and_resolutions on issue_assignments_and_resolutions.issue_id = issue.issue_id\n\n    {% if var('jira_using_versions', True) %}\n    left join issue_versions on issue_versions.issue_id = issue.issue_id\n    {% endif %}\n    \n    {% if var('jira_using_sprints', True) %}\n    left join issue_sprint on issue_sprint.issue_id = issue.issue_id\n    {% endif %}\n\n    {% if var('jira_include_comments', True) %}\n    left join issue_comments on issue_comments.issue_id = issue.issue_id\n    {% endif %}\n)\n\nselect * \nfrom join_issue", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"], "nodes": ["model.jira.int_jira__issue_users", "model.jira_source.stg_jira__project", "model.jira_source.stg_jira__status", "model.jira_source.stg_jira__status_category", "model.jira_source.stg_jira__resolution", "model.jira_source.stg_jira__priority", "model.jira.int_jira__issue_sprint", "model.jira.int_jira__issue_comments", "model.jira.int_jira__issue_assign_resolution", "model.jira.int_jira__issue_versions"]}, "config": {"enabled": true, "alias": null, "schema": "int_jira", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_int_jira", "fqn": ["jira", "intermediate", "int_jira__issue_join"], "unique_id": "model.jira.int_jira__issue_join", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "intermediate/int_jira__issue_join.sql", "original_file_path": "models/intermediate/int_jira__issue_join.sql", "name": "int_jira__issue_join", "alias": "int_jira__issue_join", "checksum": {"name": "sha256", "checksum": "1a4c91f06aa2c89853299ed753fa6fc6d78097c8e6ca8809ec8d74b433ec6a2a"}, "tags": [], "refs": [["int_jira__issue_users"], ["stg_jira__project"], ["stg_jira__status"], ["stg_jira__status_category"], ["stg_jira__resolution"], ["stg_jira__priority"], ["int_jira__issue_sprint"], ["int_jira__issue_comments"], ["int_jira__issue_assign_resolution"], ["int_jira__issue_versions"]], "sources": [], "description": "The core issue table, enhanced with current-status attributes from foreign-key-related tables, and metrics regarding resolutions and assignments.\n", "columns": {"issue_id": {"name": "issue_id", "description": "Unique ID of the issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_name": {"name": "issue_name", "description": "Title of the issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the issue was last updated in some way.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_type": {"name": "issue_type", "description": "Name of the issue type (ie Epic, Task, Subtask, any custom types).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_type_id": {"name": "issue_type_id", "description": "Foreign key referencing the ID of the `issue_type`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the issue was created (in UTC).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_description": {"name": "issue_description", "description": "The issue description, if given.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "Calendar day on which the issue is due, if a due date is provided.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "environment": {"name": "environment", "description": "Text field describing the environment in which the issue occurred (ie \"IE9 on Windows 7\").", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assignee_user_id": {"name": "assignee_user_id", "description": "Foreign key referencing the ID of the `user` currently assigned to this task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assignee_name": {"name": "assignee_name", "description": "User display name of the person currently assigned this issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reporter_user_id": {"name": "reporter_user_id", "description": "Foreign key referencing the ID of the `user` who reported the issue. This differs from the `issue.creator` column  in that the reporter can be changed in-app, though it is initialized as the creator.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reporter_name": {"name": "reporter_name", "description": "User display name of the person who reported the issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assignee_timezone": {"name": "assignee_timezone", "description": "Timezone of the user currently assigned this issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assignee_email": {"name": "assignee_email", "description": "Email associated with the user currently assigned this issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_key": {"name": "issue_key", "description": "UI-facing id of the issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_issue_id": {"name": "parent_issue_id", "description": "Self-referencing ID of the parent `issue`, which may be an epic.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_issue_name": {"name": "parent_issue_name", "description": "Title of the parent issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_issue_key": {"name": "parent_issue_key", "description": "Issue key of the sub-issue's parent.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_issue_type": {"name": "parent_issue_type", "description": "Name of the type of issue that the parent is.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_priority": {"name": "current_priority", "description": "Name of the issue's current priority as it appears in the UI.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "priority_id": {"name": "priority_id", "description": "Foreign key referencing the ID of the issue's current `priority`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_id": {"name": "project_id", "description": "Foreign key referencing the `project` that the issue belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "Title of the issue's project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "resolution_type": {"name": "resolution_type", "description": "Display name of the type of resolution that closed the issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "resolved_at": {"name": "resolved_at", "description": "Timestamp of when the issue was resolved (ie completed, marked as duplicate). If an issue is un-resolved, this will be null.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "resolution_id": {"name": "resolution_id", "description": "Foreign key referencing the ID of the issue's type of `resolution`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_status": {"name": "current_status", "description": "Title of the category of status.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status_id": {"name": "status_id", "description": "Foreign key referencing the ID of the issue's `status` (the step that the issue is currently at  in the project's workflow).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status_changed_at": {"name": "status_changed_at", "description": "Timestamp of when the status was last changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sprint_id": {"name": "sprint_id", "description": "Foreign key referencing the `sprint` that the issue is currently in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sprint_name": {"name": "sprint_name", "description": "Title of the issue's sprint.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_sprint_changes": {"name": "count_sprint_changes", "description": "The total number of sprints that the issue has belonged to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_active_sprint": {"name": "is_active_sprint", "description": "Yes, if the sprint started after the current time and if the sprint ends in the future.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sprint_completed_at": {"name": "sprint_completed_at", "description": "Timestamp of when the sprint was completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sprint_ended_at": {"name": "sprint_ended_at", "description": "Timestamp of when the sprint is planned to end.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sprint_started_at": {"name": "sprint_started_at", "description": "Timestamp of when the sprint began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_estimate_seconds": {"name": "original_estimate_seconds", "description": "The original estimate of how long working on this issue would take, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "remaining_estimate_seconds": {"name": "remaining_estimate_seconds", "description": "The estimate of how much longer working on this issue will take, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_spent_seconds": {"name": "time_spent_seconds", "description": "The time that was spent working on this issue, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "work_ratio": {"name": "work_ratio", "description": "The percentage of work that has been logged against the issue (time_spent) vs the original estimate of worktime. Equals -1.0 when the fields required for calculation are not provided.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversation": {"name": "conversation", "description": "Line-separated list of comments made on this issue, including the timestamp and author name of each comment.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_comments": {"name": "count_comments", "description": "The number of comments made on this issues.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_assigned_at": {"name": "first_assigned_at", "description": "Timestamp of when the issue was first assigned to a user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_assigned_at": {"name": "last_assigned_at", "description": "Timestamp of when the issue was last assigned to a user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_resolved_at": {"name": "first_resolved_at", "description": "Timestamp of when the issue was first resolved.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reporter_email": {"name": "reporter_email", "description": "Email associated with the user who reported this issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reporter_timezone": {"name": "reporter_timezone", "description": "Timezone of the user currently who reported this issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_parent_epic": {"name": "is_parent_epic", "description": "Boolean that is true if the parent is an epic.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creator_user_id": {"name": "creator_user_id", "description": "Foreign key referencing the `user` who first created the issue. Cannot be changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "affects_versions": {"name": "affects_versions", "description": "Comma-separated list of the names of project versions that this issue affects.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fixes_versions": {"name": "fixes_versions", "description": "Comma-separated list of the names of project versions that this issue fixes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_status_category": {"name": "current_status_category", "description": "Title of the umbrella status category that the issue is currently in.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira://models/intermediate/int_jira.yml", "compiled_path": "target/compiled/jira/models/intermediate/int_jira__issue_join.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "int_jira"}, "created_at": 1663707929.142143, "compiled_sql": "\n\nwith  __dbt__cte__int_jira__issue_users as (\n-- just grabs user attributes for issue assignees and reporters \n\nwith issue as (\n\n    -- including issue_id in here because snowflake for some reason ignores issue_id,\n    -- so we'll just always pull it out and explicitly select it\n    \n\n    select\n        issue_id,\n        coalesce(revised_parent_issue_id, parent_issue_id) as parent_issue_id,\n\n        \n\n    \"original_estimate_seconds\",\n  \"remaining_estimate_seconds\",\n  \"time_spent_seconds\",\n  \"assignee_user_id\",\n  \"created_at\",\n  \"resolved_at\",\n  \"creator_user_id\",\n  \"issue_description\",\n  \"due_date\",\n  \"environment\",\n  \"issue_type_id\",\n  \"issue_key\",\n  \"priority_id\",\n  \"project_id\",\n  \"reporter_user_id\",\n  \"resolution_id\",\n  \"status_id\",\n  \"status_changed_at\",\n  \"issue_name\",\n  \"updated_at\",\n  \"work_ratio\",\n  \"_fivetran_synced\",\n  \"issue_type\",\n  \"parent_issue_type\",\n  \"parent_issue_name\",\n  \"parent_issue_key\",\n  \"is_parent_epic\"\n\n\n    \n    from \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__issue_type_parents\"\n\n),\n\n-- user is a reserved keyword in AWS\njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__user\"\n),\n\nissue_user_join as (\n\n    select\n        issue.*,\n        assignee.user_display_name as assignee_name,\n        assignee.time_zone as assignee_timezone,\n        assignee.email as assignee_email,\n        reporter.email as reporter_email,\n        reporter.user_display_name as reporter_name,\n        reporter.time_zone as reporter_timezone\n        \n        \n    from issue\n    left join jira_user as assignee on issue.assignee_user_id = assignee.user_id \n    left join jira_user as reporter on issue.reporter_user_id = reporter.user_id\n\n)\n\nselect * \nfrom issue_user_join\n),  __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    fields.field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_sprint as (\n\n\nwith sprint as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__sprint\"\n\n),\n\nfield_history as (\n\n     -- sprints don't appear to be capable of multiselect in the UI...\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n),\n\n-- only grab history pertaining to sprints\nsprint_field_history as (\n\n    select \n        field_history.*,\n        row_number() over (\n                    partition by issue_id order by updated_at desc\n                    ) as row_num\n\n    from field_history\n    where lower(field_name) = 'sprint'\n\n),\n\nlast_sprint as (\n  \n    select *\n    from sprint_field_history\n    \n    where row_num = 1\n\n),\n\nsprint_rollovers as (\n\n    select \n        issue_id,\n        count(distinct case when field_value is not null then field_value end) as count_sprint_changes\n    \n    from sprint_field_history\n    group by 1\n\n),\n\nissue_sprint as (\n\n    select \n        last_sprint.issue_id,\n        last_sprint.field_value as sprint_id,\n        sprint.sprint_name,\n        sprint.board_id,\n        sprint.started_at as sprint_started_at,\n        sprint.ended_at as sprint_ended_at,\n        sprint.completed_at as sprint_completed_at,\n        coalesce(sprint_rollovers.count_sprint_changes, 0) as count_sprint_changes\n\n    from \n    last_sprint \n    join sprint on last_sprint.field_value = cast(sprint.sprint_id as \n    varchar\n)\n    left join sprint_rollovers on sprint_rollovers.issue_id = last_sprint.issue_id\n    \n)\n\nselect * from issue_sprint\n),  __dbt__cte__int_jira__issue_comments as (\n\n\nwith comment as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__comment\"\n\n    order by issue_id, created_at asc\n\n),\n\n-- user is a reserved keyword in AWS \njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__user\"\n),\n\nagg_comments as (\n\n    select \n    comment.issue_id,\n    \n    string_agg(comment.created_at || '  -  ' || jira_user.user_display_name || ':  ' || comment.body, '\\n')\n\n as conversation,\n    count(comment.comment_id) as count_comments\n\n    from\n    comment \n    join jira_user on comment.author_user_id = jira_user.user_id\n\n    group by 1\n)\n\nselect * from agg_comments\n),  __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    fields.field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_assign_resolution as (\nwith issue_field_history as (\n    \n    select *\n    from __dbt__cte__int_jira__issue_field_history\n\n), \n\nfiltered as (\n    -- we're only looking at assignments and resolutions, which are single-field values\n    select *\n    from issue_field_history\n\n    where (lower(field_id) = 'assignee'\n    or lower(field_id) = 'resolutiondate')\n\n    and field_value is not null -- remove initial null rows\n),\n\nissue_dates as (\n\n    select\n\n        issue_id,\n        min(case when field_id = 'assignee' then updated_at end) as first_assigned_at,\n        max(case when field_id = 'assignee' then updated_at end) as last_assigned_at,\n        min(case when field_id = 'resolutiondate' then updated_at end) as first_resolved_at -- in case it's been re-opened\n\n    from filtered\n    group by 1\n)\n\nselect *\nfrom issue_dates\n),  __dbt__cte__int_jira__issue_versions as (\n\n\nwith version as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__version\"\n),\n\nversion_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n    where field_id = 'versions'\n        or field_id = 'fixVersions'\n),\n\norder_versions as (\n\n    select\n        *,\n        -- using rank so batches stick together\n        rank() over (\n            partition by field_id, issue_id\n            order by updated_at desc\n            ) as row_num\n\n    from version_history\n),\n\nlatest_versions as (\n\n    select \n        field_id,\n        issue_id,\t\n        updated_at,\n        cast(field_value as \n    int\n) as version_id\n    from order_versions\n    where row_num = 1\n),\n\nversion_info as (\n\n    select \n        latest_versions.field_id,\n        latest_versions.issue_id,\n        \n    string_agg(version.version_name, ', ')\n\n as versions\n\n    from latest_versions\n    join version on latest_versions.version_id = version.version_id\n\n    group by 1,2\n),\n\nsplit_versions as (\n\n    select \n        issue_id,\n        case when field_id = 'versions' then versions else null end as affects_versions,\n        case when field_id = 'fixVersions' then versions else null end as fixes_versions\n    from version_info\n),\n\nfinal as (\n\n    select \n        issue_id,\n        max(affects_versions) as affects_versions,\n        max(fixes_versions) as fixes_versions\n    from split_versions\n    group by 1\n)\n\nselect *\nfrom final\n),issue as (\n\n    select *\n    from __dbt__cte__int_jira__issue_users\n\n),\n\nproject as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__project\"\n),\n\nstatus as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__status\"\n),\n\nstatus_category as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__status_category\"\n),\n\nresolution as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__resolution\"\n),\n\n\npriority as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__priority\"\n),\n\n\n\nissue_sprint as (\n\n    select *\n    from __dbt__cte__int_jira__issue_sprint\n),\n\n\n\nissue_comments as (\n\n    select * \n    from __dbt__cte__int_jira__issue_comments\n),\n\n\nissue_assignments_and_resolutions as (\n  \n  select *\n  from __dbt__cte__int_jira__issue_assign_resolution\n\n),\n\n\nissue_versions as (\n\n    select *\n    from __dbt__cte__int_jira__issue_versions\n),\n\n\njoin_issue as (\n\n    select\n        issue.* \n\n        ,project.project_name as project_name\n\n        ,status.status_name as current_status\n        ,status_category.status_category_name as current_status_category   \n        ,resolution.resolution_name as resolution_type\n        \n        ,priority.priority_name as current_priority\n\t\n\n        \n        ,issue_sprint.sprint_id\n        ,issue_sprint.sprint_name\n        ,coalesce(issue_sprint.count_sprint_changes, 0) as count_sprint_changes\n        ,issue_sprint.sprint_started_at\n        ,issue_sprint.sprint_ended_at\n        ,issue_sprint.sprint_completed_at\n        ,coalesce(issue_sprint.sprint_started_at <= \n    current_timestamp::\n    timestamp without time zone\n\n\n          and coalesce(issue_sprint.sprint_completed_at, \n    current_timestamp::\n    timestamp without time zone\n\n) >= \n    current_timestamp::\n    timestamp without time zone\n\n  \n          , false) as is_active_sprint -- If sprint doesn't have a start date, default to false. If it does have a start date, but no completed date, this means that the sprint is active. The ended_at timestamp is irrelevant here.\n        \n\n        ,issue_assignments_and_resolutions.first_assigned_at\n        ,issue_assignments_and_resolutions.last_assigned_at\n        ,issue_assignments_and_resolutions.first_resolved_at\n\n        \n        ,issue_versions.fixes_versions\n        ,issue_versions.affects_versions\n        \n\n        \n        ,issue_comments.conversation\n        ,coalesce(issue_comments.count_comments, 0) as count_comments\n        \n    \n    from issue\n    left join project on project.project_id = issue.project_id\n    left join status on status.status_id = issue.status_id\n    left join status_category on status.status_category_id = status_category.status_category_id\n    left join resolution on resolution.resolution_id = issue.resolution_id\n\t\n    left join priority on priority.priority_id = issue.priority_id\n\t\n    left join issue_assignments_and_resolutions on issue_assignments_and_resolutions.issue_id = issue.issue_id\n\n    \n    left join issue_versions on issue_versions.issue_id = issue.issue_id\n    \n    \n    \n    left join issue_sprint on issue_sprint.issue_id = issue.issue_id\n    \n\n    \n    left join issue_comments on issue_comments.issue_id = issue.issue_id\n    \n)\n\nselect * \nfrom join_issue", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.jira.int_jira__issue_users", "sql": " __dbt__cte__int_jira__issue_users as (\n-- just grabs user attributes for issue assignees and reporters \n\nwith issue as (\n\n    -- including issue_id in here because snowflake for some reason ignores issue_id,\n    -- so we'll just always pull it out and explicitly select it\n    \n\n    select\n        issue_id,\n        coalesce(revised_parent_issue_id, parent_issue_id) as parent_issue_id,\n\n        \n\n    \"original_estimate_seconds\",\n  \"remaining_estimate_seconds\",\n  \"time_spent_seconds\",\n  \"assignee_user_id\",\n  \"created_at\",\n  \"resolved_at\",\n  \"creator_user_id\",\n  \"issue_description\",\n  \"due_date\",\n  \"environment\",\n  \"issue_type_id\",\n  \"issue_key\",\n  \"priority_id\",\n  \"project_id\",\n  \"reporter_user_id\",\n  \"resolution_id\",\n  \"status_id\",\n  \"status_changed_at\",\n  \"issue_name\",\n  \"updated_at\",\n  \"work_ratio\",\n  \"_fivetran_synced\",\n  \"issue_type\",\n  \"parent_issue_type\",\n  \"parent_issue_name\",\n  \"parent_issue_key\",\n  \"is_parent_epic\"\n\n\n    \n    from \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__issue_type_parents\"\n\n),\n\n-- user is a reserved keyword in AWS\njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__user\"\n),\n\nissue_user_join as (\n\n    select\n        issue.*,\n        assignee.user_display_name as assignee_name,\n        assignee.time_zone as assignee_timezone,\n        assignee.email as assignee_email,\n        reporter.email as reporter_email,\n        reporter.user_display_name as reporter_name,\n        reporter.time_zone as reporter_timezone\n        \n        \n    from issue\n    left join jira_user as assignee on issue.assignee_user_id = assignee.user_id \n    left join jira_user as reporter on issue.reporter_user_id = reporter.user_id\n\n)\n\nselect * \nfrom issue_user_join\n)"}, {"id": "model.jira.int_jira__issue_multiselect_history", "sql": " __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    fields.field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n)"}, {"id": "model.jira.int_jira__issue_sprint", "sql": " __dbt__cte__int_jira__issue_sprint as (\n\n\nwith sprint as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__sprint\"\n\n),\n\nfield_history as (\n\n     -- sprints don't appear to be capable of multiselect in the UI...\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n),\n\n-- only grab history pertaining to sprints\nsprint_field_history as (\n\n    select \n        field_history.*,\n        row_number() over (\n                    partition by issue_id order by updated_at desc\n                    ) as row_num\n\n    from field_history\n    where lower(field_name) = 'sprint'\n\n),\n\nlast_sprint as (\n  \n    select *\n    from sprint_field_history\n    \n    where row_num = 1\n\n),\n\nsprint_rollovers as (\n\n    select \n        issue_id,\n        count(distinct case when field_value is not null then field_value end) as count_sprint_changes\n    \n    from sprint_field_history\n    group by 1\n\n),\n\nissue_sprint as (\n\n    select \n        last_sprint.issue_id,\n        last_sprint.field_value as sprint_id,\n        sprint.sprint_name,\n        sprint.board_id,\n        sprint.started_at as sprint_started_at,\n        sprint.ended_at as sprint_ended_at,\n        sprint.completed_at as sprint_completed_at,\n        coalesce(sprint_rollovers.count_sprint_changes, 0) as count_sprint_changes\n\n    from \n    last_sprint \n    join sprint on last_sprint.field_value = cast(sprint.sprint_id as \n    varchar\n)\n    left join sprint_rollovers on sprint_rollovers.issue_id = last_sprint.issue_id\n    \n)\n\nselect * from issue_sprint\n)"}, {"id": "model.jira.int_jira__issue_comments", "sql": " __dbt__cte__int_jira__issue_comments as (\n\n\nwith comment as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__comment\"\n\n    order by issue_id, created_at asc\n\n),\n\n-- user is a reserved keyword in AWS \njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__user\"\n),\n\nagg_comments as (\n\n    select \n    comment.issue_id,\n    \n    string_agg(comment.created_at || '  -  ' || jira_user.user_display_name || ':  ' || comment.body, '\\n')\n\n as conversation,\n    count(comment.comment_id) as count_comments\n\n    from\n    comment \n    join jira_user on comment.author_user_id = jira_user.user_id\n\n    group by 1\n)\n\nselect * from agg_comments\n)"}, {"id": "model.jira.int_jira__issue_field_history", "sql": " __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    fields.field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n)"}, {"id": "model.jira.int_jira__issue_assign_resolution", "sql": " __dbt__cte__int_jira__issue_assign_resolution as (\nwith issue_field_history as (\n    \n    select *\n    from __dbt__cte__int_jira__issue_field_history\n\n), \n\nfiltered as (\n    -- we're only looking at assignments and resolutions, which are single-field values\n    select *\n    from issue_field_history\n\n    where (lower(field_id) = 'assignee'\n    or lower(field_id) = 'resolutiondate')\n\n    and field_value is not null -- remove initial null rows\n),\n\nissue_dates as (\n\n    select\n\n        issue_id,\n        min(case when field_id = 'assignee' then updated_at end) as first_assigned_at,\n        max(case when field_id = 'assignee' then updated_at end) as last_assigned_at,\n        min(case when field_id = 'resolutiondate' then updated_at end) as first_resolved_at -- in case it's been re-opened\n\n    from filtered\n    group by 1\n)\n\nselect *\nfrom issue_dates\n)"}, {"id": "model.jira.int_jira__issue_versions", "sql": " __dbt__cte__int_jira__issue_versions as (\n\n\nwith version as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__version\"\n),\n\nversion_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n    where field_id = 'versions'\n        or field_id = 'fixVersions'\n),\n\norder_versions as (\n\n    select\n        *,\n        -- using rank so batches stick together\n        rank() over (\n            partition by field_id, issue_id\n            order by updated_at desc\n            ) as row_num\n\n    from version_history\n),\n\nlatest_versions as (\n\n    select \n        field_id,\n        issue_id,\t\n        updated_at,\n        cast(field_value as \n    int\n) as version_id\n    from order_versions\n    where row_num = 1\n),\n\nversion_info as (\n\n    select \n        latest_versions.field_id,\n        latest_versions.issue_id,\n        \n    string_agg(version.version_name, ', ')\n\n as versions\n\n    from latest_versions\n    join version on latest_versions.version_id = version.version_id\n\n    group by 1,2\n),\n\nsplit_versions as (\n\n    select \n        issue_id,\n        case when field_id = 'versions' then versions else null end as affects_versions,\n        case when field_id = 'fixVersions' then versions else null end as fixes_versions\n    from version_info\n),\n\nfinal as (\n\n    select \n        issue_id,\n        max(affects_versions) as affects_versions,\n        max(fixes_versions) as fixes_versions\n    from split_versions\n    group by 1\n)\n\nselect *\nfrom final\n)"}], "relation_name": "\"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__issue_join\""}, "model.jira.int_jira__issue_assign_resolution": {"raw_sql": "with issue_field_history as (\n    \n    select *\n    from {{ ref('int_jira__issue_field_history') }}\n\n), \n\nfiltered as (\n    -- we're only looking at assignments and resolutions, which are single-field values\n    select *\n    from issue_field_history\n\n    where (lower(field_id) = 'assignee'\n    or lower(field_id) = 'resolutiondate')\n\n    and field_value is not null -- remove initial null rows\n),\n\nissue_dates as (\n\n    select\n\n        issue_id,\n        min(case when field_id = 'assignee' then updated_at end) as first_assigned_at,\n        max(case when field_id = 'assignee' then updated_at end) as last_assigned_at,\n        min(case when field_id = 'resolutiondate' then updated_at end) as first_resolved_at -- in case it's been re-opened\n\n    from filtered\n    group by 1\n)\n\nselect *\nfrom issue_dates", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.jira.int_jira__issue_field_history"]}, "config": {"enabled": true, "alias": null, "schema": "int_jira", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_int_jira", "fqn": ["jira", "intermediate", "int_jira__issue_assign_resolution"], "unique_id": "model.jira.int_jira__issue_assign_resolution", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "intermediate/int_jira__issue_assign_resolution.sql", "original_file_path": "models/intermediate/int_jira__issue_assign_resolution.sql", "name": "int_jira__issue_assign_resolution", "alias": "int_jira__issue_assign_resolution", "checksum": {"name": "sha256", "checksum": "6cb67ab52f87b6846e4cfa9d40b137be5a6e848e97f3fa73983a579cef7a45ae"}, "tags": [], "refs": [["int_jira__issue_field_history"]], "sources": [], "description": "Table grabbing dates related to the assignment and resolution of issues.", "columns": {"first_assigned_at": {"name": "first_assigned_at", "description": "Timestamp of when the issue was first assigned to a user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_assigned_at": {"name": "last_assigned_at", "description": "Timestamp of when the issue was last assigned to a user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_resolved_at": {"name": "first_resolved_at", "description": "Timestamp of when the issue was first resolved.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_id": {"name": "issue_id", "description": "Foreign key referencing the ID of the `issue` that was assigned or resolved.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira://models/intermediate/int_jira.yml", "compiled_path": "target/compiled/jira/models/intermediate/int_jira__issue_assign_resolution.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "schema": "int_jira"}, "created_at": 1663707929.167051, "compiled_sql": "with  __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    fields.field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),issue_field_history as (\n    \n    select *\n    from __dbt__cte__int_jira__issue_field_history\n\n), \n\nfiltered as (\n    -- we're only looking at assignments and resolutions, which are single-field values\n    select *\n    from issue_field_history\n\n    where (lower(field_id) = 'assignee'\n    or lower(field_id) = 'resolutiondate')\n\n    and field_value is not null -- remove initial null rows\n),\n\nissue_dates as (\n\n    select\n\n        issue_id,\n        min(case when field_id = 'assignee' then updated_at end) as first_assigned_at,\n        max(case when field_id = 'assignee' then updated_at end) as last_assigned_at,\n        min(case when field_id = 'resolutiondate' then updated_at end) as first_resolved_at -- in case it's been re-opened\n\n    from filtered\n    group by 1\n)\n\nselect *\nfrom issue_dates", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.jira.int_jira__issue_field_history", "sql": " __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    fields.field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n)"}], "relation_name": null}, "model.jira.int_jira__issue_versions": {"raw_sql": "{{ config(enabled=var('jira_using_versions', True)) }}\n\nwith version as (\n\n    select *\n    from {{ var('version') }}\n),\n\nversion_history as (\n\n    select *\n    from {{ ref('int_jira__issue_multiselect_history') }}\n\n    where field_id = 'versions'\n        or field_id = 'fixVersions'\n),\n\norder_versions as (\n\n    select\n        *,\n        -- using rank so batches stick together\n        rank() over (\n            partition by field_id, issue_id\n            order by updated_at desc\n            ) as row_num\n\n    from version_history\n),\n\nlatest_versions as (\n\n    select \n        field_id,\n        issue_id,\t\n        updated_at,\n        cast(field_value as {{ dbt_utils.type_int() }}) as version_id\n    from order_versions\n    where row_num = 1\n),\n\nversion_info as (\n\n    select \n        latest_versions.field_id,\n        latest_versions.issue_id,\n        {{ fivetran_utils.string_agg('version.version_name', \"', '\") }} as versions\n\n    from latest_versions\n    join version on latest_versions.version_id = version.version_id\n\n    group by 1,2\n),\n\nsplit_versions as (\n\n    select \n        issue_id,\n        case when field_id = 'versions' then versions else null end as affects_versions,\n        case when field_id = 'fixVersions' then versions else null end as fixes_versions\n    from version_info\n),\n\nfinal as (\n\n    select \n        issue_id,\n        max(affects_versions) as affects_versions,\n        max(fixes_versions) as fixes_versions\n    from split_versions\n    group by 1\n)\n\nselect *\nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.fivetran_utils.string_agg"], "nodes": ["model.jira_source.stg_jira__version", "model.jira.int_jira__issue_multiselect_history"]}, "config": {"enabled": true, "alias": null, "schema": "int_jira", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_int_jira", "fqn": ["jira", "intermediate", "int_jira__issue_versions"], "unique_id": "model.jira.int_jira__issue_versions", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "intermediate/int_jira__issue_versions.sql", "original_file_path": "models/intermediate/int_jira__issue_versions.sql", "name": "int_jira__issue_versions", "alias": "int_jira__issue_versions", "checksum": {"name": "sha256", "checksum": "b2d424a2d6ad75081e27ff4c44933cd51b8893af31d8ecf6f56a7b6198b3b1a4"}, "tags": [], "refs": [["stg_jira__version"], ["int_jira__issue_multiselect_history"]], "sources": [], "description": "Table associating issues with the versions that they fix and/or affect. \n", "columns": {"issue_id": {"name": "issue_id", "description": "Foreign key referencing the `issue` tagged with these versions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "affects_versions": {"name": "affects_versions", "description": "Comma-separated list of the names of project versions that this issue affects.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fixes_versions": {"name": "fixes_versions", "description": "Comma-separated list of the names of project versions that this issue fixes.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira://models/intermediate/int_jira.yml", "compiled_path": "target/compiled/jira/models/intermediate/int_jira__issue_versions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "schema": "int_jira", "enabled": true}, "created_at": 1663707929.1685429, "compiled_sql": "\n\nwith  __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    fields.field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),version as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__version\"\n),\n\nversion_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n    where field_id = 'versions'\n        or field_id = 'fixVersions'\n),\n\norder_versions as (\n\n    select\n        *,\n        -- using rank so batches stick together\n        rank() over (\n            partition by field_id, issue_id\n            order by updated_at desc\n            ) as row_num\n\n    from version_history\n),\n\nlatest_versions as (\n\n    select \n        field_id,\n        issue_id,\t\n        updated_at,\n        cast(field_value as \n    int\n) as version_id\n    from order_versions\n    where row_num = 1\n),\n\nversion_info as (\n\n    select \n        latest_versions.field_id,\n        latest_versions.issue_id,\n        \n    string_agg(version.version_name, ', ')\n\n as versions\n\n    from latest_versions\n    join version on latest_versions.version_id = version.version_id\n\n    group by 1,2\n),\n\nsplit_versions as (\n\n    select \n        issue_id,\n        case when field_id = 'versions' then versions else null end as affects_versions,\n        case when field_id = 'fixVersions' then versions else null end as fixes_versions\n    from version_info\n),\n\nfinal as (\n\n    select \n        issue_id,\n        max(affects_versions) as affects_versions,\n        max(fixes_versions) as fixes_versions\n    from split_versions\n    group by 1\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.jira.int_jira__issue_multiselect_history", "sql": " __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    fields.field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n)"}], "relation_name": null}, "model.jira.int_jira__issue_users": {"raw_sql": "-- just grabs user attributes for issue assignees and reporters \n\nwith issue as (\n\n    -- including issue_id in here because snowflake for some reason ignores issue_id,\n    -- so we'll just always pull it out and explicitly select it\n    {% set except_columns = [\"revised_parent_issue_id\", \"parent_issue_id\", \"issue_id\"] %}\n\n    select\n        issue_id,\n        coalesce(revised_parent_issue_id, parent_issue_id) as parent_issue_id,\n\n        {{ dbt_utils.star(from=ref('int_jira__issue_type_parents'), \n                            except=except_columns) }}\n\n\n    \n    from {{ ref('int_jira__issue_type_parents') }}\n\n),\n\n-- user is a reserved keyword in AWS\njira_user as (\n\n    select *\n    from {{ var('user') }}\n),\n\nissue_user_join as (\n\n    select\n        issue.*,\n        assignee.user_display_name as assignee_name,\n        assignee.time_zone as assignee_timezone,\n        assignee.email as assignee_email,\n        reporter.email as reporter_email,\n        reporter.user_display_name as reporter_name,\n        reporter.time_zone as reporter_timezone\n        \n        \n    from issue\n    left join jira_user as assignee on issue.assignee_user_id = assignee.user_id \n    left join jira_user as reporter on issue.reporter_user_id = reporter.user_id\n\n)\n\nselect * \nfrom issue_user_join", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["model.jira.int_jira__issue_type_parents", "model.jira.int_jira__issue_type_parents", "model.jira_source.stg_jira__user"]}, "config": {"enabled": true, "alias": null, "schema": "int_jira", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_int_jira", "fqn": ["jira", "intermediate", "int_jira__issue_users"], "unique_id": "model.jira.int_jira__issue_users", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "intermediate/int_jira__issue_users.sql", "original_file_path": "models/intermediate/int_jira__issue_users.sql", "name": "int_jira__issue_users", "alias": "int_jira__issue_users", "checksum": {"name": "sha256", "checksum": "c5ea290253d25de1e667a1a8927e5917262f85819fbe634a303e1522bcdd13c1"}, "tags": [], "refs": [["int_jira__issue_type_parents"], ["int_jira__issue_type_parents"], ["stg_jira__user"]], "sources": [], "description": "Table relating issues to attributes about their assignees and reporters. Builds off of the `int_jira__issue_type_parents` model.\n", "columns": {"issue_id": {"name": "issue_id", "description": "Unique ID of the issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assignee_name": {"name": "assignee_name", "description": "User display name of the person currently assigned this issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reporter_name": {"name": "reporter_name", "description": "User display name of the person who reported the issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assignee_timezone": {"name": "assignee_timezone", "description": "Timezone of the user currently assigned this issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assignee_email": {"name": "assignee_email", "description": "Email associated with the user currently assigned this issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reporter_email": {"name": "reporter_email", "description": "Email associated with the user who reported this issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reporter_timezone": {"name": "reporter_timezone", "description": "Timezone of the user currently who reported this issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_issue_id": {"name": "parent_issue_id", "description": "Unique ID of the parent issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_type": {"name": "issue_type", "description": "Name of the issue type (ie Epic, Task, Subtask, any custom types).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_name": {"name": "issue_name", "description": "Title of the issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_key": {"name": "issue_key", "description": "UI-facing id of the issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_issue_type": {"name": "parent_issue_type", "description": "Name of the parent issue type (ie Epic, Task, Subtask, any custom types).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_issue_name": {"name": "parent_issue_name", "description": "Title of the parent issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_issue_key": {"name": "parent_issue_key", "description": "UI-facing id of the parent issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_parent_epic": {"name": "is_parent_epic", "description": "Boolean that is true if the parent is an epic.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assignee_user_id": {"name": "assignee_user_id", "description": "Foreign key referencing the ID of the `user` currently assigned to this task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the issue was created (in UTC).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creator_user_id": {"name": "creator_user_id", "description": "Foreign key referencing the `user` who first created the issue. Cannot be changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_description": {"name": "issue_description", "description": "The issue description, if given.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "Calendar day on which the issue is due, if a due date is provided.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "environment": {"name": "environment", "description": "Text field describing the environment in which the issue occurred (ie \"IE9 on Windows 7\").", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_type_id": {"name": "issue_type_id", "description": "Foreign key referencing the ID of the `issue_type`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_estimate_seconds": {"name": "original_estimate_seconds", "description": "The original estimate of how long working on this issue would take, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "priority_id": {"name": "priority_id", "description": "Foreign key referencing the ID of the issue's current `priority`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_id": {"name": "project_id", "description": "Foreign key referencing the ID of the `project` that the issue belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "remaining_estimate_seconds": {"name": "remaining_estimate_seconds", "description": "The estimate of how much longer working on this issue will take, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reporter_user_id": {"name": "reporter_user_id", "description": "Foreign key referencing the ID of the `user` who reported the issue. This differs from the `creator` column  in that the reporter can be changed in-app.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "resolution_id": {"name": "resolution_id", "description": "Foreign key referencing the ID of the issue's type of `resolution`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "resolved_at": {"name": "resolved_at", "description": "Timestamp of when the issue was resolved (ie completed, marked as duplicate). If an issue is un-resolved, this will be null.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status_id": {"name": "status_id", "description": "Foreign key referencing the ID of the issue's `status` (the step that the issue is currently at  in the project's workflow).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status_changed_at": {"name": "status_changed_at", "description": "Timestamp of when the status was last changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_spent_seconds": {"name": "time_spent_seconds", "description": "The time that was spent working on this issue, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the issue was last updated in some way.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "work_ratio": {"name": "work_ratio", "description": "The percentage of work that has been logged against the issue (time_spent) vs the original estimate of worktime. Equals -1.0 when the fields required for calculation are not provided.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira://models/intermediate/int_jira.yml", "compiled_path": "target/compiled/jira/models/intermediate/int_jira__issue_users.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "schema": "int_jira"}, "created_at": 1663707929.158716, "compiled_sql": "-- just grabs user attributes for issue assignees and reporters \n\nwith issue as (\n\n    -- including issue_id in here because snowflake for some reason ignores issue_id,\n    -- so we'll just always pull it out and explicitly select it\n    \n\n    select\n        issue_id,\n        coalesce(revised_parent_issue_id, parent_issue_id) as parent_issue_id,\n\n        \n\n    \"original_estimate_seconds\",\n  \"remaining_estimate_seconds\",\n  \"time_spent_seconds\",\n  \"assignee_user_id\",\n  \"created_at\",\n  \"resolved_at\",\n  \"creator_user_id\",\n  \"issue_description\",\n  \"due_date\",\n  \"environment\",\n  \"issue_type_id\",\n  \"issue_key\",\n  \"priority_id\",\n  \"project_id\",\n  \"reporter_user_id\",\n  \"resolution_id\",\n  \"status_id\",\n  \"status_changed_at\",\n  \"issue_name\",\n  \"updated_at\",\n  \"work_ratio\",\n  \"_fivetran_synced\",\n  \"issue_type\",\n  \"parent_issue_type\",\n  \"parent_issue_name\",\n  \"parent_issue_key\",\n  \"is_parent_epic\"\n\n\n    \n    from \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__issue_type_parents\"\n\n),\n\n-- user is a reserved keyword in AWS\njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__user\"\n),\n\nissue_user_join as (\n\n    select\n        issue.*,\n        assignee.user_display_name as assignee_name,\n        assignee.time_zone as assignee_timezone,\n        assignee.email as assignee_email,\n        reporter.email as reporter_email,\n        reporter.user_display_name as reporter_name,\n        reporter.time_zone as reporter_timezone\n        \n        \n    from issue\n    left join jira_user as assignee on issue.assignee_user_id = assignee.user_id \n    left join jira_user as reporter on issue.reporter_user_id = reporter.user_id\n\n)\n\nselect * \nfrom issue_user_join", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.jira.int_jira__issue_sprint": {"raw_sql": "{{ config(enabled=var('jira_using_sprints', True)) }}\n\nwith sprint as (\n\n    select * \n    from {{ var('sprint') }}\n\n),\n\nfield_history as (\n\n     -- sprints don't appear to be capable of multiselect in the UI...\n    select *\n    from {{ ref('int_jira__issue_multiselect_history') }}\n\n),\n\n-- only grab history pertaining to sprints\nsprint_field_history as (\n\n    select \n        field_history.*,\n        row_number() over (\n                    partition by issue_id order by updated_at desc\n                    ) as row_num\n\n    from field_history\n    where lower(field_name) = 'sprint'\n\n),\n\nlast_sprint as (\n  \n    select *\n    from sprint_field_history\n    \n    where row_num = 1\n\n),\n\nsprint_rollovers as (\n\n    select \n        issue_id,\n        count(distinct case when field_value is not null then field_value end) as count_sprint_changes\n    \n    from sprint_field_history\n    group by 1\n\n),\n\nissue_sprint as (\n\n    select \n        last_sprint.issue_id,\n        last_sprint.field_value as sprint_id,\n        sprint.sprint_name,\n        sprint.board_id,\n        sprint.started_at as sprint_started_at,\n        sprint.ended_at as sprint_ended_at,\n        sprint.completed_at as sprint_completed_at,\n        coalesce(sprint_rollovers.count_sprint_changes, 0) as count_sprint_changes\n\n    from \n    last_sprint \n    join sprint on last_sprint.field_value = cast(sprint.sprint_id as {{dbt_utils.type_string()}})\n    left join sprint_rollovers on sprint_rollovers.issue_id = last_sprint.issue_id\n    \n)\n\nselect * from issue_sprint", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.type_string"], "nodes": ["model.jira_source.stg_jira__sprint", "model.jira.int_jira__issue_multiselect_history"]}, "config": {"enabled": true, "alias": null, "schema": "int_jira", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_int_jira", "fqn": ["jira", "intermediate", "int_jira__issue_sprint"], "unique_id": "model.jira.int_jira__issue_sprint", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "intermediate/int_jira__issue_sprint.sql", "original_file_path": "models/intermediate/int_jira__issue_sprint.sql", "name": "int_jira__issue_sprint", "alias": "int_jira__issue_sprint", "checksum": {"name": "sha256", "checksum": "62d68f3b10526eb0ee3a84c79a77c8bbc28071d50a01e84a2bef575bf3bde876"}, "tags": [], "refs": [["stg_jira__sprint"], ["int_jira__issue_multiselect_history"]], "sources": [], "description": "Table relating issues to the sprints they currently belong to.", "columns": {"issue_id": {"name": "issue_id", "description": "Unique ID of the issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sprint_id": {"name": "sprint_id", "description": "Unique ID of the sprint.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sprint_name": {"name": "sprint_name", "description": "Title of the sprint.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "board_id": {"name": "board_id", "description": "Foreign key referencing the ID of the `board` that the sprint lives in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sprint_started_at": {"name": "sprint_started_at", "description": "Timestamp of when the sprint began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sprint_ended_at": {"name": "sprint_ended_at", "description": "Timestamp of when the sprint is planned to end.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sprint_completed_at": {"name": "sprint_completed_at", "description": "Timestamp of when the sprint was completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_sprint_changes": {"name": "count_sprint_changes", "description": "The total number of sprints that the issue has belonged to.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira://models/intermediate/int_jira.yml", "compiled_path": "target/compiled/jira/models/intermediate/int_jira__issue_sprint.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "schema": "int_jira", "enabled": true}, "created_at": 1663707929.149585, "compiled_sql": "\n\nwith  __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    fields.field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),sprint as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__sprint\"\n\n),\n\nfield_history as (\n\n     -- sprints don't appear to be capable of multiselect in the UI...\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n),\n\n-- only grab history pertaining to sprints\nsprint_field_history as (\n\n    select \n        field_history.*,\n        row_number() over (\n                    partition by issue_id order by updated_at desc\n                    ) as row_num\n\n    from field_history\n    where lower(field_name) = 'sprint'\n\n),\n\nlast_sprint as (\n  \n    select *\n    from sprint_field_history\n    \n    where row_num = 1\n\n),\n\nsprint_rollovers as (\n\n    select \n        issue_id,\n        count(distinct case when field_value is not null then field_value end) as count_sprint_changes\n    \n    from sprint_field_history\n    group by 1\n\n),\n\nissue_sprint as (\n\n    select \n        last_sprint.issue_id,\n        last_sprint.field_value as sprint_id,\n        sprint.sprint_name,\n        sprint.board_id,\n        sprint.started_at as sprint_started_at,\n        sprint.ended_at as sprint_ended_at,\n        sprint.completed_at as sprint_completed_at,\n        coalesce(sprint_rollovers.count_sprint_changes, 0) as count_sprint_changes\n\n    from \n    last_sprint \n    join sprint on last_sprint.field_value = cast(sprint.sprint_id as \n    varchar\n)\n    left join sprint_rollovers on sprint_rollovers.issue_id = last_sprint.issue_id\n    \n)\n\nselect * from issue_sprint", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.jira.int_jira__issue_multiselect_history", "sql": " __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    fields.field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n)"}], "relation_name": null}, "model.jira.int_jira__issue_comments": {"raw_sql": "{{ config(enabled=var('jira_include_comments', True)) }}\n\nwith comment as (\n\n    select *\n    from {{ var('comment') }}\n\n    order by issue_id, created_at asc\n\n),\n\n-- user is a reserved keyword in AWS \njira_user as (\n\n    select *\n    from {{ var('user') }}\n),\n\nagg_comments as (\n\n    select \n    comment.issue_id,\n    {{ fivetran_utils.string_agg( \"comment.created_at || '  -  ' || jira_user.user_display_name || ':  ' || comment.body\", \"'\\\\n'\" ) }} as conversation,\n    count(comment.comment_id) as count_comments\n\n    from\n    comment \n    join jira_user on comment.author_user_id = jira_user.user_id\n\n    group by 1\n)\n\nselect * from agg_comments", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.string_agg"], "nodes": ["model.jira_source.stg_jira__comment", "model.jira_source.stg_jira__user"]}, "config": {"enabled": true, "alias": null, "schema": "int_jira", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_int_jira", "fqn": ["jira", "intermediate", "int_jira__issue_comments"], "unique_id": "model.jira.int_jira__issue_comments", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "intermediate/int_jira__issue_comments.sql", "original_file_path": "models/intermediate/int_jira__issue_comments.sql", "name": "int_jira__issue_comments", "alias": "int_jira__issue_comments", "checksum": {"name": "sha256", "checksum": "7775067304651e37ed93c0ec86a2f54c83c24d31ab5205e16b0a075b58b84dfe"}, "tags": [], "refs": [["stg_jira__comment"], ["stg_jira__user"]], "sources": [], "description": "Table aggregating issue comments into conversations.", "columns": {"issue_id": {"name": "issue_id", "description": "Unique ID of the issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conversation": {"name": "conversation", "description": "Line-separated list of comments made on this issue, including the timestamp and author name of each comment.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_comments": {"name": "count_comments", "description": "The number of comments made on this issues.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira://models/intermediate/int_jira.yml", "compiled_path": "target/compiled/jira/models/intermediate/int_jira__issue_comments.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "schema": "int_jira", "enabled": true}, "created_at": 1663707929.147756, "compiled_sql": "\n\nwith comment as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__comment\"\n\n    order by issue_id, created_at asc\n\n),\n\n-- user is a reserved keyword in AWS \njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__user\"\n),\n\nagg_comments as (\n\n    select \n    comment.issue_id,\n    \n    string_agg(comment.created_at || '  -  ' || jira_user.user_display_name || ':  ' || comment.body, '\\n')\n\n as conversation,\n    count(comment.comment_id) as count_comments\n\n    from\n    comment \n    join jira_user on comment.author_user_id = jira_user.user_id\n\n    group by 1\n)\n\nselect * from agg_comments", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.jira.int_jira__project_metrics": {"raw_sql": "with issue as (\n\n    select * \n    from {{ ref('jira__issue_enhanced') }}\n    where project_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        project_id,\n        round( cast( {{ fivetran_utils.percentile(percentile_field='case when resolved_at is not null then open_duration_seconds end', \n                    partition_field='project_id', percent='0.5') }} as {{ dbt_utils.type_numeric() }} ), 0) as median_close_time_seconds,\n        round( cast({{ fivetran_utils.percentile(percentile_field='case when resolved_at is null then open_duration_seconds end', \n                    partition_field='project_id', percent='0.5') }} as {{ dbt_utils.type_numeric() }} ), 0) as median_age_currently_open_seconds,\n\n        round( cast({{ fivetran_utils.percentile(percentile_field='case when resolved_at is not null then any_assignment_duration_seconds end', \n                    partition_field='project_id', percent='0.5') }} as {{ dbt_utils.type_numeric() }} ), 0) as median_assigned_close_time_seconds,\n        round( cast({{ fivetran_utils.percentile(percentile_field='case when resolved_at is null then any_assignment_duration_seconds end', \n                    partition_field='project_id', percent='0.5') }} as {{ dbt_utils.type_numeric() }} ), 0) as median_age_currently_open_assigned_seconds\n\n    from issue\n\n    {% if target.type == 'postgres' %} group by project_id {% endif %}\n),\n\n-- grouping because the medians were calculated using window functions (except in postgres)\nmedian_metrics as (\n\n    select \n        project_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds,\n        median_assigned_close_time_seconds,\n        median_age_currently_open_assigned_seconds\n\n    from calculate_medians\n    group by 1,2,3,4,5\n),\n\n\n-- get appropriate counts + sums to calculate averages\nproject_issues as (\n    select\n        project_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        -- using the below to calculate averages\n\n        -- assigned issues\n        sum(case when resolved_at is null and assignee_user_id is not null then 1 else 0 end) as count_open_assigned_issues,\n        sum(case when resolved_at is not null and assignee_user_id is not null then 1 else 0 end) as count_closed_assigned_issues,\n\n        -- close time \n        sum(case when resolved_at is not null then open_duration_seconds else 0 end) as sum_close_time_seconds,\n        sum(case when resolved_at is not null then any_assignment_duration_seconds else 0 end) as sum_assigned_close_time_seconds,\n\n        -- age of currently open tasks\n        sum(case when resolved_at is null then open_duration_seconds else 0 end) as sum_currently_open_duration_seconds,\n        sum(case when resolved_at is null then any_assignment_duration_seconds else 0 end) as sum_currently_open_assigned_duration_seconds\n\n    from issue\n\n    group by 1\n),\n\ncalculate_avg_metrics as (\n\n    select\n        project_id,\n        count_closed_issues,\n        count_open_issues,\n        count_open_assigned_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues  as {{ dbt_utils.type_numeric() }} ), 0) end as avg_close_time_seconds,\n\n        case when count_closed_assigned_issues = 0 then 0 else\n        round( cast(sum_assigned_close_time_seconds * 1.0 / count_closed_assigned_issues  as {{ dbt_utils.type_numeric() }} ), 0) end as avg_assigned_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_currently_open_duration_seconds * 1.0 / count_open_issues as {{ dbt_utils.type_numeric() }} ), 0) end as avg_age_currently_open_seconds,\n\n        case when count_open_assigned_issues = 0 then 0 else\n        round( cast(sum_currently_open_assigned_duration_seconds * 1.0 / count_open_assigned_issues as {{ dbt_utils.type_numeric() }} ), 0) end as avg_age_currently_open_assigned_seconds\n\n    from project_issues\n),\n\n-- join medians and averages + convert to days\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n\n        -- there are 86400 seconds in a day\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as {{ dbt_utils.type_numeric() }} ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_assigned_close_time_seconds / 86400.0 as {{ dbt_utils.type_numeric() }} ), 0) as avg_assigned_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as {{ dbt_utils.type_numeric() }} ), 0) as avg_age_currently_open_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_assigned_seconds / 86400.0 as {{ dbt_utils.type_numeric() }} ), 0) as avg_age_currently_open_assigned_days,\n\n        median_metrics.median_close_time_seconds, \n        median_metrics.median_age_currently_open_seconds,\n        median_metrics.median_assigned_close_time_seconds,\n        median_metrics.median_age_currently_open_assigned_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as {{ dbt_utils.type_numeric() }} ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as {{ dbt_utils.type_numeric() }} ), 0) as median_age_currently_open_days,\n        round( cast(median_metrics.median_assigned_close_time_seconds / 86400.0 as {{ dbt_utils.type_numeric() }} ), 0) as median_assigned_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_assigned_seconds / 86400.0 as {{ dbt_utils.type_numeric() }} ), 0) as median_age_currently_open_assigned_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(project_id)\n)\n\nselect * from join_metrics", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.fivetran_utils.percentile", "macro.dbt_utils.type_numeric"], "nodes": ["model.jira.jira__issue_enhanced"]}, "config": {"enabled": true, "alias": null, "schema": "int_jira", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_int_jira", "fqn": ["jira", "intermediate", "int_jira__project_metrics"], "unique_id": "model.jira.int_jira__project_metrics", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "intermediate/int_jira__project_metrics.sql", "original_file_path": "models/intermediate/int_jira__project_metrics.sql", "name": "int_jira__project_metrics", "alias": "int_jira__project_metrics", "checksum": {"name": "sha256", "checksum": "4f9796826075c8fb52f42c1d388582b438064332a86575d6a831c0aa51c772cd"}, "tags": [], "refs": [["jira__issue_enhanced"]], "sources": [], "description": "Table calculating issue-related metrics per project.", "columns": {"project_id": {"name": "project_id", "description": "Unique ID of the project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_closed_issues": {"name": "count_closed_issues", "description": "The number of issues closed in this project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_open_issues": {"name": "count_open_issues", "description": "The number of currently un-resolved issues in the project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_open_assigned_issues": {"name": "count_open_assigned_issues", "description": "The number of currently open and currently assigned issues in the project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_close_time_seconds": {"name": "avg_close_time_seconds", "description": "The average time taken to close issues, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_assigned_close_time_seconds": {"name": "avg_assigned_close_time_seconds", "description": "The average time taken to close issues from their first assignment, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_age_currently_open_seconds": {"name": "avg_age_currently_open_seconds", "description": "The average age of any currently-open issues.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_age_currently_open_assigned_seconds": {"name": "avg_age_currently_open_assigned_seconds", "description": "The average age of any currently-open issues, from their first assignment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "median_close_time_seconds": {"name": "median_close_time_seconds", "description": "The median time taken to close issues, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "median_age_currently_open_seconds": {"name": "median_age_currently_open_seconds", "description": "The median age of any currently-open issues.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "median_assigned_close_time_seconds": {"name": "median_assigned_close_time_seconds", "description": "The median time taken to close issues from their first assignment, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "median_age_currently_open_assigned_seconds": {"name": "median_age_currently_open_assigned_seconds", "description": "The median age of any currently-open issues, from their first assignment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_close_time_days": {"name": "avg_close_time_days", "description": "The average time taken to close issues, in days.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_assigned_close_time_days": {"name": "avg_assigned_close_time_days", "description": "The average time taken to close issues from their first assignment, in days.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_age_currently_open_days": {"name": "avg_age_currently_open_days", "description": "The average age of any currently-open issues.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "avg_age_currently_open_assigned_days": {"name": "avg_age_currently_open_assigned_days", "description": "The average age of any currently-open issues, from their first assignment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "median_close_time_days": {"name": "median_close_time_days", "description": "The median time taken to close issues, in days.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "median_age_currently_open_days": {"name": "median_age_currently_open_days", "description": "The median age of any currently-open issues.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "median_assigned_close_time_days": {"name": "median_assigned_close_time_days", "description": "The median time taken to close issues from their first assignment, in days.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "median_age_currently_open_assigned_days": {"name": "median_age_currently_open_assigned_days", "description": "The median age of any currently-open issues, from their first assignment.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira://models/intermediate/int_jira.yml", "compiled_path": "target/compiled/jira/models/intermediate/int_jira__project_metrics.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "schema": "int_jira"}, "created_at": 1663707929.145192, "compiled_sql": "with issue as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira\".\"jira__issue_enhanced\"\n    where project_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        project_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n ), 0) as median_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_seconds,\n\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n ), 0) as median_assigned_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_assigned_seconds\n\n    from issue\n\n     group by project_id \n),\n\n-- grouping because the medians were calculated using window functions (except in postgres)\nmedian_metrics as (\n\n    select \n        project_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds,\n        median_assigned_close_time_seconds,\n        median_age_currently_open_assigned_seconds\n\n    from calculate_medians\n    group by 1,2,3,4,5\n),\n\n\n-- get appropriate counts + sums to calculate averages\nproject_issues as (\n    select\n        project_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        -- using the below to calculate averages\n\n        -- assigned issues\n        sum(case when resolved_at is null and assignee_user_id is not null then 1 else 0 end) as count_open_assigned_issues,\n        sum(case when resolved_at is not null and assignee_user_id is not null then 1 else 0 end) as count_closed_assigned_issues,\n\n        -- close time \n        sum(case when resolved_at is not null then open_duration_seconds else 0 end) as sum_close_time_seconds,\n        sum(case when resolved_at is not null then any_assignment_duration_seconds else 0 end) as sum_assigned_close_time_seconds,\n\n        -- age of currently open tasks\n        sum(case when resolved_at is null then open_duration_seconds else 0 end) as sum_currently_open_duration_seconds,\n        sum(case when resolved_at is null then any_assignment_duration_seconds else 0 end) as sum_currently_open_assigned_duration_seconds\n\n    from issue\n\n    group by 1\n),\n\ncalculate_avg_metrics as (\n\n    select\n        project_id,\n        count_closed_issues,\n        count_open_issues,\n        count_open_assigned_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues  as \n    numeric(28, 6)\n ), 0) end as avg_close_time_seconds,\n\n        case when count_closed_assigned_issues = 0 then 0 else\n        round( cast(sum_assigned_close_time_seconds * 1.0 / count_closed_assigned_issues  as \n    numeric(28, 6)\n ), 0) end as avg_assigned_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_currently_open_duration_seconds * 1.0 / count_open_issues as \n    numeric(28, 6)\n ), 0) end as avg_age_currently_open_seconds,\n\n        case when count_open_assigned_issues = 0 then 0 else\n        round( cast(sum_currently_open_assigned_duration_seconds * 1.0 / count_open_assigned_issues as \n    numeric(28, 6)\n ), 0) end as avg_age_currently_open_assigned_seconds\n\n    from project_issues\n),\n\n-- join medians and averages + convert to days\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n\n        -- there are 86400 seconds in a day\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_assigned_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_assigned_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_age_currently_open_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_assigned_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_age_currently_open_assigned_days,\n\n        median_metrics.median_close_time_seconds, \n        median_metrics.median_age_currently_open_seconds,\n        median_metrics.median_assigned_close_time_seconds,\n        median_metrics.median_age_currently_open_assigned_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_days,\n        round( cast(median_metrics.median_assigned_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_assigned_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_assigned_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_assigned_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(project_id)\n)\n\nselect * from join_metrics", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.jira.int_jira__issue_multiselect_history": {"raw_sql": "with issue_multiselect_history as (\n\n    select *\n    from {{ var('issue_multiselect_history') }}\n    \n), \n\nfields as (\n      \n    select *\n    from {{ var('field') }}\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    fields.field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.jira_source.stg_jira__issue_multiselect_history", "model.jira_source.stg_jira__field"]}, "config": {"enabled": true, "alias": null, "schema": "int_jira", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_int_jira", "fqn": ["jira", "intermediate", "field_history", "int_jira__issue_multiselect_history"], "unique_id": "model.jira.int_jira__issue_multiselect_history", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "intermediate/field_history/int_jira__issue_multiselect_history.sql", "original_file_path": "models/intermediate/field_history/int_jira__issue_multiselect_history.sql", "name": "int_jira__issue_multiselect_history", "alias": "int_jira__issue_multiselect_history", "checksum": {"name": "sha256", "checksum": "60d800d1bf8b935312cf888585df92662f8aeccbbf374e1b65da150e12ff594d"}, "tags": [], "refs": [["stg_jira__issue_multiselect_history"], ["stg_jira__field"]], "sources": [], "description": "Table of every value that each array-type (multiselect) field has been set to. Each row will pertain to **one** value. This model serves to append the `field_name` to each record.\n", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Fivetran-generated ID hashed on field, issue, and value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the issue field was updated to included this value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "field_id": {"name": "field_id", "description": "Foreign key referencing the ID of the `field` that was changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_id": {"name": "issue_id", "description": "Foreign key referencing the ID of the `issue` whose field was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "field_value": {"name": "field_value", "description": "Content of the value of that the field was set to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "field_name": {"name": "field_name", "description": "Name of the field as it appears on issue cards.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira://models/intermediate/int_jira.yml", "compiled_path": "target/compiled/jira/models/intermediate/field_history/int_jira__issue_multiselect_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "schema": "int_jira"}, "created_at": 1663707929.166185, "compiled_sql": "with issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    fields.field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.jira.int_jira__pivot_daily_field_history": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        partition_by = {'field': 'valid_starting_on', 'data_type': 'date'}\n            if target.type != 'spark' else ['valid_starting_on'],\n        unique_key='issue_day_id',\n        incremental_strategy = 'merge',\n        file_format = 'delta'\n    )\n}}\n\n-- latest value per issue field (already limited included fields to sprint, status, and var(issue_field_history_columns))\nwith daily_field_history as (\n\n    select * \n    from {{ ref('int_jira__daily_field_history') }}\n\n    {% if is_incremental() %}\n    where valid_starting_on >= (select max(valid_starting_on) from {{ this }} )\n    {% endif %}\n),\n\npivot_out as (\n\n    -- pivot out default columns (status and sprint) and others specified in the var(issue_field_history_columns)\n    -- only days on which a field value was actively changed will have a non-null value. the nulls will need to \n    -- be backfilled in the final jira__daily_issue_field_history model\n    select \n        valid_starting_on, \n        issue_id,\n        max(case when lower(field_id) = 'status' then field_value end) as status,\n        max(case when lower(field_name) = 'sprint' then field_value end) as sprint\n\n        {% for col in var('issue_field_history_columns', []) -%}\n        ,\n            max(case when lower(field_name) = '{{ col|lower }}' then field_value end) as {{ dbt_utils.slugify(col) | replace(' ', '_') | lower }}\n        {% endfor -%}\n\n    from daily_field_history\n\n    group by 1,2\n),\n\nsurrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['valid_starting_on','issue_id']) }} as issue_day_id\n\n    from pivot_out\n)\n\nselect * from surrogate_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.slugify", "macro.dbt_utils.surrogate_key"], "nodes": ["model.jira.int_jira__daily_field_history"]}, "config": {"enabled": true, "alias": null, "schema": "int_jira", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "partition_by": {"field": "valid_starting_on", "data_type": "date"}, "unique_key": "issue_day_id", "incremental_strategy": "merge", "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_int_jira", "fqn": ["jira", "intermediate", "field_history", "int_jira__pivot_daily_field_history"], "unique_id": "model.jira.int_jira__pivot_daily_field_history", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "intermediate/field_history/int_jira__pivot_daily_field_history.sql", "original_file_path": "models/intermediate/field_history/int_jira__pivot_daily_field_history.sql", "name": "int_jira__pivot_daily_field_history", "alias": "int_jira__pivot_daily_field_history", "checksum": {"name": "sha256", "checksum": "2f76fd6da8825463c1473ff15a0d47cc4f07156e7f4d5525dd9c9e089f30719e"}, "tags": [], "refs": [["int_jira__daily_field_history"]], "sources": [], "description": "Table pivoting out the fields in `int_jira__daily_field_history` into columns, in which the value of each field column is the latest value updated a given day.\n", "columns": {"valid_starting_on": {"name": "valid_starting_on", "description": "Calendar date of when the field was changed to this value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_id": {"name": "issue_id", "description": "Foreign key referencing the ID of the `issue` whose field was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sprint": {"name": "sprint", "description": "The ID of the sprint that an issue is slotted into on a given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The ID of the status that an issue has on a given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_day_id": {"name": "issue_day_id", "description": "Unique ID hashed on `valid_starting_on` and `issue_field_history`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira://models/intermediate/int_jira.yml", "compiled_path": "target/compiled/jira/models/intermediate/field_history/int_jira__pivot_daily_field_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "int_jira", "partition_by": {"field": "valid_starting_on", "data_type": "date"}, "unique_key": "issue_day_id", "incremental_strategy": "merge", "file_format": "delta"}, "created_at": 1663707929.164051, "compiled_sql": "\n\n-- latest value per issue field (already limited included fields to sprint, status, and var(issue_field_history_columns))\nwith daily_field_history as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__daily_field_history\"\n\n    \n    where valid_starting_on >= (select max(valid_starting_on) from \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__pivot_daily_field_history\" )\n    \n),\n\npivot_out as (\n\n    -- pivot out default columns (status and sprint) and others specified in the var(issue_field_history_columns)\n    -- only days on which a field value was actively changed will have a non-null value. the nulls will need to \n    -- be backfilled in the final jira__daily_issue_field_history model\n    select \n        valid_starting_on, \n        issue_id,\n        max(case when lower(field_id) = 'status' then field_value end) as status,\n        max(case when lower(field_name) = 'sprint' then field_value end) as sprint\n\n        ,\n            max(case when lower(field_name) = 'summary' then field_value end) as summary\n        ,\n            max(case when lower(field_name) = 'components' then field_value end) as components\n        ,\n            max(case when lower(field_name) = 'story points' then field_value end) as story_points\n        from daily_field_history\n\n    group by 1,2\n),\n\nsurrogate_key as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(valid_starting_on as \n    varchar\n), '') || '-' || coalesce(cast(issue_id as \n    varchar\n), '') as \n    varchar\n)) as issue_day_id\n\n    from pivot_out\n)\n\nselect * from surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__pivot_daily_field_history\""}, "model.jira.int_jira__issue_calendar_spine": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        partition_by = {'field': 'date_day', 'data_type': 'date'}\n            if target.type != 'spark' else ['date_day'],\n        unique_key='issue_day_id',\n        incremental_strategy = 'merge',\n        file_format = 'delta'\n    )\n}}\n\nwith spine as (\n\n    {% if execute %}\n    {% set first_date_query %}\n    -- start at the first created issue\n        select  min( created ) as min_date from {{ source('jira','issue') }}\n    {% endset %}\n    {% set first_date = run_query(first_date_query).columns[0][0]|string %}\n    \n    {% else %} {% set first_date = \"2016-01-01\" %}\n    {% endif %}\n\n\n    select * \n    from (\n        {{\n            dbt_utils.date_spine(\n                datepart = \"day\", \n                start_date =  \"cast('\" ~ first_date[0:10] ~ \"' as date)\", \n                end_date = dbt_utils.dateadd(\"week\", 1, dbt_utils.current_timestamp_in_utc())\n            )   \n        }} \n    ) as date_spine\n\n    {% if is_incremental() %}\n    -- compare to the earliest possible open_until date so that if a resolved issue is updated after a long period of inactivity, we don't need a full refresh\n    -- essentially we need to be able to backfill\n    where cast( date_day as date) >= (select min(earliest_open_until_date) from {{ this }} )\n    {% endif %}\n),\n\nissue_dates as (\n\n    select\n        issue_id,\n        cast( {{ dbt_utils.date_trunc('day', 'created_at') }} as date) as created_on,\n\n        -- resolved_at will become null if an issue is marked as un-resolved. if this sorta thing happens often, you may want to run full-refreshes of the field_history models often\n        -- if it's not resolved include everything up to today. if it is, look at the last time it was updated \n        cast({{ dbt_utils.date_trunc('day', 'case when resolved_at is null then ' ~ dbt_utils.current_timestamp_in_utc() ~ ' else updated_at end') }} as date) as open_until\n\n    from {{ var('issue') }}\n\n),\n\nissue_spine as (\n\n    select \n        cast(spine.date_day as date) as date_day,\n        issue_dates.issue_id,\n        -- will take the table-wide min of this in the incremental block at the top of this model\n        min(issue_dates.open_until) as earliest_open_until_date\n\n    from spine \n    join issue_dates on\n        issue_dates.created_on <= spine.date_day\n        and {{ dbt_utils.dateadd('month', var('jira_issue_history_buffer', 1), 'issue_dates.open_until') }} >= spine.date_day\n        -- if we cut off issues, we're going to have to do a full refresh to catch issues that have been un-resolved\n\n    group by 1,2\n),\n\nsurrogate_key as (\n\n    select \n        date_day,\n        issue_id,\n        {{ dbt_utils.surrogate_key(['date_day','issue_id']) }} as issue_day_id,\n        earliest_open_until_date\n\n    from issue_spine\n\n    where date_day <= cast( {{ dbt_utils.date_trunc('day',dbt_utils.current_timestamp_in_utc()) }} as date)\n)\n\nselect * from surrogate_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.current_timestamp_in_utc", "macro.dbt_utils.dateadd", "macro.dbt_utils.date_spine", "macro.dbt.is_incremental", "macro.dbt_utils.date_trunc", "macro.dbt_utils.surrogate_key", "macro.dbt.run_query"], "nodes": ["model.jira_source.stg_jira__issue"]}, "config": {"enabled": true, "alias": null, "schema": "int_jira", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "partition_by": {"field": "date_day", "data_type": "date"}, "unique_key": "issue_day_id", "incremental_strategy": "merge", "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_int_jira", "fqn": ["jira", "intermediate", "field_history", "int_jira__issue_calendar_spine"], "unique_id": "model.jira.int_jira__issue_calendar_spine", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "intermediate/field_history/int_jira__issue_calendar_spine.sql", "original_file_path": "models/intermediate/field_history/int_jira__issue_calendar_spine.sql", "name": "int_jira__issue_calendar_spine", "alias": "int_jira__issue_calendar_spine", "checksum": {"name": "sha256", "checksum": "3fa132fe05f974255e9e6a18649107cef9ddc3707c79e6247a26dbcb0ff76344"}, "tags": [], "refs": [["stg_jira__issue"]], "sources": [], "description": "Table relating every issue to every day it was open (plus a buffer of one month, in case the issue is re-opened, as this model is materialized incrementally).\n", "columns": {"date_day": {"name": "date_day", "description": "Calendar date on which the issue was open.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_id": {"name": "issue_id", "description": "Foreign key referencing the unique ID of the `issue` whose field was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_day_id": {"name": "issue_day_id", "description": "Unique ID hashed on `date_day` and `issue_id`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "earliest_open_until_date": {"name": "earliest_open_until_date", "description": "Used for incremental materialization logic.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira://models/intermediate/int_jira.yml", "compiled_path": "target/compiled/jira/models/intermediate/field_history/int_jira__issue_calendar_spine.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "int_jira", "partition_by": {"field": "date_day", "data_type": "date"}, "unique_key": "issue_day_id", "incremental_strategy": "merge", "file_format": "delta"}, "created_at": 1663707929.161942, "compiled_sql": "\n\nwith spine as (\n\n    \n    \n    \n    \n    \n\n\n    select * \n    from (\n        \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 909\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2020-04-01' as date) + ((interval '1 day') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= \n\n    \n    (current_timestamp at time zone 'utc')::\n    timestamp without time zone\n\n + ((interval '1 week') * (1))\n\n\n\n)\n\nselect * from filtered\n\n \n    ) as date_spine\n\n    \n    -- compare to the earliest possible open_until date so that if a resolved issue is updated after a long period of inactivity, we don't need a full refresh\n    -- essentially we need to be able to backfill\n    where cast( date_day as date) >= (select min(earliest_open_until_date) from \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__issue_calendar_spine\" )\n    \n),\n\nissue_dates as (\n\n    select\n        issue_id,\n        cast( date_trunc('day', created_at) as date) as created_on,\n\n        -- resolved_at will become null if an issue is marked as un-resolved. if this sorta thing happens often, you may want to run full-refreshes of the field_history models often\n        -- if it's not resolved include everything up to today. if it is, look at the last time it was updated \n        cast(date_trunc('day', case when resolved_at is null then \n    (current_timestamp at time zone 'utc')::\n    timestamp without time zone\n\n else updated_at end) as date) as open_until\n\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue\"\n\n),\n\nissue_spine as (\n\n    select \n        cast(spine.date_day as date) as date_day,\n        issue_dates.issue_id,\n        -- will take the table-wide min of this in the incremental block at the top of this model\n        min(issue_dates.open_until) as earliest_open_until_date\n\n    from spine \n    join issue_dates on\n        issue_dates.created_on <= spine.date_day\n        and \n\n    issue_dates.open_until + ((interval '1 month') * (1))\n\n >= spine.date_day\n        -- if we cut off issues, we're going to have to do a full refresh to catch issues that have been un-resolved\n\n    group by 1,2\n),\n\nsurrogate_key as (\n\n    select \n        date_day,\n        issue_id,\n        md5(cast(coalesce(cast(date_day as \n    varchar\n), '') || '-' || coalesce(cast(issue_id as \n    varchar\n), '') as \n    varchar\n)) as issue_day_id,\n        earliest_open_until_date\n\n    from issue_spine\n\n    where date_day <= cast( date_trunc('day', \n    (current_timestamp at time zone 'utc')::\n    timestamp without time zone\n\n) as date)\n)\n\nselect * from surrogate_key", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__issue_calendar_spine\""}, "model.jira.int_jira__agg_multiselect_history": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        partition_by = {'field': 'date_day', 'data_type': 'date'}\n            if target.type != 'spark' else ['date_day'],\n        unique_key='batch_id',\n        incremental_strategy = 'merge',\n        file_format = 'delta'\n    )\n}}\n\n-- issue_multiselect_history splits out an array-type field into multiple rows with unique individual values\n-- to combine with issue_field_history we need to aggregate the multiselect field values.\n\nwith issue_multiselect_history as (\n\n    select *\n    from {{ ref('int_jira__issue_multiselect_history') }}\n\n    {% if is_incremental() %}\n    -- always refresh the most recent day of data\n    where cast(updated_at as date) >= {{ dbt_utils.dateadd('day', -1, '(select max(date_day) from ' ~ this ~ ')') }}\n    {% endif %}\n\n),\n\n-- each field value has its own row, but each batch of values for that field has the same timestamp\nbatch_updates as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['field_id', 'issue_id', 'updated_at']) }} as batch_id\n\n    from issue_multiselect_history \n),\n\nconsolidate_batches as (\n\n    select \n        field_id,\n        field_name,\n        issue_id,\n        updated_at,\n        batch_id,\n        cast( {{ dbt_utils.date_trunc('day', 'updated_at') }} as date) as date_day,\n\n        -- if the field refers to an object captured in a table elsewhere (ie sprint, users, field_option for custom fields),\n        -- the value is actually a foreign key to that table. \n        {{ fivetran_utils.string_agg('batch_updates.field_value', \"', '\") }} as field_values \n\n    from batch_updates\n\n    group by 1,2,3,4,5,6\n)\n\nselect *\nfrom consolidate_batches", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.date_trunc", "macro.fivetran_utils.string_agg", "macro.dbt_utils.dateadd"], "nodes": ["model.jira.int_jira__issue_multiselect_history"]}, "config": {"enabled": true, "alias": null, "schema": "int_jira", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "partition_by": {"field": "date_day", "data_type": "date"}, "unique_key": "batch_id", "incremental_strategy": "merge", "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_int_jira", "fqn": ["jira", "intermediate", "field_history", "int_jira__agg_multiselect_history"], "unique_id": "model.jira.int_jira__agg_multiselect_history", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "intermediate/field_history/int_jira__agg_multiselect_history.sql", "original_file_path": "models/intermediate/field_history/int_jira__agg_multiselect_history.sql", "name": "int_jira__agg_multiselect_history", "alias": "int_jira__agg_multiselect_history", "checksum": {"name": "sha256", "checksum": "a297e315908e3de46c6ea45bbd4f017881c8084285c59ff9b0bbac9fdf508b1e"}, "tags": [], "refs": [["int_jira__issue_multiselect_history"]], "sources": [], "description": "Table aggregating batches of multiselect field values, which are split out individually in `issue_multiselect_history`. This is necessary to combine the 2 issue field history tables together.\n", "columns": {"field_id": {"name": "field_id", "description": "Foreign key referencing the ID of the `field` that was changed.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_id": {"name": "issue_id", "description": "Foreign key referencing the ID of the `issue` whose field was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the issue field was updated to included this value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "batch_id": {"name": "batch_id", "description": "Unique key hashed on field_id, issue_id, and updated_at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "field_values": {"name": "field_values", "description": "Comma-separated list of the batch's values.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "date_day": {"name": "date_day", "description": "Calendar date on which the batch of values was applied to the issue field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "field_name": {"name": "field_name", "description": "Name of the field as it appears on issue cards.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira://models/intermediate/int_jira.yml", "compiled_path": "target/compiled/jira/models/intermediate/field_history/int_jira__agg_multiselect_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "int_jira", "partition_by": {"field": "date_day", "data_type": "date"}, "unique_key": "batch_id", "incremental_strategy": "merge", "file_format": "delta"}, "created_at": 1663707929.159889, "compiled_sql": "\n\n-- issue_multiselect_history splits out an array-type field into multiple rows with unique individual values\n-- to combine with issue_field_history we need to aggregate the multiselect field values.\n\nwith  __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    fields.field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),issue_multiselect_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n    \n    -- always refresh the most recent day of data\n    where cast(updated_at as date) >= \n\n    (select max(date_day) from \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__agg_multiselect_history\") + ((interval '1 day') * (-1))\n\n\n    \n\n),\n\n-- each field value has its own row, but each batch of values for that field has the same timestamp\nbatch_updates as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(field_id as \n    varchar\n), '') || '-' || coalesce(cast(issue_id as \n    varchar\n), '') || '-' || coalesce(cast(updated_at as \n    varchar\n), '') as \n    varchar\n)) as batch_id\n\n    from issue_multiselect_history \n),\n\nconsolidate_batches as (\n\n    select \n        field_id,\n        field_name,\n        issue_id,\n        updated_at,\n        batch_id,\n        cast( date_trunc('day', updated_at) as date) as date_day,\n\n        -- if the field refers to an object captured in a table elsewhere (ie sprint, users, field_option for custom fields),\n        -- the value is actually a foreign key to that table. \n        \n    string_agg(batch_updates.field_value, ', ')\n\n as field_values \n\n    from batch_updates\n\n    group by 1,2,3,4,5,6\n)\n\nselect *\nfrom consolidate_batches", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.jira.int_jira__issue_multiselect_history", "sql": " __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    fields.field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n)"}], "relation_name": "\"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__agg_multiselect_history\""}, "model.jira.int_jira__field_history_scd": {"raw_sql": "{{ config( materialized='table') }}\n\n{%- set issue_columns = adapter.get_columns_in_relation(ref('int_jira__pivot_daily_field_history')) -%}\n\nwith change_data as (\n\n    select *\n    from {{ ref('int_jira__pivot_daily_field_history') }}\n\n), set_values as (\n\n    select \n        valid_starting_on, \n        issue_id,\n        issue_day_id\n\n        {% for col in issue_columns if col.name|lower not in ['valid_starting_on','issue_id','issue_day_id'] %} \n        , {{ col.name }}\n        -- create a batch/partition once a new value is provided\n        , sum( case when {{ col.name }} is null then 0 else 1 end) over ( partition by issue_id \n            order by valid_starting_on rows unbounded preceding) as {{ col.name }}_field_partition\n\n        {% endfor %}\n    \n    from change_data\n\n), fill_values as (\n\n-- each row of the pivoted table includes field values if that field was updated on that day\n-- we need to backfill to persist values that have been previously updated and are still valid \n    select \n        valid_starting_on, \n        issue_id,\n        issue_day_id\n        \n        {% for col in issue_columns if col.name|lower not in ['valid_starting_on','issue_id','issue_day_id'] %} \n\n        -- grab the value that started this batch/partition\n        , first_value( {{ col.name }} ) over (\n            partition by issue_id, {{ col.name }}_field_partition \n            order by valid_starting_on asc rows between unbounded preceding and current row) as {{ col.name }}\n\n        {% endfor %}\n\n    from set_values\n\n)\n\nselect *\nfrom fill_values", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.jira.int_jira__pivot_daily_field_history", "model.jira.int_jira__pivot_daily_field_history"]}, "config": {"enabled": true, "alias": null, "schema": "int_jira", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_int_jira", "fqn": ["jira", "intermediate", "field_history", "int_jira__field_history_scd"], "unique_id": "model.jira.int_jira__field_history_scd", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "intermediate/field_history/int_jira__field_history_scd.sql", "original_file_path": "models/intermediate/field_history/int_jira__field_history_scd.sql", "name": "int_jira__field_history_scd", "alias": "int_jira__field_history_scd", "checksum": {"name": "sha256", "checksum": "58292cbfeefd06285c809fde04b4b4ef4ed12d3aff1d41b9a77b821ce21555e1"}, "tags": [], "refs": [["int_jira__pivot_daily_field_history"], ["int_jira__pivot_daily_field_history"]], "sources": [], "description": "Slowly-changing-dimension model that fills values from differnt fields in the pivoted daily history model.  Note: this is the singular field history-related model that is not incremental (materialized as table)\n", "columns": {"valid_starting_on": {"name": "valid_starting_on", "description": "Calendar date of when the field was changed to this value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_id": {"name": "issue_id", "description": "Foreign key referencing the ID of the `issue` whose field was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sprint": {"name": "sprint", "description": "The ID of the sprint that an issue is slotted into on a given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The ID of the status that an issue has on a given day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_day_id": {"name": "issue_day_id", "description": "Unique ID hashed on `valid_starting_on` and `issue_field_history`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira://models/intermediate/int_jira.yml", "compiled_path": "target/compiled/jira/models/intermediate/field_history/int_jira__field_history_scd.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "int_jira"}, "created_at": 1663707929.167918, "compiled_sql": "with change_data as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__pivot_daily_field_history\"\n\n), set_values as (\n\n    select \n        valid_starting_on, \n        issue_id,\n        issue_day_id\n\n         \n        , status\n        -- create a batch/partition once a new value is provided\n        , sum( case when status is null then 0 else 1 end) over ( partition by issue_id \n            order by valid_starting_on rows unbounded preceding) as status_field_partition\n\n         \n        , sprint\n        -- create a batch/partition once a new value is provided\n        , sum( case when sprint is null then 0 else 1 end) over ( partition by issue_id \n            order by valid_starting_on rows unbounded preceding) as sprint_field_partition\n\n         \n        , summary\n        -- create a batch/partition once a new value is provided\n        , sum( case when summary is null then 0 else 1 end) over ( partition by issue_id \n            order by valid_starting_on rows unbounded preceding) as summary_field_partition\n\n         \n        , components\n        -- create a batch/partition once a new value is provided\n        , sum( case when components is null then 0 else 1 end) over ( partition by issue_id \n            order by valid_starting_on rows unbounded preceding) as components_field_partition\n\n         \n        , story_points\n        -- create a batch/partition once a new value is provided\n        , sum( case when story_points is null then 0 else 1 end) over ( partition by issue_id \n            order by valid_starting_on rows unbounded preceding) as story_points_field_partition\n\n        \n    \n    from change_data\n\n), fill_values as (\n\n-- each row of the pivoted table includes field values if that field was updated on that day\n-- we need to backfill to persist values that have been previously updated and are still valid \n    select \n        valid_starting_on, \n        issue_id,\n        issue_day_id\n        \n         \n\n        -- grab the value that started this batch/partition\n        , first_value( status ) over (\n            partition by issue_id, status_field_partition \n            order by valid_starting_on asc rows between unbounded preceding and current row) as status\n\n         \n\n        -- grab the value that started this batch/partition\n        , first_value( sprint ) over (\n            partition by issue_id, sprint_field_partition \n            order by valid_starting_on asc rows between unbounded preceding and current row) as sprint\n\n         \n\n        -- grab the value that started this batch/partition\n        , first_value( summary ) over (\n            partition by issue_id, summary_field_partition \n            order by valid_starting_on asc rows between unbounded preceding and current row) as summary\n\n         \n\n        -- grab the value that started this batch/partition\n        , first_value( components ) over (\n            partition by issue_id, components_field_partition \n            order by valid_starting_on asc rows between unbounded preceding and current row) as components\n\n         \n\n        -- grab the value that started this batch/partition\n        , first_value( story_points ) over (\n            partition by issue_id, story_points_field_partition \n            order by valid_starting_on asc rows between unbounded preceding and current row) as story_points\n\n        \n\n    from set_values\n\n)\n\nselect *\nfrom fill_values", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__field_history_scd\""}, "model.jira.int_jira__combine_field_histories": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        partition_by = {'field': 'valid_starting_on', 'data_type': 'date'}\n            if target.type != 'spark' else ['valid_starting_on'],\n        unique_key='combined_history_id',\n        incremental_strategy = 'merge',\n        file_format = 'delta'\n    )\n}}\n\nwith issue_field_history as (\n\n    select * from {{ ref('int_jira__issue_field_history') }}\n\n    {% if is_incremental() %}\n    where cast( updated_at as date) >= (select max(valid_starting_on) from {{ this }} )\n    {% endif %}\n),\n\nissue_multiselect_batch_history as (\n\n    select * from {{ ref('int_jira__agg_multiselect_history') }}\n\n    {% if is_incremental() %}\n    where cast( updated_at as date) >= (select max(valid_starting_on) from {{ this }} )\n    {% endif %}\n),\n\ncombine_field_history as (\n-- combining all the field histories together\n    select \n        field_id,\n        issue_id,\n        updated_at,\n        field_value,\n        field_name\n\n    from issue_field_history\n\n    union all\n\n    select \n        field_id,\n        issue_id,\n        updated_at,\n        field_values as field_value, -- this is an aggregated list but we'll just call it field_value\n        field_name\n\n    from issue_multiselect_batch_history\n),\n\nget_valid_dates as (\n\n\n    select \n        field_id,\n        issue_id,\n        field_value,\n        field_name,\n        updated_at as valid_starting_at,\n\n        -- this value is valid until the next value is updated\n        lead(updated_at, 1) over(partition by issue_id, field_id order by updated_at asc) as valid_ending_at, \n\n        cast( {{ dbt_utils.date_trunc('day', 'updated_at') }} as date) as valid_starting_on\n\n    from combine_field_history\n\n),\n\nsurrogate_key as (\n\n    select \n    *,\n    {{ dbt_utils.surrogate_key(['field_id','issue_id', 'valid_starting_at']) }} as combined_history_id\n\n    from get_valid_dates\n\n)\n\nselect * from surrogate_key", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.date_trunc", "macro.dbt_utils.surrogate_key"], "nodes": ["model.jira.int_jira__issue_field_history", "model.jira.int_jira__agg_multiselect_history"]}, "config": {"enabled": true, "alias": null, "schema": "int_jira", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "partition_by": {"field": "valid_starting_on", "data_type": "date"}, "unique_key": "combined_history_id", "incremental_strategy": "merge", "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_int_jira", "fqn": ["jira", "intermediate", "field_history", "int_jira__combine_field_histories"], "unique_id": "model.jira.int_jira__combine_field_histories", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "intermediate/field_history/int_jira__combine_field_histories.sql", "original_file_path": "models/intermediate/field_history/int_jira__combine_field_histories.sql", "name": "int_jira__combine_field_histories", "alias": "int_jira__combine_field_histories", "checksum": {"name": "sha256", "checksum": "d4351ec02c93ea2d3017c085560cf87a4b763f48e28877326bd20eb235f4e4ac"}, "tags": [], "refs": [["int_jira__issue_field_history"], ["int_jira__agg_multiselect_history"]], "sources": [], "description": "Table combining `issue_field_history` with the aggregated `issue_multiselect_history`.", "columns": {"field_id": {"name": "field_id", "description": "Foreign key referencing the unique ID of the `field` that was changed.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_id": {"name": "issue_id", "description": "Foreign key referencing the ID of the `issue` whose field was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "field_value": {"name": "field_value", "description": "A singular or comma-separated list of field values, depending on if the field is an array type. Note: these values are IDs referencing either `field_option`, `sprint`, `issue` (ie for epics), `user` (ie for assignees), etc. This depends  on what the field is (the value could also be a date, a freeform description, etc).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_starting_at": {"name": "valid_starting_at", "description": "Timestamp of when the field was updated to this value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_ending_at": {"name": "valid_ending_at", "description": "Timestamp of when the field was updated to a new value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_starting_on": {"name": "valid_starting_on", "description": "Calendar date of when the field was changed to this value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "combined_history_id": {"name": "combined_history_id", "description": "Unique ID hashed on `field_id`, `issue_id`, and `valid_starting_at`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "field_name": {"name": "field_name", "description": "Name of the field as it appears on issue cards.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira://models/intermediate/int_jira.yml", "compiled_path": "target/compiled/jira/models/intermediate/field_history/int_jira__combine_field_histories.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "int_jira", "partition_by": {"field": "valid_starting_on", "data_type": "date"}, "unique_key": "combined_history_id", "incremental_strategy": "merge", "file_format": "delta"}, "created_at": 1663707929.161118, "compiled_sql": "\n\nwith  __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    fields.field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),issue_field_history as (\n\n    select * from __dbt__cte__int_jira__issue_field_history\n\n    \n    where cast( updated_at as date) >= (select max(valid_starting_on) from \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__combine_field_histories\" )\n    \n),\n\nissue_multiselect_batch_history as (\n\n    select * from \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__agg_multiselect_history\"\n\n    \n    where cast( updated_at as date) >= (select max(valid_starting_on) from \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__combine_field_histories\" )\n    \n),\n\ncombine_field_history as (\n-- combining all the field histories together\n    select \n        field_id,\n        issue_id,\n        updated_at,\n        field_value,\n        field_name\n\n    from issue_field_history\n\n    union all\n\n    select \n        field_id,\n        issue_id,\n        updated_at,\n        field_values as field_value, -- this is an aggregated list but we'll just call it field_value\n        field_name\n\n    from issue_multiselect_batch_history\n),\n\nget_valid_dates as (\n\n\n    select \n        field_id,\n        issue_id,\n        field_value,\n        field_name,\n        updated_at as valid_starting_at,\n\n        -- this value is valid until the next value is updated\n        lead(updated_at, 1) over(partition by issue_id, field_id order by updated_at asc) as valid_ending_at, \n\n        cast( date_trunc('day', updated_at) as date) as valid_starting_on\n\n    from combine_field_history\n\n),\n\nsurrogate_key as (\n\n    select \n    *,\n    md5(cast(coalesce(cast(field_id as \n    varchar\n), '') || '-' || coalesce(cast(issue_id as \n    varchar\n), '') || '-' || coalesce(cast(valid_starting_at as \n    varchar\n), '') as \n    varchar\n)) as combined_history_id\n\n    from get_valid_dates\n\n)\n\nselect * from surrogate_key", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.jira.int_jira__issue_field_history", "sql": " __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    fields.field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n)"}], "relation_name": "\"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__combine_field_histories\""}, "model.jira.int_jira__issue_field_history": {"raw_sql": "with field_history as (\n\n    select *\n    from {{ var('issue_field_history') }}\n    \n), \n\nfields as (\n      \n    select *\n    from {{ var('field') }}\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    fields.field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.jira_source.stg_jira__issue_field_history", "model.jira_source.stg_jira__field"]}, "config": {"enabled": true, "alias": null, "schema": "int_jira", "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_int_jira", "fqn": ["jira", "intermediate", "field_history", "int_jira__issue_field_history"], "unique_id": "model.jira.int_jira__issue_field_history", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "intermediate/field_history/int_jira__issue_field_history.sql", "original_file_path": "models/intermediate/field_history/int_jira__issue_field_history.sql", "name": "int_jira__issue_field_history", "alias": "int_jira__issue_field_history", "checksum": {"name": "sha256", "checksum": "d8e251d57008c98c169d93e579cf9e00e6a5af3229a17702e21357bbf27a9070"}, "tags": [], "refs": [["stg_jira__issue_field_history"], ["stg_jira__field"]], "sources": [], "description": "Table of every value that each **custom non-array** (not multiselect) field has been set to. This model serves to append the `field_name` to each record.\n", "columns": {"field_id": {"name": "field_id", "description": "Foreign key referencing the ID of the `field` that was changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_id": {"name": "issue_id", "description": "Foreign key referencing the ID of the `issue` whose field was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the issue field was set to this value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "field_value": {"name": "field_value", "description": "Content of the value of that the field was set to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "field_name": {"name": "field_name", "description": "Name of the field as it appears on issue cards.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira://models/intermediate/int_jira.yml", "compiled_path": "target/compiled/jira/models/intermediate/field_history/int_jira__issue_field_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "schema": "int_jira"}, "created_at": 1663707929.165157, "compiled_sql": "with field_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    fields.field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.jira.int_jira__daily_field_history": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        partition_by = {'field': 'valid_starting_on', 'data_type': 'date'}\n            if target.type != 'spark' else ['valid_starting_on'],\n        unique_key='issue_field_day_id',\n        incremental_strategy = 'merge',\n        file_format = 'delta'\n    )\n}}\n\nwith combined_field_histories as (\n\n    select * \n    from {{ ref('int_jira__combine_field_histories') }}\n\n    {% if is_incremental() %}\n    where valid_starting_on >= (select max(valid_starting_on) from {{ this }} )\n    {% endif %}\n),\n\n\nlimit_to_relevant_fields as (\n\n-- let's remove unncessary rows moving forward and grab field names \n    select \n        combined_field_histories.*\n\n    from combined_field_histories\n\n    where lower(field_id) = 'status' \n            or lower(field_name) in ('sprint'\n            {%- for col in var('issue_field_history_columns', []) -%}\n                ,'{{ (col|lower) }}'\n            {%- endfor -%} )\n    \n),\n\norder_daily_values as (\n\n    select \n        *,\n\n        -- want to grab last value for an issue's field for each day\n        row_number() over (\n            partition by valid_starting_on, issue_id, field_id\n            order by valid_starting_at desc\n            ) as row_num\n\n    from limit_to_relevant_fields\n),\n\n-- only looking at the latest value for each day\nget_latest_daily_value as (\n\n    select * \n    from order_daily_values\n\n    where row_num = 1\n), \n\nfinal as (\n\n    select\n        field_id,\n        issue_id,\n        field_name,\n\n        -- doing this to figure out what values are actually null and what needs to be backfilled in jira__daily_issue_field_history\n        case when field_value is null then 'is_null' else field_value end as field_value,\n        valid_starting_at,\n        valid_ending_at, \n        valid_starting_on,\n\n        {{ dbt_utils.surrogate_key(['field_id','issue_id', 'valid_starting_on']) }} as issue_field_day_id\n        \n    from get_latest_daily_value\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.jira.int_jira__combine_field_histories"]}, "config": {"enabled": true, "alias": null, "schema": "int_jira", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "partition_by": {"field": "valid_starting_on", "data_type": "date"}, "unique_key": "issue_field_day_id", "incremental_strategy": "merge", "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_int_jira", "fqn": ["jira", "intermediate", "field_history", "int_jira__daily_field_history"], "unique_id": "model.jira.int_jira__daily_field_history", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "intermediate/field_history/int_jira__daily_field_history.sql", "original_file_path": "models/intermediate/field_history/int_jira__daily_field_history.sql", "name": "int_jira__daily_field_history", "alias": "int_jira__daily_field_history", "checksum": {"name": "sha256", "checksum": "efea6c5a4162bc6e6c6f4d170ac74bbe70a8010a917010631423281a5ed63c07"}, "tags": [], "refs": [["int_jira__combine_field_histories"]], "sources": [], "description": "Table in which each row represents the latest field value (for `sprint`, `status` and any columns specified by `issue_field_history_columns`) actively changed on a given day for each issue.\n", "columns": {"field_id": {"name": "field_id", "description": "Foreign key referencing the unique ID of the `field` that was changed.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_id": {"name": "issue_id", "description": "Foreign key referencing the ID of the `issue` whose field was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "field_value": {"name": "field_value", "description": "A singular or comma-separated list of field values, depending on if the field is an array type. Note: these values are IDs referencing either `field_option`, `sprint`, `issue` (ie for epics), `user` (ie for assignees), etc. This depends  on what the field is (the value could also be a date, a freeform description, etc).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "field_name": {"name": "field_name", "description": "Name of the field as it appears on issue cards.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_starting_at": {"name": "valid_starting_at", "description": "Timestamp of when the field was updated to this value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_ending_at": {"name": "valid_ending_at", "description": "Timestamp of when the field was updated to a new value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_starting_on": {"name": "valid_starting_on", "description": "Calendar date of when the field was changed to this value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_field_day_id": {"name": "issue_field_day_id", "description": "Unique ID hashed on `field_id`, `issue_id`,  and `valid_starting_on`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira://models/intermediate/int_jira.yml", "compiled_path": "target/compiled/jira/models/intermediate/field_history/int_jira__daily_field_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "int_jira", "partition_by": {"field": "valid_starting_on", "data_type": "date"}, "unique_key": "issue_field_day_id", "incremental_strategy": "merge", "file_format": "delta"}, "created_at": 1663707929.163166, "compiled_sql": "\n\nwith combined_field_histories as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__combine_field_histories\"\n\n    \n    where valid_starting_on >= (select max(valid_starting_on) from \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__daily_field_history\" )\n    \n),\n\n\nlimit_to_relevant_fields as (\n\n-- let's remove unncessary rows moving forward and grab field names \n    select \n        combined_field_histories.*\n\n    from combined_field_histories\n\n    where lower(field_id) = 'status' \n            or lower(field_name) in ('sprint','summary','components','story points')\n    \n),\n\norder_daily_values as (\n\n    select \n        *,\n\n        -- want to grab last value for an issue's field for each day\n        row_number() over (\n            partition by valid_starting_on, issue_id, field_id\n            order by valid_starting_at desc\n            ) as row_num\n\n    from limit_to_relevant_fields\n),\n\n-- only looking at the latest value for each day\nget_latest_daily_value as (\n\n    select * \n    from order_daily_values\n\n    where row_num = 1\n), \n\nfinal as (\n\n    select\n        field_id,\n        issue_id,\n        field_name,\n\n        -- doing this to figure out what values are actually null and what needs to be backfilled in jira__daily_issue_field_history\n        case when field_value is null then 'is_null' else field_value end as field_value,\n        valid_starting_at,\n        valid_ending_at, \n        valid_starting_on,\n\n        md5(cast(coalesce(cast(field_id as \n    varchar\n), '') || '-' || coalesce(cast(issue_id as \n    varchar\n), '') || '-' || coalesce(cast(valid_starting_on as \n    varchar\n), '') as \n    varchar\n)) as issue_field_day_id\n        \n    from get_latest_daily_value\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__daily_field_history\""}, "model.jira_source.stg_jira__comment": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_jira__comment_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_jira__comment_tmp')),\n                staging_columns=get_comment_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        author_id as author_user_id,\n        body,\n        cast(created as {{ dbt_utils.type_timestamp() }}) as created_at,\n        id as comment_id,\n        issue_id,\n        is_public,\n        update_author_id as last_update_user_id,\n        cast(updated as {{ dbt_utils.type_timestamp() }}) as last_updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.jira_source.get_comment_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_timestamp"], "nodes": ["model.jira_source.stg_jira__comment_tmp", "model.jira_source.stg_jira__comment_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "stg_jira__comment"], "unique_id": "model.jira_source.stg_jira__comment", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "stg_jira__comment.sql", "original_file_path": "models/stg_jira__comment.sql", "name": "stg_jira__comment", "alias": "stg_jira__comment", "checksum": {"name": "sha256", "checksum": "7e029c5a1c0c52422024b8b556ae4d00c74d2775ecc2c58a8dda0e62e399d854"}, "tags": [], "refs": [["stg_jira__comment_tmp"], ["stg_jira__comment_tmp"]], "sources": [], "description": "Table of comments made on issues.", "columns": {"comment_id": {"name": "comment_id", "description": "Unique ID of the comment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "author_user_id": {"name": "author_user_id", "description": "Foreign key referencing the `user` id of the comment's author.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "body": {"name": "body", "description": "Content of the comment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the comment was created. TODO - get timezone clarification", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_public": {"name": "is_public", "description": "Boolean that is true if the comment is visible to all users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_id": {"name": "issue_id", "description": "Foreign key referencing the id of the `issue` that was commented on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_update_user_id": {"name": "last_update_user_id", "description": "Foreign key referencing the id of the `user` who last updated this comment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_updated_at": {"name": "last_updated_at", "description": "Timestamp of when the comment was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira_source://models/stg_jira.yml", "compiled_path": "target/compiled/jira_source/models/stg_jira__comment.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira_source"}, "created_at": 1663707929.2167091, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__comment_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    author_id\n    \n as \n    \n    author_id\n    \n, \n    \n    \n    body\n    \n as \n    \n    body\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_public\n    \n as \n    \n    is_public\n    \n, \n    \n    \n    issue_id\n    \n as \n    \n    issue_id\n    \n, \n    \n    \n    update_author_id\n    \n as \n    \n    update_author_id\n    \n, \n    \n    \n    updated\n    \n as \n    \n    updated\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        author_id as author_user_id,\n        body,\n        cast(created as \n    timestamp without time zone\n) as created_at,\n        id as comment_id,\n        issue_id,\n        is_public,\n        update_author_id as last_update_user_id,\n        cast(updated as \n    timestamp without time zone\n) as last_updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__comment\""}, "model.jira_source.stg_jira__project": {"raw_sql": "with base as (\n    \n    select *\n    from {{ ref('stg_jira__project_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_jira__project_tmp')),\n                staging_columns=get_project_columns()\n            )\n        }}\n    from base\n\n),\n\nfinal as (\n\n    select \n        description as project_description,\n        id as project_id,\n        key as project_key,\n        lead_id as project_lead_user_id,\n        name as project_name,\n        project_category_id,\n        permission_scheme_id,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.jira_source.get_project_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.jira_source.stg_jira__project_tmp", "model.jira_source.stg_jira__project_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "stg_jira__project"], "unique_id": "model.jira_source.stg_jira__project", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "stg_jira__project.sql", "original_file_path": "models/stg_jira__project.sql", "name": "stg_jira__project", "alias": "stg_jira__project", "checksum": {"name": "sha256", "checksum": "b79355d418e10ba5291f50718372e85750c439981b28e786fd401fe7d51bd6fb"}, "tags": [], "refs": [["stg_jira__project_tmp"], ["stg_jira__project_tmp"]], "sources": [], "description": "Table of all projects in your organization.", "columns": {"project_id": {"name": "project_id", "description": "Unique ID of the project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_description": {"name": "project_description", "description": "Description of the project, if given.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_key": {"name": "project_key", "description": "UI-facing ID of the project. This becomes the default prefix for tasks created within this project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_lead_user_id": {"name": "project_lead_user_id", "description": "Foreign key referencing the ID of the `user` who leads this project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_name": {"name": "project_name", "description": "Title of the project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "permission_scheme_id": {"name": "permission_scheme_id", "description": "Foreign key referencing the ID of the `permission_scheme` that the project ascribes to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_category_id": {"name": "project_category_id", "description": "Foreign key referencing the ID of the `project_category` that the project is associated with, if any.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira_source://models/stg_jira.yml", "compiled_path": "target/compiled/jira_source/models/stg_jira__project.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira_source"}, "created_at": 1663707929.226783, "compiled_sql": "with base as (\n    \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__project_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    key\n    \n as \n    \n    key\n    \n, \n    \n    \n    lead_id\n    \n as \n    \n    lead_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    permission_scheme_id\n    \n as \n    \n    permission_scheme_id\n    \n, \n    \n    \n    project_category_id\n    \n as \n    \n    project_category_id\n    \n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select \n        description as project_description,\n        id as project_id,\n        key as project_key,\n        lead_id as project_lead_user_id,\n        name as project_name,\n        project_category_id,\n        permission_scheme_id,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__project\""}, "model.jira_source.stg_jira__issue_field_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_jira__issue_field_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_jira__issue_field_history_tmp')),\n                staging_columns=get_issue_field_history_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(field_id as {{ dbt_utils.type_string() }}) as field_id,\n        issue_id,\n        {% if target.type == 'snowflake' -%}\n        cast(\"TIME\" as {{ dbt_utils.type_timestamp() }})\n        {% elif target.type == 'redshift' -%}\n        cast(\"time\"  as {{ dbt_utils.type_timestamp() }})\n        {% else -%}\n        cast(time as {{ dbt_utils.type_timestamp() }})\n        {% endif %} as updated_at,\n        value as field_value,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.jira_source.get_issue_field_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp"], "nodes": ["model.jira_source.stg_jira__issue_field_history_tmp", "model.jira_source.stg_jira__issue_field_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "stg_jira__issue_field_history"], "unique_id": "model.jira_source.stg_jira__issue_field_history", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "stg_jira__issue_field_history.sql", "original_file_path": "models/stg_jira__issue_field_history.sql", "name": "stg_jira__issue_field_history", "alias": "stg_jira__issue_field_history", "checksum": {"name": "sha256", "checksum": "9994da4b11053a63d4f20c0f85dd5aafbb13af04dc0759f7497697979e67b958"}, "tags": [], "refs": [["stg_jira__issue_field_history_tmp"], ["stg_jira__issue_field_history_tmp"]], "sources": [], "description": "Table of every value that each **custom non-array** (not multiselect) field has been set to.", "columns": {"field_id": {"name": "field_id", "description": "Foreign key referencing the ID of the `field` that was changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_id": {"name": "issue_id", "description": "Foreign key referencing the ID of the `issue` whose field was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the issue field was set to this value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "field_value": {"name": "field_value", "description": "Content of the value of that the field was set to.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira_source://models/stg_jira.yml", "compiled_path": "target/compiled/jira_source/models/stg_jira__issue_field_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira_source"}, "created_at": 1663707929.223414, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_field_history_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    field_id\n    \n as \n    \n    field_id\n    \n, \n    \n    \n    issue_id\n    \n as \n    \n    issue_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n, \n    \n    \n    time\n    \n as \n    \n    time\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(field_id as \n    varchar\n) as field_id,\n        issue_id,\n        cast(time as \n    timestamp without time zone\n)\n         as updated_at,\n        value as field_value,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_field_history\""}, "model.jira_source.stg_jira__version": {"raw_sql": "{{ config(enabled=var('jira_using_versions', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_jira__version_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_jira__version_tmp')),\n                staging_columns=get_version_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        archived as is_archived,\n        description,\n        id as version_id,\n        name as version_name,\n        overdue as is_overdue,\n        project_id,\n        cast(release_date as {{ dbt_utils.type_timestamp() }}) as release_date,\n        released as is_released,\n        cast(start_date as {{ dbt_utils.type_timestamp() }}) as start_date\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.jira_source.get_version_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_timestamp"], "nodes": ["model.jira_source.stg_jira__version_tmp", "model.jira_source.stg_jira__version_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "stg_jira__version"], "unique_id": "model.jira_source.stg_jira__version", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "stg_jira__version.sql", "original_file_path": "models/stg_jira__version.sql", "name": "stg_jira__version", "alias": "stg_jira__version", "checksum": {"name": "sha256", "checksum": "8fc176416dc472dcc7b32386472384590d426f399fe034616c97f111701fbe4a"}, "tags": [], "refs": [["stg_jira__version_tmp"], ["stg_jira__version_tmp"]], "sources": [], "description": "Table of project versions in your organization.", "columns": {"is_archived": {"name": "is_archived", "description": "Boolean that is true if the project version has been archived.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "The optional description given to the version.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_id": {"name": "version_id", "description": "Unique ID of the version.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version_name": {"name": "version_name", "description": "Unique name of the version.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_overdue": {"name": "is_overdue", "description": "Boolean that is true if the version is past its optional release date, false if it is not or if it does not have a due date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_id": {"name": "project_id", "description": "Foreign key referencing the `PROJECT` to which this version is attached.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "release_date": {"name": "release_date", "description": "The optional release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_released": {"name": "is_released", "description": "Boolean that is true if the version has been released. If the version is released a request to release again is ignored", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira_source://models/stg_jira.yml", "compiled_path": "target/compiled/jira_source/models/stg_jira__version.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira_source", "enabled": true}, "created_at": 1663707929.23265, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__version_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    archived\n    \n as \n    \n    archived\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    overdue\n    \n as \n    \n    overdue\n    \n, \n    \n    \n    project_id\n    \n as \n    \n    project_id\n    \n, \n    \n    \n    release_date\n    \n as \n    \n    release_date\n    \n, \n    \n    \n    released\n    \n as \n    \n    released\n    \n, \n    \n    \n    start_date\n    \n as \n    \n    start_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        archived as is_archived,\n        description,\n        id as version_id,\n        name as version_name,\n        overdue as is_overdue,\n        project_id,\n        cast(release_date as \n    timestamp without time zone\n) as release_date,\n        released as is_released,\n        cast(start_date as \n    timestamp without time zone\n) as start_date\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__version\""}, "model.jira_source.stg_jira__sprint": {"raw_sql": "{{ config(enabled=var('jira_using_sprints', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_jira__sprint_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_jira__sprint_tmp')),\n                staging_columns=get_sprint_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as sprint_id,\n        name as sprint_name,\n        board_id,\n        cast(complete_date as {{ dbt_utils.type_timestamp() }}) as completed_at,\n        cast(end_date as {{ dbt_utils.type_timestamp() }}) as ended_at,\n        cast(start_date as {{ dbt_utils.type_timestamp() }}) as started_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.jira_source.get_sprint_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_timestamp"], "nodes": ["model.jira_source.stg_jira__sprint_tmp", "model.jira_source.stg_jira__sprint_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "stg_jira__sprint"], "unique_id": "model.jira_source.stg_jira__sprint", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "stg_jira__sprint.sql", "original_file_path": "models/stg_jira__sprint.sql", "name": "stg_jira__sprint", "alias": "stg_jira__sprint", "checksum": {"name": "sha256", "checksum": "4f918dc4b55a375be7a8706f535e334000d962c679f1c5230b6a3589e1983e41"}, "tags": [], "refs": [["stg_jira__sprint_tmp"], ["stg_jira__sprint_tmp"]], "sources": [], "description": "Table of all sprints.", "columns": {"sprint_id": {"name": "sprint_id", "description": "Unique ID of the sprint.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "board_id": {"name": "board_id", "description": "Foreign key referencing the ID of the `board` that the sprint lives in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "completed_at": {"name": "completed_at", "description": "Timestamp of when the sprint was completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ended_at": {"name": "ended_at", "description": "Timestamp of when the sprint is planned to end.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sprint_name": {"name": "sprint_name", "description": "Title of the sprint.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "started_at": {"name": "started_at", "description": "Timestamp of when the sprint began.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira_source://models/stg_jira.yml", "compiled_path": "target/compiled/jira_source/models/stg_jira__sprint.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira_source", "enabled": true}, "created_at": 1663707929.2284632, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__sprint_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    board_id\n    \n as \n    \n    board_id\n    \n, \n    \n    \n    complete_date\n    \n as \n    \n    complete_date\n    \n, \n    \n    \n    end_date\n    \n as \n    \n    end_date\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    start_date\n    \n as \n    \n    start_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as sprint_id,\n        name as sprint_name,\n        board_id,\n        cast(complete_date as \n    timestamp without time zone\n) as completed_at,\n        cast(end_date as \n    timestamp without time zone\n) as ended_at,\n        cast(start_date as \n    timestamp without time zone\n) as started_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__sprint\""}, "model.jira_source.stg_jira__field_option": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_jira__field_option_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_jira__field_option_tmp')),\n                staging_columns=get_field_option_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as field_id,\n        parent_id as parent_field_id,\n        name as field_option_name\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.jira_source.get_field_option_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.jira_source.stg_jira__field_option_tmp", "model.jira_source.stg_jira__field_option_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "stg_jira__field_option"], "unique_id": "model.jira_source.stg_jira__field_option", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "stg_jira__field_option.sql", "original_file_path": "models/stg_jira__field_option.sql", "name": "stg_jira__field_option", "alias": "stg_jira__field_option", "checksum": {"name": "sha256", "checksum": "372831d5053442361060ecc3c2dd39b37922f6cca8ed5748c6b5d06fb6f458e5"}, "tags": [], "refs": [["stg_jira__field_option_tmp"], ["stg_jira__field_option_tmp"]], "sources": [], "description": "Table of all options related to custom fields.", "columns": {"field_id": {"name": "field_id", "description": "The ID of the custom field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_field_id": {"name": "parent_field_id", "description": "The ID of the parent custom field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "field_option_name": {"name": "field_option_name", "description": "Name of the field option.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira_source://models/stg_jira.yml", "compiled_path": "target/compiled/jira_source/models/stg_jira__field_option.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira_source"}, "created_at": 1663707929.2188952, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field_option_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    cast(null as \n    int\n) as \n    \n    parent_id\n    \n , \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as field_id,\n        parent_id as parent_field_id,\n        name as field_option_name\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field_option\""}, "model.jira_source.stg_jira__field": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_jira__field_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_jira__field_tmp')),\n                staging_columns=get_field_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as {{ dbt_utils.type_string() }}) as field_id,\n        is_array,\n        is_custom,\n        name as field_name,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.jira_source.get_field_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_string"], "nodes": ["model.jira_source.stg_jira__field_tmp", "model.jira_source.stg_jira__field_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "stg_jira__field"], "unique_id": "model.jira_source.stg_jira__field", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "stg_jira__field.sql", "original_file_path": "models/stg_jira__field.sql", "name": "stg_jira__field", "alias": "stg_jira__field", "checksum": {"name": "sha256", "checksum": "bd9e1203d72fee62d517f29766a023fa75369dcfc43dd22d1c18a5b0ee6e430e"}, "tags": [], "refs": [["stg_jira__field_tmp"], ["stg_jira__field_tmp"]], "sources": [], "description": "Table of all issue fields.", "columns": {"field_id": {"name": "field_id", "description": "Unique ID of the field. Default fields will have descriptive IDs, whereas custom field IDs will be `'customfield_#####'`.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_array": {"name": "is_array", "description": "Boolean that is true if a field can have multiple values (is mulitselect).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_custom": {"name": "is_custom", "description": "Boolean that is true if the field is custom to this organization, and false if  it is default to Jira.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "field_name": {"name": "field_name", "description": "Name of the field as it appears on issue cards.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira_source://models/stg_jira.yml", "compiled_path": "target/compiled/jira_source/models/stg_jira__field.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira_source"}, "created_at": 1663707929.218198, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    cast(null as boolean) as \n    \n    is_array\n    \n , \n    cast(null as boolean) as \n    \n    is_custom\n    \n , \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as \n    varchar\n) as field_id,\n        is_array,\n        is_custom,\n        name as field_name,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\""}, "model.jira_source.stg_jira__resolution": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_jira__resolution_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_jira__resolution_tmp')),\n                staging_columns=get_resolution_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        description as resolution_description,\n        id as resolution_id,\n        name as resolution_name,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.jira_source.get_resolution_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.jira_source.stg_jira__resolution_tmp", "model.jira_source.stg_jira__resolution_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "stg_jira__resolution"], "unique_id": "model.jira_source.stg_jira__resolution", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "stg_jira__resolution.sql", "original_file_path": "models/stg_jira__resolution.sql", "name": "stg_jira__resolution", "alias": "stg_jira__resolution", "checksum": {"name": "sha256", "checksum": "df0a7fee42db70dbcfb35b1451336d745203a8ecdad4151617aae411dcf3ca5d"}, "tags": [], "refs": [["stg_jira__resolution_tmp"], ["stg_jira__resolution_tmp"]], "sources": [], "description": "Table storing the types of resolutions used by your organization.", "columns": {"resolution_id": {"name": "resolution_id", "description": "Unique ID of the resolution type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "resolution_description": {"name": "resolution_description", "description": "Description given to the resolution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "resolution_name": {"name": "resolution_name", "description": "Display name of the resolution.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira_source://models/stg_jira.yml", "compiled_path": "target/compiled/jira_source/models/stg_jira__resolution.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira_source"}, "created_at": 1663707929.227396, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__resolution_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        description as resolution_description,\n        id as resolution_id,\n        name as resolution_name,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__resolution\""}, "model.jira_source.stg_jira__status": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_jira__status_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_jira__status_tmp')),\n                staging_columns=get_status_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n\n    select\n        description as status_description,\n        id as status_id,\n        name as status_name,\n        status_category_id,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.jira_source.get_status_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.jira_source.stg_jira__status_tmp", "model.jira_source.stg_jira__status_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "stg_jira__status"], "unique_id": "model.jira_source.stg_jira__status", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "stg_jira__status.sql", "original_file_path": "models/stg_jira__status.sql", "name": "stg_jira__status", "alias": "stg_jira__status", "checksum": {"name": "sha256", "checksum": "648c813903f25664f0814e811e0d78023933601777f17ad4ee32a831477bc6e6"}, "tags": [], "refs": [["stg_jira__status_tmp"], ["stg_jira__status_tmp"]], "sources": [], "description": "Table of project-level statuses (which may have the same umbrella `status_category`).", "columns": {"status_id": {"name": "status_id", "description": "Unique ID of the project status.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status_description": {"name": "status_description", "description": "Description of the project status. Different projects may all have a status called \"Backlog\", but their definitions  of \"backlog\" may differ.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status_name": {"name": "status_name", "description": "Title of the status.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status_category_id": {"name": "status_category_id", "description": "Foreign key referencing the ID of the `status_category` that this project status falls under.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira_source://models/stg_jira.yml", "compiled_path": "target/compiled/jira_source/models/stg_jira__status.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira_source"}, "created_at": 1663707929.229252, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__status_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    status_category_id\n    \n as \n    \n    status_category_id\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        description as status_description,\n        id as status_id,\n        name as status_name,\n        status_category_id,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__status\""}, "model.jira_source.stg_jira__issue": {"raw_sql": "with base as (\n    \n    select * \n    from {{ ref('stg_jira__issue_tmp') }}\n    where not coalesce(_fivetran_deleted, false)\n),\n\nfields as (\n\n    select \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_jira__issue_tmp')),\n                staging_columns=get_issue_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n\n    select\n        coalesce(original_estimate, _original_estimate) as original_estimate_seconds,\n        coalesce(remaining_estimate, _remaining_estimate) as remaining_estimate_seconds,\n        coalesce(time_spent, _time_spent) as time_spent_seconds,\n        assignee as assignee_user_id,\n        cast(created as {{ dbt_utils.type_timestamp() }}) as created_at,\n        cast(resolved  as {{ dbt_utils.type_timestamp() }}) as resolved_at,\n        creator as creator_user_id,\n        description as issue_description,\n        due_date,\n        environment,\n        id as issue_id,\n        issue_type as issue_type_id,\n        key as issue_key,\n        parent_id as parent_issue_id,\n        priority as priority_id,\n        project as project_id,\n        reporter as reporter_user_id,\n        resolution as resolution_id,\n        status as status_id,\n        cast(status_category_changed as {{ dbt_utils.type_timestamp() }}) as status_changed_at,\n        summary as issue_name,\n        cast(updated as {{ dbt_utils.type_timestamp() }}) as updated_at,\n        work_ratio,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.jira_source.get_issue_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_timestamp"], "nodes": ["model.jira_source.stg_jira__issue_tmp", "model.jira_source.stg_jira__issue_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "stg_jira__issue"], "unique_id": "model.jira_source.stg_jira__issue", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "stg_jira__issue.sql", "original_file_path": "models/stg_jira__issue.sql", "name": "stg_jira__issue", "alias": "stg_jira__issue", "checksum": {"name": "sha256", "checksum": "430bf9c492bbbb367e70a192ab4b4b42d9a2891252aeb37dd1dec71dfd42d2b1"}, "tags": [], "refs": [["stg_jira__issue_tmp"], ["stg_jira__issue_tmp"]], "sources": [], "description": "Table of all issues in your organization's Jira (captures soft deletes).", "columns": {"issue_id": {"name": "issue_id", "description": "Unique ID of the issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assignee_user_id": {"name": "assignee_user_id", "description": "Foreign key referencing the ID of the `user` currently assigned to this task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_at": {"name": "created_at", "description": "Timestamp of when the issue was created (in UTC).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creator_user_id": {"name": "creator_user_id", "description": "Foreign key referencing the `user` who first created the issue. Cannot be changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_description": {"name": "issue_description", "description": "The issue description, if given.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "Calendar day on which the issue is due, if a due date is provided.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "environment": {"name": "environment", "description": "Text field describing the environment in which the issue occurred (ie \"IE9 on Windows 7\").", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_type_id": {"name": "issue_type_id", "description": "Foreign key referencing the ID of the `issue_type`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_key": {"name": "issue_key", "description": "UI-facing id of the issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_estimate_seconds": {"name": "original_estimate_seconds", "description": "The original estimate of how long working on this issue would take, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_issue_id": {"name": "parent_issue_id", "description": "Self-referencing ID of the parent `issue`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "priority_id": {"name": "priority_id", "description": "Foreign key referencing the ID of the issue's current `priority`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_id": {"name": "project_id", "description": "Foreign key referencing the ID of the `project` that the issue belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "remaining_estimate_seconds": {"name": "remaining_estimate_seconds", "description": "The estimate of how much longer working on this issue will take, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reporter_user_id": {"name": "reporter_user_id", "description": "Foreign key referencing the ID of the `user` who reported the issue. This differs from the `creator` column  in that the reporter can be changed in-app.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "resolution_id": {"name": "resolution_id", "description": "Foreign key referencing the ID of the issue's type of `resolution`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "resolved_at": {"name": "resolved_at", "description": "Timestamp of when the issue was resolved (ie completed, marked as duplicate). If an issue is un-resolved, this will be null.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status_id": {"name": "status_id", "description": "Foreign key referencing the ID of the issue's `status` (the step that the issue is currently at  in the project's workflow).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status_changed_at": {"name": "status_changed_at", "description": "Timestamp of when the status was last changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_name": {"name": "issue_name", "description": "Title of the issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_spent_seconds": {"name": "time_spent_seconds", "description": "The time that was spent working on this issue, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the issue was last updated in some way.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "work_ratio": {"name": "work_ratio", "description": "The percentage of work that has been logged against the issue (time_spent) vs the original estimate of worktime. Equals -1.0 when the fields required for calculation are not provided.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira_source://models/stg_jira.yml", "compiled_path": "target/compiled/jira_source/models/stg_jira__issue.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira_source"}, "created_at": 1663707929.2226079, "compiled_sql": "with base as (\n    \n    select * \n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_tmp\"\n    where not coalesce(_fivetran_deleted, false)\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _original_estimate\n    \n as \n    \n    _original_estimate\n    \n, \n    \n    \n    _remaining_estimate\n    \n as \n    \n    _remaining_estimate\n    \n, \n    \n    \n    _time_spent\n    \n as \n    \n    _time_spent\n    \n, \n    \n    \n    assignee\n    \n as \n    \n    assignee\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    creator\n    \n as \n    \n    creator\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    environment\n    \n as \n    \n    environment\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    issue_type\n    \n as \n    \n    issue_type\n    \n, \n    \n    \n    key\n    \n as \n    \n    key\n    \n, \n    \n    \n    original_estimate\n    \n as \n    \n    original_estimate\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n, \n    \n    \n    priority\n    \n as \n    \n    priority\n    \n, \n    \n    \n    project\n    \n as \n    \n    project\n    \n, \n    \n    \n    remaining_estimate\n    \n as \n    \n    remaining_estimate\n    \n, \n    \n    \n    reporter\n    \n as \n    \n    reporter\n    \n, \n    \n    \n    resolution\n    \n as \n    \n    resolution\n    \n, \n    \n    \n    resolved\n    \n as \n    \n    resolved\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    status_category_changed\n    \n as \n    \n    status_category_changed\n    \n, \n    \n    \n    summary\n    \n as \n    \n    summary\n    \n, \n    \n    \n    time_spent\n    \n as \n    \n    time_spent\n    \n, \n    \n    \n    updated\n    \n as \n    \n    updated\n    \n, \n    \n    \n    work_ratio\n    \n as \n    \n    work_ratio\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        coalesce(original_estimate, _original_estimate) as original_estimate_seconds,\n        coalesce(remaining_estimate, _remaining_estimate) as remaining_estimate_seconds,\n        coalesce(time_spent, _time_spent) as time_spent_seconds,\n        assignee as assignee_user_id,\n        cast(created as \n    timestamp without time zone\n) as created_at,\n        cast(resolved  as \n    timestamp without time zone\n) as resolved_at,\n        creator as creator_user_id,\n        description as issue_description,\n        due_date,\n        environment,\n        id as issue_id,\n        issue_type as issue_type_id,\n        key as issue_key,\n        parent_id as parent_issue_id,\n        priority as priority_id,\n        project as project_id,\n        reporter as reporter_user_id,\n        resolution as resolution_id,\n        status as status_id,\n        cast(status_category_changed as \n    timestamp without time zone\n) as status_changed_at,\n        summary as issue_name,\n        cast(updated as \n    timestamp without time zone\n) as updated_at,\n        work_ratio,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue\""}, "model.jira_source.stg_jira__status_category": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_jira__status_category_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_jira__status_category_tmp')),\n                staging_columns=get_status_category_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as status_category_id,\n        name as status_category_name\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.jira_source.get_status_category_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.jira_source.stg_jira__status_category_tmp", "model.jira_source.stg_jira__status_category_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "stg_jira__status_category"], "unique_id": "model.jira_source.stg_jira__status_category", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "stg_jira__status_category.sql", "original_file_path": "models/stg_jira__status_category.sql", "name": "stg_jira__status_category", "alias": "stg_jira__status_category", "checksum": {"name": "sha256", "checksum": "f260e226e6da3a826497305326ddf19c4464f0f7c052f70251d11f7a641a5aa0"}, "tags": [], "refs": [["stg_jira__status_category_tmp"], ["stg_jira__status_category_tmp"]], "sources": [], "description": "Table of umbrella status categories.", "columns": {"status_category_id": {"name": "status_category_id", "description": "Unique ID of the status category.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status_category_name": {"name": "status_category_name", "description": "Title of the status category.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira_source://models/stg_jira.yml", "compiled_path": "target/compiled/jira_source/models/stg_jira__status_category.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira_source"}, "created_at": 1663707929.229881, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__status_category_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as status_category_id,\n        name as status_category_name\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__status_category\""}, "model.jira_source.stg_jira__issue_multiselect_history": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_jira__issue_multiselect_history_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_jira__issue_multiselect_history_tmp')),\n                staging_columns=get_issue_multiselect_history_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        cast(field_id as {{ dbt_utils.type_string() }}) as field_id,\n        issue_id,\n        {% if target.type == 'snowflake' %}\n        cast(\"TIME\" as {{ dbt_utils.type_timestamp() }})\n        {% elif target.type == 'redshift' %}\n        cast(\"time\" as {{ dbt_utils.type_timestamp() }})\n        {% else %}\n        cast(time as {{ dbt_utils.type_timestamp() }})\n        {% endif %} as updated_at,\n        value as field_value,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.jira_source.get_issue_multiselect_history_columns", "macro.fivetran_utils.fill_staging_columns", "macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp"], "nodes": ["model.jira_source.stg_jira__issue_multiselect_history_tmp", "model.jira_source.stg_jira__issue_multiselect_history_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "stg_jira__issue_multiselect_history"], "unique_id": "model.jira_source.stg_jira__issue_multiselect_history", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "stg_jira__issue_multiselect_history.sql", "original_file_path": "models/stg_jira__issue_multiselect_history.sql", "name": "stg_jira__issue_multiselect_history", "alias": "stg_jira__issue_multiselect_history", "checksum": {"name": "sha256", "checksum": "c9fd53a4b2b6b8f6bd365064c89d1ca7014757553a7dd767a378e23240bf9420"}, "tags": [], "refs": [["stg_jira__issue_multiselect_history_tmp"], ["stg_jira__issue_multiselect_history_tmp"]], "sources": [], "description": "Table of every value that each array-type (multiselect) field has been set to. Each row will pertain to **one** value.\n", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Fivetran-generated ID hashed on field, issue, and value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Timestamp of when the issue field was updated to included this value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "field_id": {"name": "field_id", "description": "Foreign key referencing the ID of the `field` that was changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_id": {"name": "issue_id", "description": "Foreign key referencing the ID of the `issue` whose field was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "field_value": {"name": "field_value", "description": "Content of the value of that the field was set to.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira_source://models/stg_jira.yml", "compiled_path": "target/compiled/jira_source/models/stg_jira__issue_multiselect_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira_source"}, "created_at": 1663707929.2242692, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_multiselect_history_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    field_id\n    \n as \n    \n    field_id\n    \n, \n    \n    \n    issue_id\n    \n as \n    \n    issue_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n, \n    \n    \n    time\n    \n as \n    \n    time\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        cast(field_id as \n    varchar\n) as field_id,\n        issue_id,\n        \n        cast(time as \n    timestamp without time zone\n)\n         as updated_at,\n        value as field_value,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_multiselect_history\""}, "model.jira_source.stg_jira__issue_type": {"raw_sql": "with base as (\n\n    select * from \n    {{ ref('stg_jira__issue_type_tmp') }}\n),\n\nfields as (\n\n    select \n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_jira__issue_type_tmp')),\n                staging_columns=get_issue_type_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n\n    select\n        description,\n        id as issue_type_id,\n        name as issue_type_name,\n        subtask as is_subtask,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.jira_source.get_issue_type_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.jira_source.stg_jira__issue_type_tmp", "model.jira_source.stg_jira__issue_type_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "stg_jira__issue_type"], "unique_id": "model.jira_source.stg_jira__issue_type", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "stg_jira__issue_type.sql", "original_file_path": "models/stg_jira__issue_type.sql", "name": "stg_jira__issue_type", "alias": "stg_jira__issue_type", "checksum": {"name": "sha256", "checksum": "605f5eb9aee0eca280a7c9186d69c378ee3649cd35e495ed387e0a8c19b9cb64"}, "tags": [], "refs": [["stg_jira__issue_type_tmp"], ["stg_jira__issue_type_tmp"]], "sources": [], "description": "Table containing information about issue types. Issue types can have identical names in different projects, but they may have  differing descriptions.\n", "columns": {"issue_type_id": {"name": "issue_type_id", "description": "Unique ID of the issue type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Project-level description given to the issue type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_type_name": {"name": "issue_type_name", "description": "Name of the issue type (ie Epic, Task, Subtask, any custom types)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_subtask": {"name": "is_subtask", "description": "Boolean that is true if this type of issue is a subtask.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira_source://models/stg_jira.yml", "compiled_path": "target/compiled/jira_source/models/stg_jira__issue_type.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira_source"}, "created_at": 1663707929.224998, "compiled_sql": "with base as (\n\n    select * from \n    \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_type_tmp\"\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    subtask\n    \n as \n    \n    subtask\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        description,\n        id as issue_type_id,\n        name as issue_type_name,\n        subtask as is_subtask,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_type\""}, "model.jira_source.stg_jira__issue_link": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_jira__issue_link_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_jira__issue_link_tmp')),\n                staging_columns=get_issue_link_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        issue_id,\n        related_issue_id,\n        relationship,\n        _fivetran_synced \n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.jira_source.get_issue_link_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.jira_source.stg_jira__issue_link_tmp", "model.jira_source.stg_jira__issue_link_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "stg_jira__issue_link"], "unique_id": "model.jira_source.stg_jira__issue_link", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "stg_jira__issue_link.sql", "original_file_path": "models/stg_jira__issue_link.sql", "name": "stg_jira__issue_link", "alias": "stg_jira__issue_link", "checksum": {"name": "sha256", "checksum": "7b8846ace343b3984c16bccb1a7bc2f49c6eef1547dec7a2fbcb1a206daff5bb"}, "tags": [], "refs": [["stg_jira__issue_link_tmp"], ["stg_jira__issue_link_tmp"]], "sources": [], "description": "Table of relationships (links) created between issues. Issue links can include blockers, clones/duplicates, and general relationships.\n", "columns": {"issue_id": {"name": "issue_id", "description": "Foreign key referencing the ID of the `issue` that is the subject of this relationship (the linker).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "related_issue_id": {"name": "related_issue_id", "description": "Foreign key referencing the ID of the `issue` that is the object of this relationship (the linkee).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "relationship": {"name": "relationship", "description": "The nature of the link between the two issues (\"blocks\", \"is duplicated by\", \"relates to\", etc.)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira_source://models/stg_jira.yml", "compiled_path": "target/compiled/jira_source/models/stg_jira__issue_link.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira_source"}, "created_at": 1663707929.219479, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_link_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    issue_id\n    \n as \n    \n    issue_id\n    \n, \n    \n    \n    related_issue_id\n    \n as \n    \n    related_issue_id\n    \n, \n    \n    \n    relationship\n    \n as \n    \n    relationship\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        issue_id,\n        related_issue_id,\n        relationship,\n        _fivetran_synced \n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_link\""}, "model.jira_source.stg_jira__component": {"raw_sql": "{{ config(enabled=var('jira_using_components', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_jira__component_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_jira__component_tmp')),\n                staging_columns=get_component_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        description as component_description,\n        id as component_id,\n        name as component_name,\n        project_id,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.jira_source.get_component_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.jira_source.stg_jira__component_tmp", "model.jira_source.stg_jira__component_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "stg_jira__component"], "unique_id": "model.jira_source.stg_jira__component", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "stg_jira__component.sql", "original_file_path": "models/stg_jira__component.sql", "name": "stg_jira__component", "alias": "stg_jira__component", "checksum": {"name": "sha256", "checksum": "22f31e1f8c71e992171ead7a23e0c61d654dab19ebec7e227c741a704887783d"}, "tags": [], "refs": [["stg_jira__component_tmp"], ["stg_jira__component_tmp"]], "sources": [], "description": "Table of project components (subsections to group issues).", "columns": {"component_id": {"name": "component_id", "description": "ID of the component.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "component_description": {"name": "component_description", "description": "Description given to the component.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "component_name": {"name": "component_name", "description": "UI-facing name of the component.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_id": {"name": "project_id", "description": "Foreign key referencing the id of the component's `project`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira_source://models/stg_jira.yml", "compiled_path": "target/compiled/jira_source/models/stg_jira__component.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira_source", "enabled": true}, "created_at": 1663707929.217458, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__component_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    project_id\n    \n as \n    \n    project_id\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        description as component_description,\n        id as component_id,\n        name as component_name,\n        project_id,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__component\""}, "model.jira_source.stg_jira__user": {"raw_sql": "with base as (\n\n    select * \n    from {{ ref('stg_jira__user_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_jira__user_tmp')),\n                staging_columns=get_user_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n\n    select \n        email,\n        id as user_id,\n        locale,\n        name as user_display_name,\n        time_zone,\n        username,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.jira_source.get_user_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.jira_source.stg_jira__user_tmp", "model.jira_source.stg_jira__user_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "stg_jira__user"], "unique_id": "model.jira_source.stg_jira__user", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "stg_jira__user.sql", "original_file_path": "models/stg_jira__user.sql", "name": "stg_jira__user", "alias": "stg_jira__user", "checksum": {"name": "sha256", "checksum": "95b85f878a0a0784390ff0c1738c4bf709902531870b71fee4165f1628d4faa3"}, "tags": [], "refs": [["stg_jira__user_tmp"], ["stg_jira__user_tmp"]], "sources": [], "description": "Table of users associated with your organization.", "columns": {"user_id": {"name": "user_id", "description": "Unique ID of the user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Email associated with the user acccount.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "locale": {"name": "locale", "description": "The Java locale of the user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "user_display_name": {"name": "user_display_name", "description": "Name of the user as it appears in the UI.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_zone": {"name": "time_zone", "description": "The user's timezone, as defined in their settings.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "username": {"name": "username", "description": "Account username.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira_source://models/stg_jira.yml", "compiled_path": "target/compiled/jira_source/models/stg_jira__user.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira_source"}, "created_at": 1663707929.231122, "compiled_sql": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__user_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    locale\n    \n as \n    \n    locale\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    time_zone\n    \n as \n    \n    time_zone\n    \n, \n    \n    \n    username\n    \n as \n    \n    username\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select \n        email,\n        id as user_id,\n        locale,\n        name as user_display_name,\n        time_zone,\n        username,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__user\""}, "model.jira_source.stg_jira__priority": {"raw_sql": "{{ config(enabled=var('jira_using_priorities', True)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_jira__priority_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_jira__priority_tmp')),\n                staging_columns=get_priority_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        description as priority_description,\n        id as priority_id,\n        name as priority_name,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.jira_source.get_priority_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.jira_source.stg_jira__priority_tmp", "model.jira_source.stg_jira__priority_tmp"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "stg_jira__priority"], "unique_id": "model.jira_source.stg_jira__priority", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "stg_jira__priority.sql", "original_file_path": "models/stg_jira__priority.sql", "name": "stg_jira__priority", "alias": "stg_jira__priority", "checksum": {"name": "sha256", "checksum": "e6627a12758dece0969f5a6a38eb6370b52aa55b1f958539729945d64ea44ea0"}, "tags": [], "refs": [["stg_jira__priority_tmp"], ["stg_jira__priority_tmp"]], "sources": [], "description": "Table of issue priority levels (global).", "columns": {"priority_id": {"name": "priority_id", "description": "Unique ID of the priority level.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "priority_description": {"name": "priority_description", "description": "Description of the priority level.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "priority_name": {"name": "priority_name", "description": "Name of the priority as it appears in the UI.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "jira_source://models/stg_jira.yml", "compiled_path": "target/compiled/jira_source/models/stg_jira__priority.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "jira_source", "enabled": true}, "created_at": 1663707929.2256892, "compiled_sql": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__priority_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        description as priority_description,\n        id as priority_id,\n        name as priority_name,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__priority\""}, "model.jira_source.stg_jira__version_tmp": {"raw_sql": "{{ config(enabled=var('jira_using_versions', True)) }}\n\nselect * \nfrom {{ var('version') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.jira_integration_tests.version"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "tmp", "stg_jira__version_tmp"], "unique_id": "model.jira_source.stg_jira__version_tmp", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "tmp/stg_jira__version_tmp.sql", "original_file_path": "models/tmp/stg_jira__version_tmp.sql", "name": "stg_jira__version_tmp", "alias": "stg_jira__version_tmp", "checksum": {"name": "sha256", "checksum": "4e16bea890df92fe2393d1e151479ee51ed270f40d9b4ba3f922d858787c347e"}, "tags": [], "refs": [["version"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/tmp/stg_jira__version_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "jira_source", "enabled": true}, "created_at": 1663707929.048906, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"jira_integration_tests\".\"version\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__version_tmp\""}, "model.jira_source.stg_jira__status_category_tmp": {"raw_sql": "select * \nfrom {{ var('status_category') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.jira_integration_tests.status_category"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "tmp", "stg_jira__status_category_tmp"], "unique_id": "model.jira_source.stg_jira__status_category_tmp", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "tmp/stg_jira__status_category_tmp.sql", "original_file_path": "models/tmp/stg_jira__status_category_tmp.sql", "name": "stg_jira__status_category_tmp", "alias": "stg_jira__status_category_tmp", "checksum": {"name": "sha256", "checksum": "ce976a7afa132349c28940f9d387b3e635c9a6dd2576844347910580ea592a4b"}, "tags": [], "refs": [["status_category"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/tmp/stg_jira__status_category_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "jira_source"}, "created_at": 1663707929.05248, "compiled_sql": "select * \nfrom \"postgres\".\"jira_integration_tests\".\"status_category\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__status_category_tmp\""}, "model.jira_source.stg_jira__field_option_tmp": {"raw_sql": "select * \nfrom {{ var('field_option') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.jira_integration_tests.field_option"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "tmp", "stg_jira__field_option_tmp"], "unique_id": "model.jira_source.stg_jira__field_option_tmp", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "tmp/stg_jira__field_option_tmp.sql", "original_file_path": "models/tmp/stg_jira__field_option_tmp.sql", "name": "stg_jira__field_option_tmp", "alias": "stg_jira__field_option_tmp", "checksum": {"name": "sha256", "checksum": "cb1e64625d369889104ada54bf610b9aa36e1623853ae29ae24bd8f5bb4b2437"}, "tags": [], "refs": [["field_option"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/tmp/stg_jira__field_option_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "jira_source"}, "created_at": 1663707929.055397, "compiled_sql": "select * \nfrom \"postgres\".\"jira_integration_tests\".\"field_option\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field_option_tmp\""}, "model.jira_source.stg_jira__issue_multiselect_history_tmp": {"raw_sql": "select * \nfrom {{ var('issue_multiselect_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.jira_integration_tests.issue_multiselect_history"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "tmp", "stg_jira__issue_multiselect_history_tmp"], "unique_id": "model.jira_source.stg_jira__issue_multiselect_history_tmp", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "tmp/stg_jira__issue_multiselect_history_tmp.sql", "original_file_path": "models/tmp/stg_jira__issue_multiselect_history_tmp.sql", "name": "stg_jira__issue_multiselect_history_tmp", "alias": "stg_jira__issue_multiselect_history_tmp", "checksum": {"name": "sha256", "checksum": "faf8d7e362472ef899552eba8ee39c1fa8a1b803f64a639d6f481400861bc24a"}, "tags": [], "refs": [["issue_multiselect_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/tmp/stg_jira__issue_multiselect_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "jira_source"}, "created_at": 1663707929.0582871, "compiled_sql": "select * \nfrom \"postgres\".\"jira_integration_tests\".\"issue_multiselect_history\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_multiselect_history_tmp\""}, "model.jira_source.stg_jira__issue_type_tmp": {"raw_sql": "select * \nfrom {{ var('issue_type') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.jira_integration_tests.issue_type"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "tmp", "stg_jira__issue_type_tmp"], "unique_id": "model.jira_source.stg_jira__issue_type_tmp", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "tmp/stg_jira__issue_type_tmp.sql", "original_file_path": "models/tmp/stg_jira__issue_type_tmp.sql", "name": "stg_jira__issue_type_tmp", "alias": "stg_jira__issue_type_tmp", "checksum": {"name": "sha256", "checksum": "166aa9a9ce724421198262fb67dd01b9130712cada1defcd20a991308676e5d0"}, "tags": [], "refs": [["issue_type"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/tmp/stg_jira__issue_type_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "jira_source"}, "created_at": 1663707929.0609071, "compiled_sql": "select * \nfrom \"postgres\".\"jira_integration_tests\".\"issue_type\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_type_tmp\""}, "model.jira_source.stg_jira__sprint_tmp": {"raw_sql": "{{ config(enabled=var('jira_using_sprints', True)) }}\n\nselect * \nfrom {{ var('sprint') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.jira_integration_tests.sprint"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "tmp", "stg_jira__sprint_tmp"], "unique_id": "model.jira_source.stg_jira__sprint_tmp", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "tmp/stg_jira__sprint_tmp.sql", "original_file_path": "models/tmp/stg_jira__sprint_tmp.sql", "name": "stg_jira__sprint_tmp", "alias": "stg_jira__sprint_tmp", "checksum": {"name": "sha256", "checksum": "a21fcc01937bc59051bdd08532e3cf8535b078b2204f659f9ef98817dfb0c463"}, "tags": [], "refs": [["sprint"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/tmp/stg_jira__sprint_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "jira_source", "enabled": true}, "created_at": 1663707929.0640588, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"jira_integration_tests\".\"sprint\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__sprint_tmp\""}, "model.jira_source.stg_jira__status_tmp": {"raw_sql": "select * \nfrom {{ var('status') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.jira_integration_tests.status"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "tmp", "stg_jira__status_tmp"], "unique_id": "model.jira_source.stg_jira__status_tmp", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "tmp/stg_jira__status_tmp.sql", "original_file_path": "models/tmp/stg_jira__status_tmp.sql", "name": "stg_jira__status_tmp", "alias": "stg_jira__status_tmp", "checksum": {"name": "sha256", "checksum": "206c9a7f6e35d22a162df8e6d1ae4c121382af956e056ca619faff9986ab16b3"}, "tags": [], "refs": [["status"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/tmp/stg_jira__status_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "jira_source"}, "created_at": 1663707929.067429, "compiled_sql": "select * \nfrom \"postgres\".\"jira_integration_tests\".\"status\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__status_tmp\""}, "model.jira_source.stg_jira__project_tmp": {"raw_sql": "select * \nfrom {{ var('project') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.jira_integration_tests.project"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "tmp", "stg_jira__project_tmp"], "unique_id": "model.jira_source.stg_jira__project_tmp", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "tmp/stg_jira__project_tmp.sql", "original_file_path": "models/tmp/stg_jira__project_tmp.sql", "name": "stg_jira__project_tmp", "alias": "stg_jira__project_tmp", "checksum": {"name": "sha256", "checksum": "776cf64136ff22eaa9fddcb5b4aadd58e5b295800ffd8b3a2c3871ed22531599"}, "tags": [], "refs": [["project"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/tmp/stg_jira__project_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "jira_source"}, "created_at": 1663707929.0700748, "compiled_sql": "select * \nfrom \"postgres\".\"jira_integration_tests\".\"project\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__project_tmp\""}, "model.jira_source.stg_jira__comment_tmp": {"raw_sql": "select * \nfrom {{ var('comment') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.jira_integration_tests.comment"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "tmp", "stg_jira__comment_tmp"], "unique_id": "model.jira_source.stg_jira__comment_tmp", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "tmp/stg_jira__comment_tmp.sql", "original_file_path": "models/tmp/stg_jira__comment_tmp.sql", "name": "stg_jira__comment_tmp", "alias": "stg_jira__comment_tmp", "checksum": {"name": "sha256", "checksum": "50e78fc23c6041b43d46c0adf7f6cf3c1e2375ef3410fbdd2f527028d9830880"}, "tags": [], "refs": [["comment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/tmp/stg_jira__comment_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "jira_source"}, "created_at": 1663707929.072618, "compiled_sql": "select * \nfrom \"postgres\".\"jira_integration_tests\".\"comment\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__comment_tmp\""}, "model.jira_source.stg_jira__issue_field_history_tmp": {"raw_sql": "select * \nfrom {{ var('issue_field_history') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.jira_integration_tests.issue_field_history"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "tmp", "stg_jira__issue_field_history_tmp"], "unique_id": "model.jira_source.stg_jira__issue_field_history_tmp", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "tmp/stg_jira__issue_field_history_tmp.sql", "original_file_path": "models/tmp/stg_jira__issue_field_history_tmp.sql", "name": "stg_jira__issue_field_history_tmp", "alias": "stg_jira__issue_field_history_tmp", "checksum": {"name": "sha256", "checksum": "037b5bef93c17b862d1969a35a66f10feb507b34d943b093c13ace0298b5d855"}, "tags": [], "refs": [["issue_field_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/tmp/stg_jira__issue_field_history_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "jira_source"}, "created_at": 1663707929.075583, "compiled_sql": "select * \nfrom \"postgres\".\"jira_integration_tests\".\"issue_field_history\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_field_history_tmp\""}, "model.jira_source.stg_jira__issue_link_tmp": {"raw_sql": "select * \nfrom {{ var('issue_link') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.jira_integration_tests.issue_link"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "tmp", "stg_jira__issue_link_tmp"], "unique_id": "model.jira_source.stg_jira__issue_link_tmp", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "tmp/stg_jira__issue_link_tmp.sql", "original_file_path": "models/tmp/stg_jira__issue_link_tmp.sql", "name": "stg_jira__issue_link_tmp", "alias": "stg_jira__issue_link_tmp", "checksum": {"name": "sha256", "checksum": "deb68ea3ff7d2f0d254d06e07829733756ce80efb7af5209e5ae43840b8e254a"}, "tags": [], "refs": [["issue_link"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/tmp/stg_jira__issue_link_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "jira_source"}, "created_at": 1663707929.078402, "compiled_sql": "select * \nfrom \"postgres\".\"jira_integration_tests\".\"issue_link\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_link_tmp\""}, "model.jira_source.stg_jira__field_tmp": {"raw_sql": "select * \nfrom {{ var('field') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.jira_integration_tests.field_option"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "tmp", "stg_jira__field_tmp"], "unique_id": "model.jira_source.stg_jira__field_tmp", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "tmp/stg_jira__field_tmp.sql", "original_file_path": "models/tmp/stg_jira__field_tmp.sql", "name": "stg_jira__field_tmp", "alias": "stg_jira__field_tmp", "checksum": {"name": "sha256", "checksum": "aa842b8fc7fa2e61d4b04634ddae4948afce86a6c1ba37197e01c5baeef8f374"}, "tags": [], "refs": [["field_option"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/tmp/stg_jira__field_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "jira_source"}, "created_at": 1663707929.0816178, "compiled_sql": "select * \nfrom \"postgres\".\"jira_integration_tests\".\"field_option\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field_tmp\""}, "model.jira_source.stg_jira__user_tmp": {"raw_sql": "select * \nfrom {{ var('user') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.jira_integration_tests.user"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "tmp", "stg_jira__user_tmp"], "unique_id": "model.jira_source.stg_jira__user_tmp", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "tmp/stg_jira__user_tmp.sql", "original_file_path": "models/tmp/stg_jira__user_tmp.sql", "name": "stg_jira__user_tmp", "alias": "stg_jira__user_tmp", "checksum": {"name": "sha256", "checksum": "c6665b2e96c3536ab07cdc0fe31225a7be4766df0c7c353e3ade197bc8498279"}, "tags": [], "refs": [["user"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/tmp/stg_jira__user_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "jira_source"}, "created_at": 1663707929.08415, "compiled_sql": "select * \nfrom \"postgres\".\"jira_integration_tests\".\"user\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__user_tmp\""}, "model.jira_source.stg_jira__issue_tmp": {"raw_sql": "select * \nfrom {{ var('issue') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.jira_integration_tests.issue"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "tmp", "stg_jira__issue_tmp"], "unique_id": "model.jira_source.stg_jira__issue_tmp", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "tmp/stg_jira__issue_tmp.sql", "original_file_path": "models/tmp/stg_jira__issue_tmp.sql", "name": "stg_jira__issue_tmp", "alias": "stg_jira__issue_tmp", "checksum": {"name": "sha256", "checksum": "2f84522aea28fb2bef123eff34648c4777747064de156efaad69c053d3b06092"}, "tags": [], "refs": [["issue"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/tmp/stg_jira__issue_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "jira_source"}, "created_at": 1663707929.0874188, "compiled_sql": "select * \nfrom \"postgres\".\"jira_integration_tests\".\"issue\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_tmp\""}, "model.jira_source.stg_jira__priority_tmp": {"raw_sql": "{{ config(enabled=var('jira_using_priorities', True)) }}\n\nselect * from {{ var('priority') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.jira_integration_tests.priority"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "tmp", "stg_jira__priority_tmp"], "unique_id": "model.jira_source.stg_jira__priority_tmp", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "tmp/stg_jira__priority_tmp.sql", "original_file_path": "models/tmp/stg_jira__priority_tmp.sql", "name": "stg_jira__priority_tmp", "alias": "stg_jira__priority_tmp", "checksum": {"name": "sha256", "checksum": "738b42569807cd2456a9a97689d8456efda1868dba061cacff6a525768402e83"}, "tags": [], "refs": [["priority"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/tmp/stg_jira__priority_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "jira_source", "enabled": true}, "created_at": 1663707929.090195, "compiled_sql": "\n\nselect * from \"postgres\".\"jira_integration_tests\".\"priority\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__priority_tmp\""}, "model.jira_source.stg_jira__component_tmp": {"raw_sql": "{{ config(enabled=var('jira_using_components', True)) }}\n\nselect * \nfrom {{ var('component') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.jira_integration_tests.component"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "tmp", "stg_jira__component_tmp"], "unique_id": "model.jira_source.stg_jira__component_tmp", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "tmp/stg_jira__component_tmp.sql", "original_file_path": "models/tmp/stg_jira__component_tmp.sql", "name": "stg_jira__component_tmp", "alias": "stg_jira__component_tmp", "checksum": {"name": "sha256", "checksum": "968da15f4a8dbb9e51d593dd0a95ff6081d5b2e3d8f0eb8daedaf2c283decd3c"}, "tags": [], "refs": [["component"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/tmp/stg_jira__component_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "jira_source", "enabled": true}, "created_at": 1663707929.093075, "compiled_sql": "\n\nselect * \nfrom \"postgres\".\"jira_integration_tests\".\"component\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__component_tmp\""}, "model.jira_source.stg_jira__resolution_tmp": {"raw_sql": "select * \nfrom {{ var('resolution') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.jira_integration_tests.resolution"]}, "config": {"enabled": true, "alias": null, "schema": "jira_source", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "postgres", "schema": "jira_integration_tests_jira_source", "fqn": ["jira_source", "tmp", "stg_jira__resolution_tmp"], "unique_id": "model.jira_source.stg_jira__resolution_tmp", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "tmp/stg_jira__resolution_tmp.sql", "original_file_path": "models/tmp/stg_jira__resolution_tmp.sql", "name": "stg_jira__resolution_tmp", "alias": "stg_jira__resolution_tmp", "checksum": {"name": "sha256", "checksum": "4254df90446b8911d6664fb429ae20adfb05cfe415bed40e5563a5d5bb63786a"}, "tags": [], "refs": [["resolution"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/tmp/stg_jira__resolution_tmp.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "jira_source"}, "created_at": 1663707929.096229, "compiled_sql": "select * \nfrom \"postgres\".\"jira_integration_tests\".\"resolution\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__resolution_tmp\""}, "test.jira.unique_jira__daily_issue_field_history_issue_day_id.75c24d3154": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "issue_day_id", "model": "{{ get_where_subquery(ref('jira__daily_issue_field_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.jira__daily_issue_field_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "unique_jira__daily_issue_field_history_issue_day_id"], "unique_id": "test.jira.unique_jira__daily_issue_field_history_issue_day_id.75c24d3154", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "unique_jira__daily_issue_field_history_issue_day_id.sql", "original_file_path": "models/jira.yml", "name": "unique_jira__daily_issue_field_history_issue_day_id", "alias": "unique_jira__daily_issue_field_history_issue_day_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["jira__daily_issue_field_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/jira.yml/unique_jira__daily_issue_field_history_issue_day_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.126404, "compiled_sql": "\n    \n    \n\nselect\n    issue_day_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integration_tests_jira\".\"jira__daily_issue_field_history\"\nwhere issue_day_id is not null\ngroup by issue_day_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "issue_day_id", "file_key_name": "models.jira__daily_issue_field_history"}, "test.jira.not_null_jira__daily_issue_field_history_issue_day_id.d13b058bcd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "issue_day_id", "model": "{{ get_where_subquery(ref('jira__daily_issue_field_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.jira__daily_issue_field_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "not_null_jira__daily_issue_field_history_issue_day_id"], "unique_id": "test.jira.not_null_jira__daily_issue_field_history_issue_day_id.d13b058bcd", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "not_null_jira__daily_issue_field_history_issue_day_id.sql", "original_file_path": "models/jira.yml", "name": "not_null_jira__daily_issue_field_history_issue_day_id", "alias": "not_null_jira__daily_issue_field_history_issue_day_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["jira__daily_issue_field_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/jira.yml/not_null_jira__daily_issue_field_history_issue_day_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.127549, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"jira_integration_tests_jira\".\"jira__daily_issue_field_history\"\nwhere issue_day_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "issue_day_id", "file_key_name": "models.jira__daily_issue_field_history"}, "test.jira.unique_jira__issue_enhanced_issue_id.fec6e723ee": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "issue_id", "model": "{{ get_where_subquery(ref('jira__issue_enhanced')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.jira__issue_enhanced"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "unique_jira__issue_enhanced_issue_id"], "unique_id": "test.jira.unique_jira__issue_enhanced_issue_id.fec6e723ee", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "unique_jira__issue_enhanced_issue_id.sql", "original_file_path": "models/jira.yml", "name": "unique_jira__issue_enhanced_issue_id", "alias": "unique_jira__issue_enhanced_issue_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["jira__issue_enhanced"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/jira.yml/unique_jira__issue_enhanced_issue_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.1285892, "compiled_sql": "\n    \n    \n\nselect\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integration_tests_jira\".\"jira__issue_enhanced\"\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "issue_id", "file_key_name": "models.jira__issue_enhanced"}, "test.jira.not_null_jira__issue_enhanced_issue_id.6b18e0db38": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "issue_id", "model": "{{ get_where_subquery(ref('jira__issue_enhanced')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.jira__issue_enhanced"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "not_null_jira__issue_enhanced_issue_id"], "unique_id": "test.jira.not_null_jira__issue_enhanced_issue_id.6b18e0db38", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "not_null_jira__issue_enhanced_issue_id.sql", "original_file_path": "models/jira.yml", "name": "not_null_jira__issue_enhanced_issue_id", "alias": "not_null_jira__issue_enhanced_issue_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["jira__issue_enhanced"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/jira.yml/not_null_jira__issue_enhanced_issue_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.129536, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"jira_integration_tests_jira\".\"jira__issue_enhanced\"\nwhere issue_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "issue_id", "file_key_name": "models.jira__issue_enhanced"}, "test.jira.unique_jira__project_enhanced_project_id.c18e39faef": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "project_id", "model": "{{ get_where_subquery(ref('jira__project_enhanced')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.jira__project_enhanced"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "unique_jira__project_enhanced_project_id"], "unique_id": "test.jira.unique_jira__project_enhanced_project_id.c18e39faef", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "unique_jira__project_enhanced_project_id.sql", "original_file_path": "models/jira.yml", "name": "unique_jira__project_enhanced_project_id", "alias": "unique_jira__project_enhanced_project_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["jira__project_enhanced"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/jira.yml/unique_jira__project_enhanced_project_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.1304698, "compiled_sql": "\n    \n    \n\nselect\n    project_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integration_tests_jira\".\"jira__project_enhanced\"\nwhere project_id is not null\ngroup by project_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "project_id", "file_key_name": "models.jira__project_enhanced"}, "test.jira.not_null_jira__project_enhanced_project_id.4f7c58f1d4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "project_id", "model": "{{ get_where_subquery(ref('jira__project_enhanced')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.jira__project_enhanced"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "not_null_jira__project_enhanced_project_id"], "unique_id": "test.jira.not_null_jira__project_enhanced_project_id.4f7c58f1d4", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "not_null_jira__project_enhanced_project_id.sql", "original_file_path": "models/jira.yml", "name": "not_null_jira__project_enhanced_project_id", "alias": "not_null_jira__project_enhanced_project_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["jira__project_enhanced"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/jira.yml/not_null_jira__project_enhanced_project_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.131518, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"jira_integration_tests_jira\".\"jira__project_enhanced\"\nwhere project_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "project_id", "file_key_name": "models.jira__project_enhanced"}, "test.jira.unique_jira__user_enhanced_user_id.c9ee73454a": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('jira__user_enhanced')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.jira__user_enhanced"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "unique_jira__user_enhanced_user_id"], "unique_id": "test.jira.unique_jira__user_enhanced_user_id.c9ee73454a", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "unique_jira__user_enhanced_user_id.sql", "original_file_path": "models/jira.yml", "name": "unique_jira__user_enhanced_user_id", "alias": "unique_jira__user_enhanced_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["jira__user_enhanced"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/jira.yml/unique_jira__user_enhanced_user_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.132434, "compiled_sql": "\n    \n    \n\nselect\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integration_tests_jira\".\"jira__user_enhanced\"\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id", "file_key_name": "models.jira__user_enhanced"}, "test.jira.not_null_jira__user_enhanced_user_id.aecc00744a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('jira__user_enhanced')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.jira__user_enhanced"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "not_null_jira__user_enhanced_user_id"], "unique_id": "test.jira.not_null_jira__user_enhanced_user_id.aecc00744a", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "not_null_jira__user_enhanced_user_id.sql", "original_file_path": "models/jira.yml", "name": "not_null_jira__user_enhanced_user_id", "alias": "not_null_jira__user_enhanced_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["jira__user_enhanced"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/jira.yml/not_null_jira__user_enhanced_user_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.133368, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"jira_integration_tests_jira\".\"jira__user_enhanced\"\nwhere user_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id", "file_key_name": "models.jira__user_enhanced"}, "test.jira.unique_int_jira__issue_join_issue_id.0bd360ec4b": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "issue_id", "model": "{{ get_where_subquery(ref('int_jira__issue_join')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__issue_join"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "unique_int_jira__issue_join_issue_id"], "unique_id": "test.jira.unique_int_jira__issue_join_issue_id.0bd360ec4b", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "unique_int_jira__issue_join_issue_id.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "unique_int_jira__issue_join_issue_id", "alias": "unique_int_jira__issue_join_issue_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__issue_join"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/unique_int_jira__issue_join_issue_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.169028, "compiled_sql": "\n    \n    \n\nselect\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__issue_join\"\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "issue_id", "file_key_name": "models.int_jira__issue_join"}, "test.jira.not_null_int_jira__issue_join_issue_id.53391b21a6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "issue_id", "model": "{{ get_where_subquery(ref('int_jira__issue_join')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__issue_join"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "not_null_int_jira__issue_join_issue_id"], "unique_id": "test.jira.not_null_int_jira__issue_join_issue_id.53391b21a6", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "not_null_int_jira__issue_join_issue_id.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "not_null_int_jira__issue_join_issue_id", "alias": "not_null_int_jira__issue_join_issue_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__issue_join"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/not_null_int_jira__issue_join_issue_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.170223, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__issue_join\"\nwhere issue_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "issue_id", "file_key_name": "models.int_jira__issue_join"}, "test.jira.unique_int_jira__project_metrics_project_id.154ccc194e": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "project_id", "model": "{{ get_where_subquery(ref('int_jira__project_metrics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__project_metrics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "unique_int_jira__project_metrics_project_id"], "unique_id": "test.jira.unique_int_jira__project_metrics_project_id.154ccc194e", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "unique_int_jira__project_metrics_project_id.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "unique_int_jira__project_metrics_project_id", "alias": "unique_int_jira__project_metrics_project_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__project_metrics"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/unique_int_jira__project_metrics_project_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.171197, "compiled_sql": "\n    \n    \n\nwith __dbt__cte__int_jira__project_metrics as (\nwith issue as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira\".\"jira__issue_enhanced\"\n    where project_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        project_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n ), 0) as median_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_seconds,\n\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n ), 0) as median_assigned_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_assigned_seconds\n\n    from issue\n\n     group by project_id \n),\n\n-- grouping because the medians were calculated using window functions (except in postgres)\nmedian_metrics as (\n\n    select \n        project_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds,\n        median_assigned_close_time_seconds,\n        median_age_currently_open_assigned_seconds\n\n    from calculate_medians\n    group by 1,2,3,4,5\n),\n\n\n-- get appropriate counts + sums to calculate averages\nproject_issues as (\n    select\n        project_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        -- using the below to calculate averages\n\n        -- assigned issues\n        sum(case when resolved_at is null and assignee_user_id is not null then 1 else 0 end) as count_open_assigned_issues,\n        sum(case when resolved_at is not null and assignee_user_id is not null then 1 else 0 end) as count_closed_assigned_issues,\n\n        -- close time \n        sum(case when resolved_at is not null then open_duration_seconds else 0 end) as sum_close_time_seconds,\n        sum(case when resolved_at is not null then any_assignment_duration_seconds else 0 end) as sum_assigned_close_time_seconds,\n\n        -- age of currently open tasks\n        sum(case when resolved_at is null then open_duration_seconds else 0 end) as sum_currently_open_duration_seconds,\n        sum(case when resolved_at is null then any_assignment_duration_seconds else 0 end) as sum_currently_open_assigned_duration_seconds\n\n    from issue\n\n    group by 1\n),\n\ncalculate_avg_metrics as (\n\n    select\n        project_id,\n        count_closed_issues,\n        count_open_issues,\n        count_open_assigned_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues  as \n    numeric(28, 6)\n ), 0) end as avg_close_time_seconds,\n\n        case when count_closed_assigned_issues = 0 then 0 else\n        round( cast(sum_assigned_close_time_seconds * 1.0 / count_closed_assigned_issues  as \n    numeric(28, 6)\n ), 0) end as avg_assigned_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_currently_open_duration_seconds * 1.0 / count_open_issues as \n    numeric(28, 6)\n ), 0) end as avg_age_currently_open_seconds,\n\n        case when count_open_assigned_issues = 0 then 0 else\n        round( cast(sum_currently_open_assigned_duration_seconds * 1.0 / count_open_assigned_issues as \n    numeric(28, 6)\n ), 0) end as avg_age_currently_open_assigned_seconds\n\n    from project_issues\n),\n\n-- join medians and averages + convert to days\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n\n        -- there are 86400 seconds in a day\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_assigned_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_assigned_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_age_currently_open_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_assigned_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_age_currently_open_assigned_days,\n\n        median_metrics.median_close_time_seconds, \n        median_metrics.median_age_currently_open_seconds,\n        median_metrics.median_assigned_close_time_seconds,\n        median_metrics.median_age_currently_open_assigned_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_days,\n        round( cast(median_metrics.median_assigned_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_assigned_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_assigned_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_assigned_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(project_id)\n)\n\nselect * from join_metrics\n)select\n    project_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_jira__project_metrics\nwhere project_id is not null\ngroup by project_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.jira.int_jira__project_metrics", "sql": " __dbt__cte__int_jira__project_metrics as (\nwith issue as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira\".\"jira__issue_enhanced\"\n    where project_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        project_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n ), 0) as median_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_seconds,\n\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n ), 0) as median_assigned_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_assigned_seconds\n\n    from issue\n\n     group by project_id \n),\n\n-- grouping because the medians were calculated using window functions (except in postgres)\nmedian_metrics as (\n\n    select \n        project_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds,\n        median_assigned_close_time_seconds,\n        median_age_currently_open_assigned_seconds\n\n    from calculate_medians\n    group by 1,2,3,4,5\n),\n\n\n-- get appropriate counts + sums to calculate averages\nproject_issues as (\n    select\n        project_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        -- using the below to calculate averages\n\n        -- assigned issues\n        sum(case when resolved_at is null and assignee_user_id is not null then 1 else 0 end) as count_open_assigned_issues,\n        sum(case when resolved_at is not null and assignee_user_id is not null then 1 else 0 end) as count_closed_assigned_issues,\n\n        -- close time \n        sum(case when resolved_at is not null then open_duration_seconds else 0 end) as sum_close_time_seconds,\n        sum(case when resolved_at is not null then any_assignment_duration_seconds else 0 end) as sum_assigned_close_time_seconds,\n\n        -- age of currently open tasks\n        sum(case when resolved_at is null then open_duration_seconds else 0 end) as sum_currently_open_duration_seconds,\n        sum(case when resolved_at is null then any_assignment_duration_seconds else 0 end) as sum_currently_open_assigned_duration_seconds\n\n    from issue\n\n    group by 1\n),\n\ncalculate_avg_metrics as (\n\n    select\n        project_id,\n        count_closed_issues,\n        count_open_issues,\n        count_open_assigned_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues  as \n    numeric(28, 6)\n ), 0) end as avg_close_time_seconds,\n\n        case when count_closed_assigned_issues = 0 then 0 else\n        round( cast(sum_assigned_close_time_seconds * 1.0 / count_closed_assigned_issues  as \n    numeric(28, 6)\n ), 0) end as avg_assigned_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_currently_open_duration_seconds * 1.0 / count_open_issues as \n    numeric(28, 6)\n ), 0) end as avg_age_currently_open_seconds,\n\n        case when count_open_assigned_issues = 0 then 0 else\n        round( cast(sum_currently_open_assigned_duration_seconds * 1.0 / count_open_assigned_issues as \n    numeric(28, 6)\n ), 0) end as avg_age_currently_open_assigned_seconds\n\n    from project_issues\n),\n\n-- join medians and averages + convert to days\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n\n        -- there are 86400 seconds in a day\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_assigned_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_assigned_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_age_currently_open_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_assigned_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_age_currently_open_assigned_days,\n\n        median_metrics.median_close_time_seconds, \n        median_metrics.median_age_currently_open_seconds,\n        median_metrics.median_assigned_close_time_seconds,\n        median_metrics.median_age_currently_open_assigned_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_days,\n        round( cast(median_metrics.median_assigned_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_assigned_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_assigned_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_assigned_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(project_id)\n)\n\nselect * from join_metrics\n)"}], "relation_name": null, "column_name": "project_id", "file_key_name": "models.int_jira__project_metrics"}, "test.jira.not_null_int_jira__project_metrics_project_id.1542338148": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "project_id", "model": "{{ get_where_subquery(ref('int_jira__project_metrics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__project_metrics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "not_null_int_jira__project_metrics_project_id"], "unique_id": "test.jira.not_null_int_jira__project_metrics_project_id.1542338148", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "not_null_int_jira__project_metrics_project_id.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "not_null_int_jira__project_metrics_project_id", "alias": "not_null_int_jira__project_metrics_project_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__project_metrics"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/not_null_int_jira__project_metrics_project_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.172127, "compiled_sql": "\n    \n    \n\nwith __dbt__cte__int_jira__project_metrics as (\nwith issue as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira\".\"jira__issue_enhanced\"\n    where project_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        project_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n ), 0) as median_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_seconds,\n\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n ), 0) as median_assigned_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_assigned_seconds\n\n    from issue\n\n     group by project_id \n),\n\n-- grouping because the medians were calculated using window functions (except in postgres)\nmedian_metrics as (\n\n    select \n        project_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds,\n        median_assigned_close_time_seconds,\n        median_age_currently_open_assigned_seconds\n\n    from calculate_medians\n    group by 1,2,3,4,5\n),\n\n\n-- get appropriate counts + sums to calculate averages\nproject_issues as (\n    select\n        project_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        -- using the below to calculate averages\n\n        -- assigned issues\n        sum(case when resolved_at is null and assignee_user_id is not null then 1 else 0 end) as count_open_assigned_issues,\n        sum(case when resolved_at is not null and assignee_user_id is not null then 1 else 0 end) as count_closed_assigned_issues,\n\n        -- close time \n        sum(case when resolved_at is not null then open_duration_seconds else 0 end) as sum_close_time_seconds,\n        sum(case when resolved_at is not null then any_assignment_duration_seconds else 0 end) as sum_assigned_close_time_seconds,\n\n        -- age of currently open tasks\n        sum(case when resolved_at is null then open_duration_seconds else 0 end) as sum_currently_open_duration_seconds,\n        sum(case when resolved_at is null then any_assignment_duration_seconds else 0 end) as sum_currently_open_assigned_duration_seconds\n\n    from issue\n\n    group by 1\n),\n\ncalculate_avg_metrics as (\n\n    select\n        project_id,\n        count_closed_issues,\n        count_open_issues,\n        count_open_assigned_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues  as \n    numeric(28, 6)\n ), 0) end as avg_close_time_seconds,\n\n        case when count_closed_assigned_issues = 0 then 0 else\n        round( cast(sum_assigned_close_time_seconds * 1.0 / count_closed_assigned_issues  as \n    numeric(28, 6)\n ), 0) end as avg_assigned_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_currently_open_duration_seconds * 1.0 / count_open_issues as \n    numeric(28, 6)\n ), 0) end as avg_age_currently_open_seconds,\n\n        case when count_open_assigned_issues = 0 then 0 else\n        round( cast(sum_currently_open_assigned_duration_seconds * 1.0 / count_open_assigned_issues as \n    numeric(28, 6)\n ), 0) end as avg_age_currently_open_assigned_seconds\n\n    from project_issues\n),\n\n-- join medians and averages + convert to days\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n\n        -- there are 86400 seconds in a day\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_assigned_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_assigned_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_age_currently_open_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_assigned_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_age_currently_open_assigned_days,\n\n        median_metrics.median_close_time_seconds, \n        median_metrics.median_age_currently_open_seconds,\n        median_metrics.median_assigned_close_time_seconds,\n        median_metrics.median_age_currently_open_assigned_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_days,\n        round( cast(median_metrics.median_assigned_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_assigned_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_assigned_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_assigned_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(project_id)\n)\n\nselect * from join_metrics\n)select *\nfrom __dbt__cte__int_jira__project_metrics\nwhere project_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.jira.int_jira__project_metrics", "sql": " __dbt__cte__int_jira__project_metrics as (\nwith issue as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira\".\"jira__issue_enhanced\"\n    where project_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        project_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n ), 0) as median_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_seconds,\n\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n ), 0) as median_assigned_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_assigned_seconds\n\n    from issue\n\n     group by project_id \n),\n\n-- grouping because the medians were calculated using window functions (except in postgres)\nmedian_metrics as (\n\n    select \n        project_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds,\n        median_assigned_close_time_seconds,\n        median_age_currently_open_assigned_seconds\n\n    from calculate_medians\n    group by 1,2,3,4,5\n),\n\n\n-- get appropriate counts + sums to calculate averages\nproject_issues as (\n    select\n        project_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        -- using the below to calculate averages\n\n        -- assigned issues\n        sum(case when resolved_at is null and assignee_user_id is not null then 1 else 0 end) as count_open_assigned_issues,\n        sum(case when resolved_at is not null and assignee_user_id is not null then 1 else 0 end) as count_closed_assigned_issues,\n\n        -- close time \n        sum(case when resolved_at is not null then open_duration_seconds else 0 end) as sum_close_time_seconds,\n        sum(case when resolved_at is not null then any_assignment_duration_seconds else 0 end) as sum_assigned_close_time_seconds,\n\n        -- age of currently open tasks\n        sum(case when resolved_at is null then open_duration_seconds else 0 end) as sum_currently_open_duration_seconds,\n        sum(case when resolved_at is null then any_assignment_duration_seconds else 0 end) as sum_currently_open_assigned_duration_seconds\n\n    from issue\n\n    group by 1\n),\n\ncalculate_avg_metrics as (\n\n    select\n        project_id,\n        count_closed_issues,\n        count_open_issues,\n        count_open_assigned_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues  as \n    numeric(28, 6)\n ), 0) end as avg_close_time_seconds,\n\n        case when count_closed_assigned_issues = 0 then 0 else\n        round( cast(sum_assigned_close_time_seconds * 1.0 / count_closed_assigned_issues  as \n    numeric(28, 6)\n ), 0) end as avg_assigned_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_currently_open_duration_seconds * 1.0 / count_open_issues as \n    numeric(28, 6)\n ), 0) end as avg_age_currently_open_seconds,\n\n        case when count_open_assigned_issues = 0 then 0 else\n        round( cast(sum_currently_open_assigned_duration_seconds * 1.0 / count_open_assigned_issues as \n    numeric(28, 6)\n ), 0) end as avg_age_currently_open_assigned_seconds\n\n    from project_issues\n),\n\n-- join medians and averages + convert to days\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n\n        -- there are 86400 seconds in a day\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_assigned_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_assigned_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_age_currently_open_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_assigned_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_age_currently_open_assigned_days,\n\n        median_metrics.median_close_time_seconds, \n        median_metrics.median_age_currently_open_seconds,\n        median_metrics.median_assigned_close_time_seconds,\n        median_metrics.median_age_currently_open_assigned_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_days,\n        round( cast(median_metrics.median_assigned_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_assigned_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_assigned_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_assigned_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(project_id)\n)\n\nselect * from join_metrics\n)"}], "relation_name": null, "column_name": "project_id", "file_key_name": "models.int_jira__project_metrics"}, "test.jira.unique_int_jira__user_metrics_user_id.c042bcdd66": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('int_jira__user_metrics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__user_metrics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "unique_int_jira__user_metrics_user_id"], "unique_id": "test.jira.unique_int_jira__user_metrics_user_id.c042bcdd66", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "unique_int_jira__user_metrics_user_id.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "unique_int_jira__user_metrics_user_id", "alias": "unique_int_jira__user_metrics_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__user_metrics"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/unique_int_jira__user_metrics_user_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.1732, "compiled_sql": "\n    \n    \n\nwith __dbt__cte__int_jira__user_metrics as (\nwith issue as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira\".\"jira__issue_enhanced\" \n    where assignee_user_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        assignee_user_id as user_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n), 0) as median_close_time_seconds,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n), 0) as median_age_currently_open_seconds\n\n    from issue\n\n     group by 1 \n),\n\n-- grouping because the medians were calculated using window functions (except postgres)\nmedian_metrics as (\n\n    select \n        user_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds\n\n    from calculate_medians\n    group by 1,2,3\n),\n\n\nuser_issues as (\n\n    select\n        assignee_user_id as user_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        sum(case when resolved_at is not null then last_assignment_duration_seconds end) as sum_current_open_seconds,\n        sum(case when resolved_at is null then last_assignment_duration_seconds end) as sum_close_time_seconds\n\n    from issue\n\n    group by 1\n\n),\n\ncalculate_avg_metrics as (\n\n    select \n        user_id,\n        count_closed_issues,\n        count_open_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues as \n    numeric(28, 6)\n ), 0) end as avg_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_current_open_seconds * 1.0 / count_open_issues as \n    numeric(28, 6)\n ), 0) end as avg_age_currently_open_seconds\n\n    from user_issues\n),\n\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_age_currently_open_days,\n\n        median_metrics.median_close_time_seconds,\n        median_metrics.median_age_currently_open_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(user_id)\n)\n\nselect * from join_metrics\n)select\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_jira__user_metrics\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.jira.int_jira__user_metrics", "sql": " __dbt__cte__int_jira__user_metrics as (\nwith issue as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira\".\"jira__issue_enhanced\" \n    where assignee_user_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        assignee_user_id as user_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n), 0) as median_close_time_seconds,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n), 0) as median_age_currently_open_seconds\n\n    from issue\n\n     group by 1 \n),\n\n-- grouping because the medians were calculated using window functions (except postgres)\nmedian_metrics as (\n\n    select \n        user_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds\n\n    from calculate_medians\n    group by 1,2,3\n),\n\n\nuser_issues as (\n\n    select\n        assignee_user_id as user_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        sum(case when resolved_at is not null then last_assignment_duration_seconds end) as sum_current_open_seconds,\n        sum(case when resolved_at is null then last_assignment_duration_seconds end) as sum_close_time_seconds\n\n    from issue\n\n    group by 1\n\n),\n\ncalculate_avg_metrics as (\n\n    select \n        user_id,\n        count_closed_issues,\n        count_open_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues as \n    numeric(28, 6)\n ), 0) end as avg_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_current_open_seconds * 1.0 / count_open_issues as \n    numeric(28, 6)\n ), 0) end as avg_age_currently_open_seconds\n\n    from user_issues\n),\n\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_age_currently_open_days,\n\n        median_metrics.median_close_time_seconds,\n        median_metrics.median_age_currently_open_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(user_id)\n)\n\nselect * from join_metrics\n)"}], "relation_name": null, "column_name": "user_id", "file_key_name": "models.int_jira__user_metrics"}, "test.jira.not_null_int_jira__user_metrics_user_id.2143177b14": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('int_jira__user_metrics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__user_metrics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "not_null_int_jira__user_metrics_user_id"], "unique_id": "test.jira.not_null_int_jira__user_metrics_user_id.2143177b14", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "not_null_int_jira__user_metrics_user_id.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "not_null_int_jira__user_metrics_user_id", "alias": "not_null_int_jira__user_metrics_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__user_metrics"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/not_null_int_jira__user_metrics_user_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.174237, "compiled_sql": "\n    \n    \n\nwith __dbt__cte__int_jira__user_metrics as (\nwith issue as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira\".\"jira__issue_enhanced\" \n    where assignee_user_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        assignee_user_id as user_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n), 0) as median_close_time_seconds,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n), 0) as median_age_currently_open_seconds\n\n    from issue\n\n     group by 1 \n),\n\n-- grouping because the medians were calculated using window functions (except postgres)\nmedian_metrics as (\n\n    select \n        user_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds\n\n    from calculate_medians\n    group by 1,2,3\n),\n\n\nuser_issues as (\n\n    select\n        assignee_user_id as user_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        sum(case when resolved_at is not null then last_assignment_duration_seconds end) as sum_current_open_seconds,\n        sum(case when resolved_at is null then last_assignment_duration_seconds end) as sum_close_time_seconds\n\n    from issue\n\n    group by 1\n\n),\n\ncalculate_avg_metrics as (\n\n    select \n        user_id,\n        count_closed_issues,\n        count_open_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues as \n    numeric(28, 6)\n ), 0) end as avg_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_current_open_seconds * 1.0 / count_open_issues as \n    numeric(28, 6)\n ), 0) end as avg_age_currently_open_seconds\n\n    from user_issues\n),\n\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_age_currently_open_days,\n\n        median_metrics.median_close_time_seconds,\n        median_metrics.median_age_currently_open_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(user_id)\n)\n\nselect * from join_metrics\n)select *\nfrom __dbt__cte__int_jira__user_metrics\nwhere user_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.jira.int_jira__user_metrics", "sql": " __dbt__cte__int_jira__user_metrics as (\nwith issue as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira\".\"jira__issue_enhanced\" \n    where assignee_user_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        assignee_user_id as user_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n), 0) as median_close_time_seconds,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as \n    numeric(28, 6)\n), 0) as median_age_currently_open_seconds\n\n    from issue\n\n     group by 1 \n),\n\n-- grouping because the medians were calculated using window functions (except postgres)\nmedian_metrics as (\n\n    select \n        user_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds\n\n    from calculate_medians\n    group by 1,2,3\n),\n\n\nuser_issues as (\n\n    select\n        assignee_user_id as user_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        sum(case when resolved_at is not null then last_assignment_duration_seconds end) as sum_current_open_seconds,\n        sum(case when resolved_at is null then last_assignment_duration_seconds end) as sum_close_time_seconds\n\n    from issue\n\n    group by 1\n\n),\n\ncalculate_avg_metrics as (\n\n    select \n        user_id,\n        count_closed_issues,\n        count_open_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues as \n    numeric(28, 6)\n ), 0) end as avg_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_current_open_seconds * 1.0 / count_open_issues as \n    numeric(28, 6)\n ), 0) end as avg_age_currently_open_seconds\n\n    from user_issues\n),\n\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as avg_age_currently_open_days,\n\n        median_metrics.median_close_time_seconds,\n        median_metrics.median_age_currently_open_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as \n    numeric(28, 6)\n ), 0) as median_age_currently_open_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(user_id)\n)\n\nselect * from join_metrics\n)"}], "relation_name": null, "column_name": "user_id", "file_key_name": "models.int_jira__user_metrics"}, "test.jira.unique_int_jira__issue_comments_issue_id.26e3f11046": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "issue_id", "model": "{{ get_where_subquery(ref('int_jira__issue_comments')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__issue_comments"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "unique_int_jira__issue_comments_issue_id"], "unique_id": "test.jira.unique_int_jira__issue_comments_issue_id.26e3f11046", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "unique_int_jira__issue_comments_issue_id.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "unique_int_jira__issue_comments_issue_id", "alias": "unique_int_jira__issue_comments_issue_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__issue_comments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/unique_int_jira__issue_comments_issue_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.175256, "compiled_sql": "\n    \n    \n\nwith __dbt__cte__int_jira__issue_comments as (\n\n\nwith comment as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__comment\"\n\n    order by issue_id, created_at asc\n\n),\n\n-- user is a reserved keyword in AWS \njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__user\"\n),\n\nagg_comments as (\n\n    select \n    comment.issue_id,\n    \n    string_agg(comment.created_at || '  -  ' || jira_user.user_display_name || ':  ' || comment.body, '\\n')\n\n as conversation,\n    count(comment.comment_id) as count_comments\n\n    from\n    comment \n    join jira_user on comment.author_user_id = jira_user.user_id\n\n    group by 1\n)\n\nselect * from agg_comments\n)select\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_jira__issue_comments\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.jira.int_jira__issue_comments", "sql": " __dbt__cte__int_jira__issue_comments as (\n\n\nwith comment as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__comment\"\n\n    order by issue_id, created_at asc\n\n),\n\n-- user is a reserved keyword in AWS \njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__user\"\n),\n\nagg_comments as (\n\n    select \n    comment.issue_id,\n    \n    string_agg(comment.created_at || '  -  ' || jira_user.user_display_name || ':  ' || comment.body, '\\n')\n\n as conversation,\n    count(comment.comment_id) as count_comments\n\n    from\n    comment \n    join jira_user on comment.author_user_id = jira_user.user_id\n\n    group by 1\n)\n\nselect * from agg_comments\n)"}], "relation_name": null, "column_name": "issue_id", "file_key_name": "models.int_jira__issue_comments"}, "test.jira.not_null_int_jira__issue_comments_issue_id.9f16878e45": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "issue_id", "model": "{{ get_where_subquery(ref('int_jira__issue_comments')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__issue_comments"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "not_null_int_jira__issue_comments_issue_id"], "unique_id": "test.jira.not_null_int_jira__issue_comments_issue_id.9f16878e45", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "not_null_int_jira__issue_comments_issue_id.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "not_null_int_jira__issue_comments_issue_id", "alias": "not_null_int_jira__issue_comments_issue_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__issue_comments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/not_null_int_jira__issue_comments_issue_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.176278, "compiled_sql": "\n    \n    \n\nwith __dbt__cte__int_jira__issue_comments as (\n\n\nwith comment as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__comment\"\n\n    order by issue_id, created_at asc\n\n),\n\n-- user is a reserved keyword in AWS \njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__user\"\n),\n\nagg_comments as (\n\n    select \n    comment.issue_id,\n    \n    string_agg(comment.created_at || '  -  ' || jira_user.user_display_name || ':  ' || comment.body, '\\n')\n\n as conversation,\n    count(comment.comment_id) as count_comments\n\n    from\n    comment \n    join jira_user on comment.author_user_id = jira_user.user_id\n\n    group by 1\n)\n\nselect * from agg_comments\n)select *\nfrom __dbt__cte__int_jira__issue_comments\nwhere issue_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.jira.int_jira__issue_comments", "sql": " __dbt__cte__int_jira__issue_comments as (\n\n\nwith comment as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__comment\"\n\n    order by issue_id, created_at asc\n\n),\n\n-- user is a reserved keyword in AWS \njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__user\"\n),\n\nagg_comments as (\n\n    select \n    comment.issue_id,\n    \n    string_agg(comment.created_at || '  -  ' || jira_user.user_display_name || ':  ' || comment.body, '\\n')\n\n as conversation,\n    count(comment.comment_id) as count_comments\n\n    from\n    comment \n    join jira_user on comment.author_user_id = jira_user.user_id\n\n    group by 1\n)\n\nselect * from agg_comments\n)"}], "relation_name": null, "column_name": "issue_id", "file_key_name": "models.int_jira__issue_comments"}, "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_epic_issue_id__epic_issue_id.9ddee9201b": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4f049bddcf29586e6c474b917f4874cb\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["issue_id", "epic_issue_id"], "model": "{{ get_where_subquery(ref('int_jira__issue_epic')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__issue_epic"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4f049bddcf29586e6c474b917f4874cb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "dbt_utils_unique_combination_of_columns_int_jira__issue_epic_issue_id__epic_issue_id"], "unique_id": "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_epic_issue_id__epic_issue_id.9ddee9201b", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "dbt_utils_unique_combination_o_4f049bddcf29586e6c474b917f4874cb.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "dbt_utils_unique_combination_of_columns_int_jira__issue_epic_issue_id__epic_issue_id", "alias": "dbt_utils_unique_combination_o_4f049bddcf29586e6c474b917f4874cb", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__issue_epic"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/dbt_utils_unique_combination_o_4f049bddcf29586e6c474b917f4874cb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_4f049bddcf29586e6c474b917f4874cb"}, "created_at": 1663707929.1775942, "compiled_sql": "\n\n\n\n\n\nwith  __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    fields.field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_epic as (\n-- issue-epic relationships are either captured via the issue's parent_issue_id (next-gen projects)\n-- or through the 'Epic Link' field (classic projects)\nwith epic_field_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_field_history\n    where lower(field_name) like 'epic%link'\n    \n),\n\norder_epic_links as (\n\n    select\n        issue_id,\n        cast(field_value as \n    int\n ) as epic_issue_id,\n\n        row_number() over (\n                partition by issue_id order by updated_at desc\n                ) as row_num\n\n    from epic_field_history\n),\n\nlast_epic_link as (\n\n    select \n      issue_id, \n      epic_issue_id \n    \n    from order_epic_links\n    where row_num = 1\n)\n\nselect *\nfrom last_epic_link\n),validation_errors as (\n\n    select\n        issue_id, epic_issue_id\n    from __dbt__cte__int_jira__issue_epic\n    group by issue_id, epic_issue_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.jira.int_jira__issue_field_history", "sql": " __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    fields.field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n)"}, {"id": "model.jira.int_jira__issue_epic", "sql": " __dbt__cte__int_jira__issue_epic as (\n-- issue-epic relationships are either captured via the issue's parent_issue_id (next-gen projects)\n-- or through the 'Epic Link' field (classic projects)\nwith epic_field_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_field_history\n    where lower(field_name) like 'epic%link'\n    \n),\n\norder_epic_links as (\n\n    select\n        issue_id,\n        cast(field_value as \n    int\n ) as epic_issue_id,\n\n        row_number() over (\n                partition by issue_id order by updated_at desc\n                ) as row_num\n\n    from epic_field_history\n),\n\nlast_epic_link as (\n\n    select \n      issue_id, \n      epic_issue_id \n    \n    from order_epic_links\n    where row_num = 1\n)\n\nselect *\nfrom last_epic_link\n)"}], "relation_name": null, "column_name": null, "file_key_name": "models.int_jira__issue_epic"}, "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_sprint_issue_id__sprint_id.f6627c3eb3": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ea39ce1f6472c0c9cf2748824e8e5655\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["issue_id", "sprint_id"], "model": "{{ get_where_subquery(ref('int_jira__issue_sprint')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__issue_sprint"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ea39ce1f6472c0c9cf2748824e8e5655", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "dbt_utils_unique_combination_of_columns_int_jira__issue_sprint_issue_id__sprint_id"], "unique_id": "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_sprint_issue_id__sprint_id.f6627c3eb3", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "dbt_utils_unique_combination_o_ea39ce1f6472c0c9cf2748824e8e5655.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "dbt_utils_unique_combination_of_columns_int_jira__issue_sprint_issue_id__sprint_id", "alias": "dbt_utils_unique_combination_o_ea39ce1f6472c0c9cf2748824e8e5655", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__issue_sprint"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/dbt_utils_unique_combination_o_ea39ce1f6472c0c9cf2748824e8e5655.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_ea39ce1f6472c0c9cf2748824e8e5655"}, "created_at": 1663707929.184905, "compiled_sql": "\n\n\n\n\n\nwith  __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    fields.field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_sprint as (\n\n\nwith sprint as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__sprint\"\n\n),\n\nfield_history as (\n\n     -- sprints don't appear to be capable of multiselect in the UI...\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n),\n\n-- only grab history pertaining to sprints\nsprint_field_history as (\n\n    select \n        field_history.*,\n        row_number() over (\n                    partition by issue_id order by updated_at desc\n                    ) as row_num\n\n    from field_history\n    where lower(field_name) = 'sprint'\n\n),\n\nlast_sprint as (\n  \n    select *\n    from sprint_field_history\n    \n    where row_num = 1\n\n),\n\nsprint_rollovers as (\n\n    select \n        issue_id,\n        count(distinct case when field_value is not null then field_value end) as count_sprint_changes\n    \n    from sprint_field_history\n    group by 1\n\n),\n\nissue_sprint as (\n\n    select \n        last_sprint.issue_id,\n        last_sprint.field_value as sprint_id,\n        sprint.sprint_name,\n        sprint.board_id,\n        sprint.started_at as sprint_started_at,\n        sprint.ended_at as sprint_ended_at,\n        sprint.completed_at as sprint_completed_at,\n        coalesce(sprint_rollovers.count_sprint_changes, 0) as count_sprint_changes\n\n    from \n    last_sprint \n    join sprint on last_sprint.field_value = cast(sprint.sprint_id as \n    varchar\n)\n    left join sprint_rollovers on sprint_rollovers.issue_id = last_sprint.issue_id\n    \n)\n\nselect * from issue_sprint\n),validation_errors as (\n\n    select\n        issue_id, sprint_id\n    from __dbt__cte__int_jira__issue_sprint\n    group by issue_id, sprint_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.jira.int_jira__issue_multiselect_history", "sql": " __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    fields.field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n)"}, {"id": "model.jira.int_jira__issue_sprint", "sql": " __dbt__cte__int_jira__issue_sprint as (\n\n\nwith sprint as (\n\n    select * \n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__sprint\"\n\n),\n\nfield_history as (\n\n     -- sprints don't appear to be capable of multiselect in the UI...\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n),\n\n-- only grab history pertaining to sprints\nsprint_field_history as (\n\n    select \n        field_history.*,\n        row_number() over (\n                    partition by issue_id order by updated_at desc\n                    ) as row_num\n\n    from field_history\n    where lower(field_name) = 'sprint'\n\n),\n\nlast_sprint as (\n  \n    select *\n    from sprint_field_history\n    \n    where row_num = 1\n\n),\n\nsprint_rollovers as (\n\n    select \n        issue_id,\n        count(distinct case when field_value is not null then field_value end) as count_sprint_changes\n    \n    from sprint_field_history\n    group by 1\n\n),\n\nissue_sprint as (\n\n    select \n        last_sprint.issue_id,\n        last_sprint.field_value as sprint_id,\n        sprint.sprint_name,\n        sprint.board_id,\n        sprint.started_at as sprint_started_at,\n        sprint.ended_at as sprint_ended_at,\n        sprint.completed_at as sprint_completed_at,\n        coalesce(sprint_rollovers.count_sprint_changes, 0) as count_sprint_changes\n\n    from \n    last_sprint \n    join sprint on last_sprint.field_value = cast(sprint.sprint_id as \n    varchar\n)\n    left join sprint_rollovers on sprint_rollovers.issue_id = last_sprint.issue_id\n    \n)\n\nselect * from issue_sprint\n)"}], "relation_name": null, "column_name": null, "file_key_name": "models.int_jira__issue_sprint"}, "test.jira.unique_int_jira__issue_type_parents_issue_id.c07f8c6af3": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "issue_id", "model": "{{ get_where_subquery(ref('int_jira__issue_type_parents')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__issue_type_parents"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "unique_int_jira__issue_type_parents_issue_id"], "unique_id": "test.jira.unique_int_jira__issue_type_parents_issue_id.c07f8c6af3", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "unique_int_jira__issue_type_parents_issue_id.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "unique_int_jira__issue_type_parents_issue_id", "alias": "unique_int_jira__issue_type_parents_issue_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__issue_type_parents"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/unique_int_jira__issue_type_parents_issue_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.187915, "compiled_sql": "\n    \n    \n\nselect\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__issue_type_parents\"\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "issue_id", "file_key_name": "models.int_jira__issue_type_parents"}, "test.jira.not_null_int_jira__issue_type_parents_issue_id.8dd98255b0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "issue_id", "model": "{{ get_where_subquery(ref('int_jira__issue_type_parents')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__issue_type_parents"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "not_null_int_jira__issue_type_parents_issue_id"], "unique_id": "test.jira.not_null_int_jira__issue_type_parents_issue_id.8dd98255b0", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "not_null_int_jira__issue_type_parents_issue_id.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "not_null_int_jira__issue_type_parents_issue_id", "alias": "not_null_int_jira__issue_type_parents_issue_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__issue_type_parents"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/not_null_int_jira__issue_type_parents_issue_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.188878, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__issue_type_parents\"\nwhere issue_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "issue_id", "file_key_name": "models.int_jira__issue_type_parents"}, "test.jira.unique_int_jira__issue_users_issue_id.e3a5962431": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "issue_id", "model": "{{ get_where_subquery(ref('int_jira__issue_users')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__issue_users"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "unique_int_jira__issue_users_issue_id"], "unique_id": "test.jira.unique_int_jira__issue_users_issue_id.e3a5962431", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "unique_int_jira__issue_users_issue_id.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "unique_int_jira__issue_users_issue_id", "alias": "unique_int_jira__issue_users_issue_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__issue_users"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/unique_int_jira__issue_users_issue_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.189982, "compiled_sql": "\n    \n    \n\nwith __dbt__cte__int_jira__issue_users as (\n-- just grabs user attributes for issue assignees and reporters \n\nwith issue as (\n\n    -- including issue_id in here because snowflake for some reason ignores issue_id,\n    -- so we'll just always pull it out and explicitly select it\n    \n\n    select\n        issue_id,\n        coalesce(revised_parent_issue_id, parent_issue_id) as parent_issue_id,\n\n        \n\n    \"original_estimate_seconds\",\n  \"remaining_estimate_seconds\",\n  \"time_spent_seconds\",\n  \"assignee_user_id\",\n  \"created_at\",\n  \"resolved_at\",\n  \"creator_user_id\",\n  \"issue_description\",\n  \"due_date\",\n  \"environment\",\n  \"issue_type_id\",\n  \"issue_key\",\n  \"priority_id\",\n  \"project_id\",\n  \"reporter_user_id\",\n  \"resolution_id\",\n  \"status_id\",\n  \"status_changed_at\",\n  \"issue_name\",\n  \"updated_at\",\n  \"work_ratio\",\n  \"_fivetran_synced\",\n  \"issue_type\",\n  \"parent_issue_type\",\n  \"parent_issue_name\",\n  \"parent_issue_key\",\n  \"is_parent_epic\"\n\n\n    \n    from \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__issue_type_parents\"\n\n),\n\n-- user is a reserved keyword in AWS\njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__user\"\n),\n\nissue_user_join as (\n\n    select\n        issue.*,\n        assignee.user_display_name as assignee_name,\n        assignee.time_zone as assignee_timezone,\n        assignee.email as assignee_email,\n        reporter.email as reporter_email,\n        reporter.user_display_name as reporter_name,\n        reporter.time_zone as reporter_timezone\n        \n        \n    from issue\n    left join jira_user as assignee on issue.assignee_user_id = assignee.user_id \n    left join jira_user as reporter on issue.reporter_user_id = reporter.user_id\n\n)\n\nselect * \nfrom issue_user_join\n)select\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_jira__issue_users\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.jira.int_jira__issue_users", "sql": " __dbt__cte__int_jira__issue_users as (\n-- just grabs user attributes for issue assignees and reporters \n\nwith issue as (\n\n    -- including issue_id in here because snowflake for some reason ignores issue_id,\n    -- so we'll just always pull it out and explicitly select it\n    \n\n    select\n        issue_id,\n        coalesce(revised_parent_issue_id, parent_issue_id) as parent_issue_id,\n\n        \n\n    \"original_estimate_seconds\",\n  \"remaining_estimate_seconds\",\n  \"time_spent_seconds\",\n  \"assignee_user_id\",\n  \"created_at\",\n  \"resolved_at\",\n  \"creator_user_id\",\n  \"issue_description\",\n  \"due_date\",\n  \"environment\",\n  \"issue_type_id\",\n  \"issue_key\",\n  \"priority_id\",\n  \"project_id\",\n  \"reporter_user_id\",\n  \"resolution_id\",\n  \"status_id\",\n  \"status_changed_at\",\n  \"issue_name\",\n  \"updated_at\",\n  \"work_ratio\",\n  \"_fivetran_synced\",\n  \"issue_type\",\n  \"parent_issue_type\",\n  \"parent_issue_name\",\n  \"parent_issue_key\",\n  \"is_parent_epic\"\n\n\n    \n    from \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__issue_type_parents\"\n\n),\n\n-- user is a reserved keyword in AWS\njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__user\"\n),\n\nissue_user_join as (\n\n    select\n        issue.*,\n        assignee.user_display_name as assignee_name,\n        assignee.time_zone as assignee_timezone,\n        assignee.email as assignee_email,\n        reporter.email as reporter_email,\n        reporter.user_display_name as reporter_name,\n        reporter.time_zone as reporter_timezone\n        \n        \n    from issue\n    left join jira_user as assignee on issue.assignee_user_id = assignee.user_id \n    left join jira_user as reporter on issue.reporter_user_id = reporter.user_id\n\n)\n\nselect * \nfrom issue_user_join\n)"}], "relation_name": null, "column_name": "issue_id", "file_key_name": "models.int_jira__issue_users"}, "test.jira.not_null_int_jira__issue_users_issue_id.480b7b6beb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "issue_id", "model": "{{ get_where_subquery(ref('int_jira__issue_users')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__issue_users"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "not_null_int_jira__issue_users_issue_id"], "unique_id": "test.jira.not_null_int_jira__issue_users_issue_id.480b7b6beb", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "not_null_int_jira__issue_users_issue_id.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "not_null_int_jira__issue_users_issue_id", "alias": "not_null_int_jira__issue_users_issue_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__issue_users"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/not_null_int_jira__issue_users_issue_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.190922, "compiled_sql": "\n    \n    \n\nwith __dbt__cte__int_jira__issue_users as (\n-- just grabs user attributes for issue assignees and reporters \n\nwith issue as (\n\n    -- including issue_id in here because snowflake for some reason ignores issue_id,\n    -- so we'll just always pull it out and explicitly select it\n    \n\n    select\n        issue_id,\n        coalesce(revised_parent_issue_id, parent_issue_id) as parent_issue_id,\n\n        \n\n    \"original_estimate_seconds\",\n  \"remaining_estimate_seconds\",\n  \"time_spent_seconds\",\n  \"assignee_user_id\",\n  \"created_at\",\n  \"resolved_at\",\n  \"creator_user_id\",\n  \"issue_description\",\n  \"due_date\",\n  \"environment\",\n  \"issue_type_id\",\n  \"issue_key\",\n  \"priority_id\",\n  \"project_id\",\n  \"reporter_user_id\",\n  \"resolution_id\",\n  \"status_id\",\n  \"status_changed_at\",\n  \"issue_name\",\n  \"updated_at\",\n  \"work_ratio\",\n  \"_fivetran_synced\",\n  \"issue_type\",\n  \"parent_issue_type\",\n  \"parent_issue_name\",\n  \"parent_issue_key\",\n  \"is_parent_epic\"\n\n\n    \n    from \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__issue_type_parents\"\n\n),\n\n-- user is a reserved keyword in AWS\njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__user\"\n),\n\nissue_user_join as (\n\n    select\n        issue.*,\n        assignee.user_display_name as assignee_name,\n        assignee.time_zone as assignee_timezone,\n        assignee.email as assignee_email,\n        reporter.email as reporter_email,\n        reporter.user_display_name as reporter_name,\n        reporter.time_zone as reporter_timezone\n        \n        \n    from issue\n    left join jira_user as assignee on issue.assignee_user_id = assignee.user_id \n    left join jira_user as reporter on issue.reporter_user_id = reporter.user_id\n\n)\n\nselect * \nfrom issue_user_join\n)select *\nfrom __dbt__cte__int_jira__issue_users\nwhere issue_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.jira.int_jira__issue_users", "sql": " __dbt__cte__int_jira__issue_users as (\n-- just grabs user attributes for issue assignees and reporters \n\nwith issue as (\n\n    -- including issue_id in here because snowflake for some reason ignores issue_id,\n    -- so we'll just always pull it out and explicitly select it\n    \n\n    select\n        issue_id,\n        coalesce(revised_parent_issue_id, parent_issue_id) as parent_issue_id,\n\n        \n\n    \"original_estimate_seconds\",\n  \"remaining_estimate_seconds\",\n  \"time_spent_seconds\",\n  \"assignee_user_id\",\n  \"created_at\",\n  \"resolved_at\",\n  \"creator_user_id\",\n  \"issue_description\",\n  \"due_date\",\n  \"environment\",\n  \"issue_type_id\",\n  \"issue_key\",\n  \"priority_id\",\n  \"project_id\",\n  \"reporter_user_id\",\n  \"resolution_id\",\n  \"status_id\",\n  \"status_changed_at\",\n  \"issue_name\",\n  \"updated_at\",\n  \"work_ratio\",\n  \"_fivetran_synced\",\n  \"issue_type\",\n  \"parent_issue_type\",\n  \"parent_issue_name\",\n  \"parent_issue_key\",\n  \"is_parent_epic\"\n\n\n    \n    from \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__issue_type_parents\"\n\n),\n\n-- user is a reserved keyword in AWS\njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__user\"\n),\n\nissue_user_join as (\n\n    select\n        issue.*,\n        assignee.user_display_name as assignee_name,\n        assignee.time_zone as assignee_timezone,\n        assignee.email as assignee_email,\n        reporter.email as reporter_email,\n        reporter.user_display_name as reporter_name,\n        reporter.time_zone as reporter_timezone\n        \n        \n    from issue\n    left join jira_user as assignee on issue.assignee_user_id = assignee.user_id \n    left join jira_user as reporter on issue.reporter_user_id = reporter.user_id\n\n)\n\nselect * \nfrom issue_user_join\n)"}], "relation_name": null, "column_name": "issue_id", "file_key_name": "models.int_jira__issue_users"}, "test.jira.unique_int_jira__agg_multiselect_history_batch_id.14b3dea579": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "batch_id", "model": "{{ get_where_subquery(ref('int_jira__agg_multiselect_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__agg_multiselect_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "unique_int_jira__agg_multiselect_history_batch_id"], "unique_id": "test.jira.unique_int_jira__agg_multiselect_history_batch_id.14b3dea579", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "unique_int_jira__agg_multiselect_history_batch_id.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "unique_int_jira__agg_multiselect_history_batch_id", "alias": "unique_int_jira__agg_multiselect_history_batch_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__agg_multiselect_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/unique_int_jira__agg_multiselect_history_batch_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.191872, "compiled_sql": "\n    \n    \n\nselect\n    batch_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__agg_multiselect_history\"\nwhere batch_id is not null\ngroup by batch_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "batch_id", "file_key_name": "models.int_jira__agg_multiselect_history"}, "test.jira.not_null_int_jira__agg_multiselect_history_batch_id.7d6d2460a8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "batch_id", "model": "{{ get_where_subquery(ref('int_jira__agg_multiselect_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__agg_multiselect_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "not_null_int_jira__agg_multiselect_history_batch_id"], "unique_id": "test.jira.not_null_int_jira__agg_multiselect_history_batch_id.7d6d2460a8", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "not_null_int_jira__agg_multiselect_history_batch_id.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "not_null_int_jira__agg_multiselect_history_batch_id", "alias": "not_null_int_jira__agg_multiselect_history_batch_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__agg_multiselect_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/not_null_int_jira__agg_multiselect_history_batch_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.192794, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__agg_multiselect_history\"\nwhere batch_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "batch_id", "file_key_name": "models.int_jira__agg_multiselect_history"}, "test.jira.unique_int_jira__combine_field_histories_combined_history_id.5b6b492428": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "combined_history_id", "model": "{{ get_where_subquery(ref('int_jira__combine_field_histories')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__combine_field_histories"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "unique_int_jira__combine_field_histories_combined_history_id"], "unique_id": "test.jira.unique_int_jira__combine_field_histories_combined_history_id.5b6b492428", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "unique_int_jira__combine_field_histories_combined_history_id.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "unique_int_jira__combine_field_histories_combined_history_id", "alias": "unique_int_jira__combine_field_histories_combined_history_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__combine_field_histories"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/unique_int_jira__combine_field_histories_combined_history_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.19396, "compiled_sql": "\n    \n    \n\nselect\n    combined_history_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__combine_field_histories\"\nwhere combined_history_id is not null\ngroup by combined_history_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "combined_history_id", "file_key_name": "models.int_jira__combine_field_histories"}, "test.jira.not_null_int_jira__combine_field_histories_combined_history_id.943e81a794": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "combined_history_id", "model": "{{ get_where_subquery(ref('int_jira__combine_field_histories')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__combine_field_histories"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "not_null_int_jira__combine_field_histories_combined_history_id"], "unique_id": "test.jira.not_null_int_jira__combine_field_histories_combined_history_id.943e81a794", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "not_null_int_jira__combine_field_histories_combined_history_id.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "not_null_int_jira__combine_field_histories_combined_history_id", "alias": "not_null_int_jira__combine_field_histories_combined_history_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__combine_field_histories"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/not_null_int_jira__combine_field_histories_combined_history_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.1949818, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__combine_field_histories\"\nwhere combined_history_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "combined_history_id", "file_key_name": "models.int_jira__combine_field_histories"}, "test.jira.unique_int_jira__issue_calendar_spine_issue_day_id.c49483d2e5": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "issue_day_id", "model": "{{ get_where_subquery(ref('int_jira__issue_calendar_spine')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__issue_calendar_spine"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "unique_int_jira__issue_calendar_spine_issue_day_id"], "unique_id": "test.jira.unique_int_jira__issue_calendar_spine_issue_day_id.c49483d2e5", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "unique_int_jira__issue_calendar_spine_issue_day_id.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "unique_int_jira__issue_calendar_spine_issue_day_id", "alias": "unique_int_jira__issue_calendar_spine_issue_day_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__issue_calendar_spine"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/unique_int_jira__issue_calendar_spine_issue_day_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.195928, "compiled_sql": "\n    \n    \n\nselect\n    issue_day_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__issue_calendar_spine\"\nwhere issue_day_id is not null\ngroup by issue_day_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "issue_day_id", "file_key_name": "models.int_jira__issue_calendar_spine"}, "test.jira.not_null_int_jira__issue_calendar_spine_issue_day_id.a9512b8e8a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "issue_day_id", "model": "{{ get_where_subquery(ref('int_jira__issue_calendar_spine')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__issue_calendar_spine"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "not_null_int_jira__issue_calendar_spine_issue_day_id"], "unique_id": "test.jira.not_null_int_jira__issue_calendar_spine_issue_day_id.a9512b8e8a", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "not_null_int_jira__issue_calendar_spine_issue_day_id.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "not_null_int_jira__issue_calendar_spine_issue_day_id", "alias": "not_null_int_jira__issue_calendar_spine_issue_day_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__issue_calendar_spine"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/not_null_int_jira__issue_calendar_spine_issue_day_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.1969988, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__issue_calendar_spine\"\nwhere issue_day_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "issue_day_id", "file_key_name": "models.int_jira__issue_calendar_spine"}, "test.jira.unique_int_jira__daily_field_history_issue_field_day_id.bfd34ced78": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "issue_field_day_id", "model": "{{ get_where_subquery(ref('int_jira__daily_field_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__daily_field_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "unique_int_jira__daily_field_history_issue_field_day_id"], "unique_id": "test.jira.unique_int_jira__daily_field_history_issue_field_day_id.bfd34ced78", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "unique_int_jira__daily_field_history_issue_field_day_id.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "unique_int_jira__daily_field_history_issue_field_day_id", "alias": "unique_int_jira__daily_field_history_issue_field_day_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__daily_field_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/unique_int_jira__daily_field_history_issue_field_day_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.1979232, "compiled_sql": "\n    \n    \n\nselect\n    issue_field_day_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__daily_field_history\"\nwhere issue_field_day_id is not null\ngroup by issue_field_day_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "issue_field_day_id", "file_key_name": "models.int_jira__daily_field_history"}, "test.jira.not_null_int_jira__daily_field_history_issue_field_day_id.c910c3df84": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "issue_field_day_id", "model": "{{ get_where_subquery(ref('int_jira__daily_field_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__daily_field_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "not_null_int_jira__daily_field_history_issue_field_day_id"], "unique_id": "test.jira.not_null_int_jira__daily_field_history_issue_field_day_id.c910c3df84", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "not_null_int_jira__daily_field_history_issue_field_day_id.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "not_null_int_jira__daily_field_history_issue_field_day_id", "alias": "not_null_int_jira__daily_field_history_issue_field_day_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__daily_field_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/not_null_int_jira__daily_field_history_issue_field_day_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.198854, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__daily_field_history\"\nwhere issue_field_day_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "issue_field_day_id", "file_key_name": "models.int_jira__daily_field_history"}, "test.jira.unique_int_jira__pivot_daily_field_history_issue_day_id.46c6f9a842": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "issue_day_id", "model": "{{ get_where_subquery(ref('int_jira__pivot_daily_field_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__pivot_daily_field_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "unique_int_jira__pivot_daily_field_history_issue_day_id"], "unique_id": "test.jira.unique_int_jira__pivot_daily_field_history_issue_day_id.46c6f9a842", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "unique_int_jira__pivot_daily_field_history_issue_day_id.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "unique_int_jira__pivot_daily_field_history_issue_day_id", "alias": "unique_int_jira__pivot_daily_field_history_issue_day_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__pivot_daily_field_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/unique_int_jira__pivot_daily_field_history_issue_day_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.199776, "compiled_sql": "\n    \n    \n\nselect\n    issue_day_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__pivot_daily_field_history\"\nwhere issue_day_id is not null\ngroup by issue_day_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "issue_day_id", "file_key_name": "models.int_jira__pivot_daily_field_history"}, "test.jira.not_null_int_jira__pivot_daily_field_history_issue_day_id.b697c971fd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "issue_day_id", "model": "{{ get_where_subquery(ref('int_jira__pivot_daily_field_history')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__pivot_daily_field_history"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "not_null_int_jira__pivot_daily_field_history_issue_day_id"], "unique_id": "test.jira.not_null_int_jira__pivot_daily_field_history_issue_day_id.b697c971fd", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "not_null_int_jira__pivot_daily_field_history_issue_day_id.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "not_null_int_jira__pivot_daily_field_history_issue_day_id", "alias": "not_null_int_jira__pivot_daily_field_history_issue_day_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__pivot_daily_field_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/not_null_int_jira__pivot_daily_field_history_issue_day_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.200806, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__pivot_daily_field_history\"\nwhere issue_day_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "issue_day_id", "file_key_name": "models.int_jira__pivot_daily_field_history"}, "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_field_history_field_id__issue_id__updated_at.34d1b3eaa1": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_6a26d6675a6f68d7ad230e5b0d114426\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["field_id", "issue_id", "updated_at"], "model": "{{ get_where_subquery(ref('int_jira__issue_field_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__issue_field_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_6a26d6675a6f68d7ad230e5b0d114426", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "dbt_utils_unique_combination_of_columns_int_jira__issue_field_history_field_id__issue_id__updated_at"], "unique_id": "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_field_history_field_id__issue_id__updated_at.34d1b3eaa1", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "dbt_utils_unique_combination_o_6a26d6675a6f68d7ad230e5b0d114426.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "dbt_utils_unique_combination_of_columns_int_jira__issue_field_history_field_id__issue_id__updated_at", "alias": "dbt_utils_unique_combination_o_6a26d6675a6f68d7ad230e5b0d114426", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__issue_field_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/dbt_utils_unique_combination_o_6a26d6675a6f68d7ad230e5b0d114426.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_6a26d6675a6f68d7ad230e5b0d114426"}, "created_at": 1663707929.2017379, "compiled_sql": "\n\n\n\n\n\nwith  __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    fields.field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),validation_errors as (\n\n    select\n        field_id, issue_id, updated_at\n    from __dbt__cte__int_jira__issue_field_history\n    group by field_id, issue_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.jira.int_jira__issue_field_history", "sql": " __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    fields.field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n)"}], "relation_name": null, "column_name": null, "file_key_name": "models.int_jira__issue_field_history"}, "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_multiselect_history__fivetran_id__updated_at.aad394167d": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3302141fdcb5257bdeed7d73028a6b10\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_fivetran_id", "updated_at"], "model": "{{ get_where_subquery(ref('int_jira__issue_multiselect_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__issue_multiselect_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3302141fdcb5257bdeed7d73028a6b10", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "dbt_utils_unique_combination_of_columns_int_jira__issue_multiselect_history__fivetran_id__updated_at"], "unique_id": "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_multiselect_history__fivetran_id__updated_at.aad394167d", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "dbt_utils_unique_combination_o_3302141fdcb5257bdeed7d73028a6b10.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "dbt_utils_unique_combination_of_columns_int_jira__issue_multiselect_history__fivetran_id__updated_at", "alias": "dbt_utils_unique_combination_o_3302141fdcb5257bdeed7d73028a6b10", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__issue_multiselect_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/dbt_utils_unique_combination_o_3302141fdcb5257bdeed7d73028a6b10.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3302141fdcb5257bdeed7d73028a6b10"}, "created_at": 1663707929.204627, "compiled_sql": "\n\n\n\n\n\nwith  __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    fields.field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),validation_errors as (\n\n    select\n        _fivetran_id, updated_at\n    from __dbt__cte__int_jira__issue_multiselect_history\n    group by _fivetran_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.jira.int_jira__issue_multiselect_history", "sql": " __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    fields.field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n)"}], "relation_name": null, "column_name": null, "file_key_name": "models.int_jira__issue_multiselect_history"}, "test.jira.unique_int_jira__issue_assign_resolution_issue_id.f41f7c00ab": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "issue_id", "model": "{{ get_where_subquery(ref('int_jira__issue_assign_resolution')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__issue_assign_resolution"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "unique_int_jira__issue_assign_resolution_issue_id"], "unique_id": "test.jira.unique_int_jira__issue_assign_resolution_issue_id.f41f7c00ab", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "unique_int_jira__issue_assign_resolution_issue_id.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "unique_int_jira__issue_assign_resolution_issue_id", "alias": "unique_int_jira__issue_assign_resolution_issue_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__issue_assign_resolution"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/unique_int_jira__issue_assign_resolution_issue_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.207229, "compiled_sql": "\n    \n    \n\nwith __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    fields.field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_assign_resolution as (\nwith issue_field_history as (\n    \n    select *\n    from __dbt__cte__int_jira__issue_field_history\n\n), \n\nfiltered as (\n    -- we're only looking at assignments and resolutions, which are single-field values\n    select *\n    from issue_field_history\n\n    where (lower(field_id) = 'assignee'\n    or lower(field_id) = 'resolutiondate')\n\n    and field_value is not null -- remove initial null rows\n),\n\nissue_dates as (\n\n    select\n\n        issue_id,\n        min(case when field_id = 'assignee' then updated_at end) as first_assigned_at,\n        max(case when field_id = 'assignee' then updated_at end) as last_assigned_at,\n        min(case when field_id = 'resolutiondate' then updated_at end) as first_resolved_at -- in case it's been re-opened\n\n    from filtered\n    group by 1\n)\n\nselect *\nfrom issue_dates\n)select\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_jira__issue_assign_resolution\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.jira.int_jira__issue_field_history", "sql": " __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    fields.field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n)"}, {"id": "model.jira.int_jira__issue_assign_resolution", "sql": " __dbt__cte__int_jira__issue_assign_resolution as (\nwith issue_field_history as (\n    \n    select *\n    from __dbt__cte__int_jira__issue_field_history\n\n), \n\nfiltered as (\n    -- we're only looking at assignments and resolutions, which are single-field values\n    select *\n    from issue_field_history\n\n    where (lower(field_id) = 'assignee'\n    or lower(field_id) = 'resolutiondate')\n\n    and field_value is not null -- remove initial null rows\n),\n\nissue_dates as (\n\n    select\n\n        issue_id,\n        min(case when field_id = 'assignee' then updated_at end) as first_assigned_at,\n        max(case when field_id = 'assignee' then updated_at end) as last_assigned_at,\n        min(case when field_id = 'resolutiondate' then updated_at end) as first_resolved_at -- in case it's been re-opened\n\n    from filtered\n    group by 1\n)\n\nselect *\nfrom issue_dates\n)"}], "relation_name": null, "column_name": "issue_id", "file_key_name": "models.int_jira__issue_assign_resolution"}, "test.jira.not_null_int_jira__issue_assign_resolution_issue_id.b3af89c733": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "issue_id", "model": "{{ get_where_subquery(ref('int_jira__issue_assign_resolution')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__issue_assign_resolution"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "not_null_int_jira__issue_assign_resolution_issue_id"], "unique_id": "test.jira.not_null_int_jira__issue_assign_resolution_issue_id.b3af89c733", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "not_null_int_jira__issue_assign_resolution_issue_id.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "not_null_int_jira__issue_assign_resolution_issue_id", "alias": "not_null_int_jira__issue_assign_resolution_issue_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__issue_assign_resolution"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/not_null_int_jira__issue_assign_resolution_issue_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.2081761, "compiled_sql": "\n    \n    \n\nwith __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    fields.field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_assign_resolution as (\nwith issue_field_history as (\n    \n    select *\n    from __dbt__cte__int_jira__issue_field_history\n\n), \n\nfiltered as (\n    -- we're only looking at assignments and resolutions, which are single-field values\n    select *\n    from issue_field_history\n\n    where (lower(field_id) = 'assignee'\n    or lower(field_id) = 'resolutiondate')\n\n    and field_value is not null -- remove initial null rows\n),\n\nissue_dates as (\n\n    select\n\n        issue_id,\n        min(case when field_id = 'assignee' then updated_at end) as first_assigned_at,\n        max(case when field_id = 'assignee' then updated_at end) as last_assigned_at,\n        min(case when field_id = 'resolutiondate' then updated_at end) as first_resolved_at -- in case it's been re-opened\n\n    from filtered\n    group by 1\n)\n\nselect *\nfrom issue_dates\n)select *\nfrom __dbt__cte__int_jira__issue_assign_resolution\nwhere issue_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.jira.int_jira__issue_field_history", "sql": " __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    fields.field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n)"}, {"id": "model.jira.int_jira__issue_assign_resolution", "sql": " __dbt__cte__int_jira__issue_assign_resolution as (\nwith issue_field_history as (\n    \n    select *\n    from __dbt__cte__int_jira__issue_field_history\n\n), \n\nfiltered as (\n    -- we're only looking at assignments and resolutions, which are single-field values\n    select *\n    from issue_field_history\n\n    where (lower(field_id) = 'assignee'\n    or lower(field_id) = 'resolutiondate')\n\n    and field_value is not null -- remove initial null rows\n),\n\nissue_dates as (\n\n    select\n\n        issue_id,\n        min(case when field_id = 'assignee' then updated_at end) as first_assigned_at,\n        max(case when field_id = 'assignee' then updated_at end) as last_assigned_at,\n        min(case when field_id = 'resolutiondate' then updated_at end) as first_resolved_at -- in case it's been re-opened\n\n    from filtered\n    group by 1\n)\n\nselect *\nfrom issue_dates\n)"}], "relation_name": null, "column_name": "issue_id", "file_key_name": "models.int_jira__issue_assign_resolution"}, "test.jira.unique_int_jira__field_history_scd_issue_day_id.21b932e949": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "issue_day_id", "model": "{{ get_where_subquery(ref('int_jira__field_history_scd')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__field_history_scd"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "unique_int_jira__field_history_scd_issue_day_id"], "unique_id": "test.jira.unique_int_jira__field_history_scd_issue_day_id.21b932e949", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "unique_int_jira__field_history_scd_issue_day_id.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "unique_int_jira__field_history_scd_issue_day_id", "alias": "unique_int_jira__field_history_scd_issue_day_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__field_history_scd"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/unique_int_jira__field_history_scd_issue_day_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.20911, "compiled_sql": "\n    \n    \n\nselect\n    issue_day_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__field_history_scd\"\nwhere issue_day_id is not null\ngroup by issue_day_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "issue_day_id", "file_key_name": "models.int_jira__field_history_scd"}, "test.jira.not_null_int_jira__field_history_scd_issue_day_id.327ac0856c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "issue_day_id", "model": "{{ get_where_subquery(ref('int_jira__field_history_scd')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__field_history_scd"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "not_null_int_jira__field_history_scd_issue_day_id"], "unique_id": "test.jira.not_null_int_jira__field_history_scd_issue_day_id.327ac0856c", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "not_null_int_jira__field_history_scd_issue_day_id.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "not_null_int_jira__field_history_scd_issue_day_id", "alias": "not_null_int_jira__field_history_scd_issue_day_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__field_history_scd"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/not_null_int_jira__field_history_scd_issue_day_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.2101388, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"jira_integration_tests_int_jira\".\"int_jira__field_history_scd\"\nwhere issue_day_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "issue_day_id", "file_key_name": "models.int_jira__field_history_scd"}, "test.jira.unique_int_jira__issue_versions_issue_id.e2a88132de": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "issue_id", "model": "{{ get_where_subquery(ref('int_jira__issue_versions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__issue_versions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "unique_int_jira__issue_versions_issue_id"], "unique_id": "test.jira.unique_int_jira__issue_versions_issue_id.e2a88132de", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "unique_int_jira__issue_versions_issue_id.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "unique_int_jira__issue_versions_issue_id", "alias": "unique_int_jira__issue_versions_issue_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__issue_versions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/unique_int_jira__issue_versions_issue_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.211052, "compiled_sql": "\n    \n    \n\nwith __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    fields.field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_versions as (\n\n\nwith version as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__version\"\n),\n\nversion_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n    where field_id = 'versions'\n        or field_id = 'fixVersions'\n),\n\norder_versions as (\n\n    select\n        *,\n        -- using rank so batches stick together\n        rank() over (\n            partition by field_id, issue_id\n            order by updated_at desc\n            ) as row_num\n\n    from version_history\n),\n\nlatest_versions as (\n\n    select \n        field_id,\n        issue_id,\t\n        updated_at,\n        cast(field_value as \n    int\n) as version_id\n    from order_versions\n    where row_num = 1\n),\n\nversion_info as (\n\n    select \n        latest_versions.field_id,\n        latest_versions.issue_id,\n        \n    string_agg(version.version_name, ', ')\n\n as versions\n\n    from latest_versions\n    join version on latest_versions.version_id = version.version_id\n\n    group by 1,2\n),\n\nsplit_versions as (\n\n    select \n        issue_id,\n        case when field_id = 'versions' then versions else null end as affects_versions,\n        case when field_id = 'fixVersions' then versions else null end as fixes_versions\n    from version_info\n),\n\nfinal as (\n\n    select \n        issue_id,\n        max(affects_versions) as affects_versions,\n        max(fixes_versions) as fixes_versions\n    from split_versions\n    group by 1\n)\n\nselect *\nfrom final\n)select\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_jira__issue_versions\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.jira.int_jira__issue_multiselect_history", "sql": " __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    fields.field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n)"}, {"id": "model.jira.int_jira__issue_versions", "sql": " __dbt__cte__int_jira__issue_versions as (\n\n\nwith version as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__version\"\n),\n\nversion_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n    where field_id = 'versions'\n        or field_id = 'fixVersions'\n),\n\norder_versions as (\n\n    select\n        *,\n        -- using rank so batches stick together\n        rank() over (\n            partition by field_id, issue_id\n            order by updated_at desc\n            ) as row_num\n\n    from version_history\n),\n\nlatest_versions as (\n\n    select \n        field_id,\n        issue_id,\t\n        updated_at,\n        cast(field_value as \n    int\n) as version_id\n    from order_versions\n    where row_num = 1\n),\n\nversion_info as (\n\n    select \n        latest_versions.field_id,\n        latest_versions.issue_id,\n        \n    string_agg(version.version_name, ', ')\n\n as versions\n\n    from latest_versions\n    join version on latest_versions.version_id = version.version_id\n\n    group by 1,2\n),\n\nsplit_versions as (\n\n    select \n        issue_id,\n        case when field_id = 'versions' then versions else null end as affects_versions,\n        case when field_id = 'fixVersions' then versions else null end as fixes_versions\n    from version_info\n),\n\nfinal as (\n\n    select \n        issue_id,\n        max(affects_versions) as affects_versions,\n        max(fixes_versions) as fixes_versions\n    from split_versions\n    group by 1\n)\n\nselect *\nfrom final\n)"}], "relation_name": null, "column_name": "issue_id", "file_key_name": "models.int_jira__issue_versions"}, "test.jira.not_null_int_jira__issue_versions_issue_id.54c4cd445e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "issue_id", "model": "{{ get_where_subquery(ref('int_jira__issue_versions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira.int_jira__issue_versions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira", "intermediate", "not_null_int_jira__issue_versions_issue_id"], "unique_id": "test.jira.not_null_int_jira__issue_versions_issue_id.54c4cd445e", "package_name": "jira", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira", "path": "not_null_int_jira__issue_versions_issue_id.sql", "original_file_path": "models/intermediate/int_jira.yml", "name": "not_null_int_jira__issue_versions_issue_id", "alias": "not_null_int_jira__issue_versions_issue_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["int_jira__issue_versions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira/models/intermediate/int_jira.yml/not_null_int_jira__issue_versions_issue_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.2119732, "compiled_sql": "\n    \n    \n\nwith __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    fields.field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_versions as (\n\n\nwith version as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__version\"\n),\n\nversion_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n    where field_id = 'versions'\n        or field_id = 'fixVersions'\n),\n\norder_versions as (\n\n    select\n        *,\n        -- using rank so batches stick together\n        rank() over (\n            partition by field_id, issue_id\n            order by updated_at desc\n            ) as row_num\n\n    from version_history\n),\n\nlatest_versions as (\n\n    select \n        field_id,\n        issue_id,\t\n        updated_at,\n        cast(field_value as \n    int\n) as version_id\n    from order_versions\n    where row_num = 1\n),\n\nversion_info as (\n\n    select \n        latest_versions.field_id,\n        latest_versions.issue_id,\n        \n    string_agg(version.version_name, ', ')\n\n as versions\n\n    from latest_versions\n    join version on latest_versions.version_id = version.version_id\n\n    group by 1,2\n),\n\nsplit_versions as (\n\n    select \n        issue_id,\n        case when field_id = 'versions' then versions else null end as affects_versions,\n        case when field_id = 'fixVersions' then versions else null end as fixes_versions\n    from version_info\n),\n\nfinal as (\n\n    select \n        issue_id,\n        max(affects_versions) as affects_versions,\n        max(fixes_versions) as fixes_versions\n    from split_versions\n    group by 1\n)\n\nselect *\nfrom final\n)select *\nfrom __dbt__cte__int_jira__issue_versions\nwhere issue_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.jira.int_jira__issue_multiselect_history", "sql": " __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    fields.field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n)"}, {"id": "model.jira.int_jira__issue_versions", "sql": " __dbt__cte__int_jira__issue_versions as (\n\n\nwith version as (\n\n    select *\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__version\"\n),\n\nversion_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n    where field_id = 'versions'\n        or field_id = 'fixVersions'\n),\n\norder_versions as (\n\n    select\n        *,\n        -- using rank so batches stick together\n        rank() over (\n            partition by field_id, issue_id\n            order by updated_at desc\n            ) as row_num\n\n    from version_history\n),\n\nlatest_versions as (\n\n    select \n        field_id,\n        issue_id,\t\n        updated_at,\n        cast(field_value as \n    int\n) as version_id\n    from order_versions\n    where row_num = 1\n),\n\nversion_info as (\n\n    select \n        latest_versions.field_id,\n        latest_versions.issue_id,\n        \n    string_agg(version.version_name, ', ')\n\n as versions\n\n    from latest_versions\n    join version on latest_versions.version_id = version.version_id\n\n    group by 1,2\n),\n\nsplit_versions as (\n\n    select \n        issue_id,\n        case when field_id = 'versions' then versions else null end as affects_versions,\n        case when field_id = 'fixVersions' then versions else null end as fixes_versions\n    from version_info\n),\n\nfinal as (\n\n    select \n        issue_id,\n        max(affects_versions) as affects_versions,\n        max(fixes_versions) as fixes_versions\n    from split_versions\n    group by 1\n)\n\nselect *\nfrom final\n)"}], "relation_name": null, "column_name": "issue_id", "file_key_name": "models.int_jira__issue_versions"}, "test.jira_source.unique_stg_jira__comment_comment_id.004104fac5": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "comment_id", "model": "{{ get_where_subquery(ref('stg_jira__comment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__comment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "unique_stg_jira__comment_comment_id"], "unique_id": "test.jira_source.unique_stg_jira__comment_comment_id.004104fac5", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "unique_stg_jira__comment_comment_id.sql", "original_file_path": "models/stg_jira.yml", "name": "unique_stg_jira__comment_comment_id", "alias": "unique_stg_jira__comment_comment_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__comment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/unique_stg_jira__comment_comment_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.233172, "compiled_sql": "\n    \n    \n\nselect\n    comment_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__comment\"\nwhere comment_id is not null\ngroup by comment_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "comment_id", "file_key_name": "models.stg_jira__comment"}, "test.jira_source.not_null_stg_jira__comment_comment_id.5dec28a22a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "comment_id", "model": "{{ get_where_subquery(ref('stg_jira__comment')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__comment"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "not_null_stg_jira__comment_comment_id"], "unique_id": "test.jira_source.not_null_stg_jira__comment_comment_id.5dec28a22a", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "not_null_stg_jira__comment_comment_id.sql", "original_file_path": "models/stg_jira.yml", "name": "not_null_stg_jira__comment_comment_id", "alias": "not_null_stg_jira__comment_comment_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__comment"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/not_null_stg_jira__comment_comment_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.23438, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__comment\"\nwhere comment_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "comment_id", "file_key_name": "models.stg_jira__comment"}, "test.jira_source.unique_stg_jira__component_component_id.1773ebe913": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "component_id", "model": "{{ get_where_subquery(ref('stg_jira__component')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__component"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "unique_stg_jira__component_component_id"], "unique_id": "test.jira_source.unique_stg_jira__component_component_id.1773ebe913", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "unique_stg_jira__component_component_id.sql", "original_file_path": "models/stg_jira.yml", "name": "unique_stg_jira__component_component_id", "alias": "unique_stg_jira__component_component_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__component"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/unique_stg_jira__component_component_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.235352, "compiled_sql": "\n    \n    \n\nselect\n    component_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__component\"\nwhere component_id is not null\ngroup by component_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "component_id", "file_key_name": "models.stg_jira__component"}, "test.jira_source.not_null_stg_jira__component_component_id.2f017ad5ad": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "component_id", "model": "{{ get_where_subquery(ref('stg_jira__component')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__component"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "not_null_stg_jira__component_component_id"], "unique_id": "test.jira_source.not_null_stg_jira__component_component_id.2f017ad5ad", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "not_null_stg_jira__component_component_id.sql", "original_file_path": "models/stg_jira.yml", "name": "not_null_stg_jira__component_component_id", "alias": "not_null_stg_jira__component_component_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__component"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/not_null_stg_jira__component_component_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.2363148, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__component\"\nwhere component_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "component_id", "file_key_name": "models.stg_jira__component"}, "test.jira_source.unique_stg_jira__field_field_id.df7b462fff": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "field_id", "model": "{{ get_where_subquery(ref('stg_jira__field')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__field"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "unique_stg_jira__field_field_id"], "unique_id": "test.jira_source.unique_stg_jira__field_field_id.df7b462fff", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "unique_stg_jira__field_field_id.sql", "original_file_path": "models/stg_jira.yml", "name": "unique_stg_jira__field_field_id", "alias": "unique_stg_jira__field_field_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__field"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/unique_stg_jira__field_field_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.2373838, "compiled_sql": "\n    \n    \n\nselect\n    field_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\nwhere field_id is not null\ngroup by field_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "field_id", "file_key_name": "models.stg_jira__field"}, "test.jira_source.not_null_stg_jira__field_field_id.34424f1c2b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "field_id", "model": "{{ get_where_subquery(ref('stg_jira__field')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__field"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "not_null_stg_jira__field_field_id"], "unique_id": "test.jira_source.not_null_stg_jira__field_field_id.34424f1c2b", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "not_null_stg_jira__field_field_id.sql", "original_file_path": "models/stg_jira.yml", "name": "not_null_stg_jira__field_field_id", "alias": "not_null_stg_jira__field_field_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__field"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/not_null_stg_jira__field_field_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.238314, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field\"\nwhere field_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "field_id", "file_key_name": "models.stg_jira__field"}, "test.jira_source.not_null_stg_jira__field_option_field_id.1b1f37b358": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "field_id", "model": "{{ get_where_subquery(ref('stg_jira__field_option')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__field_option"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "not_null_stg_jira__field_option_field_id"], "unique_id": "test.jira_source.not_null_stg_jira__field_option_field_id.1b1f37b358", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "not_null_stg_jira__field_option_field_id.sql", "original_file_path": "models/stg_jira.yml", "name": "not_null_stg_jira__field_option_field_id", "alias": "not_null_stg_jira__field_option_field_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__field_option"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/not_null_stg_jira__field_option_field_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.239268, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__field_option\"\nwhere field_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "field_id", "file_key_name": "models.stg_jira__field_option"}, "test.jira_source.unique_stg_jira__issue_issue_id.7bb0ee7230": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "issue_id", "model": "{{ get_where_subquery(ref('stg_jira__issue')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__issue"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "unique_stg_jira__issue_issue_id"], "unique_id": "test.jira_source.unique_stg_jira__issue_issue_id.7bb0ee7230", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "unique_stg_jira__issue_issue_id.sql", "original_file_path": "models/stg_jira.yml", "name": "unique_stg_jira__issue_issue_id", "alias": "unique_stg_jira__issue_issue_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__issue"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/unique_stg_jira__issue_issue_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.240541, "compiled_sql": "\n    \n    \n\nselect\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue\"\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "issue_id", "file_key_name": "models.stg_jira__issue"}, "test.jira_source.not_null_stg_jira__issue_issue_id.13a4fbe132": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "issue_id", "model": "{{ get_where_subquery(ref('stg_jira__issue')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__issue"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "not_null_stg_jira__issue_issue_id"], "unique_id": "test.jira_source.not_null_stg_jira__issue_issue_id.13a4fbe132", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "not_null_stg_jira__issue_issue_id.sql", "original_file_path": "models/stg_jira.yml", "name": "not_null_stg_jira__issue_issue_id", "alias": "not_null_stg_jira__issue_issue_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__issue"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/not_null_stg_jira__issue_issue_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.2414742, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue\"\nwhere issue_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "issue_id", "file_key_name": "models.stg_jira__issue"}, "test.jira_source.dbt_utils_unique_combination_of_columns_stg_jira__issue_field_history_field_id__issue_id__updated_at.c01ecbb82c": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ad5994a65a5d4b3bfa1a17202d1e378f\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["field_id", "issue_id", "updated_at"], "model": "{{ get_where_subquery(ref('stg_jira__issue_field_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__issue_field_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ad5994a65a5d4b3bfa1a17202d1e378f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "dbt_utils_unique_combination_of_columns_stg_jira__issue_field_history_field_id__issue_id__updated_at"], "unique_id": "test.jira_source.dbt_utils_unique_combination_of_columns_stg_jira__issue_field_history_field_id__issue_id__updated_at.c01ecbb82c", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "dbt_utils_unique_combination_o_ad5994a65a5d4b3bfa1a17202d1e378f.sql", "original_file_path": "models/stg_jira.yml", "name": "dbt_utils_unique_combination_of_columns_stg_jira__issue_field_history_field_id__issue_id__updated_at", "alias": "dbt_utils_unique_combination_o_ad5994a65a5d4b3bfa1a17202d1e378f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__issue_field_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/dbt_utils_unique_combination_o_ad5994a65a5d4b3bfa1a17202d1e378f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_ad5994a65a5d4b3bfa1a17202d1e378f"}, "created_at": 1663707929.242413, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        field_id, issue_id, updated_at\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_field_history\"\n    group by field_id, issue_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_jira__issue_field_history"}, "test.jira_source.dbt_utils_unique_combination_of_columns_stg_jira__issue_multiselect_history__fivetran_id__updated_at.4dd2d1c5a8": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_69e37ee91ecaf0ffc104992c26624396\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_fivetran_id", "updated_at"], "model": "{{ get_where_subquery(ref('stg_jira__issue_multiselect_history')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__issue_multiselect_history"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_69e37ee91ecaf0ffc104992c26624396", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "dbt_utils_unique_combination_of_columns_stg_jira__issue_multiselect_history__fivetran_id__updated_at"], "unique_id": "test.jira_source.dbt_utils_unique_combination_of_columns_stg_jira__issue_multiselect_history__fivetran_id__updated_at.4dd2d1c5a8", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "dbt_utils_unique_combination_o_69e37ee91ecaf0ffc104992c26624396.sql", "original_file_path": "models/stg_jira.yml", "name": "dbt_utils_unique_combination_of_columns_stg_jira__issue_multiselect_history__fivetran_id__updated_at", "alias": "dbt_utils_unique_combination_o_69e37ee91ecaf0ffc104992c26624396", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__issue_multiselect_history"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/dbt_utils_unique_combination_o_69e37ee91ecaf0ffc104992c26624396.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_69e37ee91ecaf0ffc104992c26624396"}, "created_at": 1663707929.265762, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _fivetran_id, updated_at\n    from \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_multiselect_history\"\n    group by _fivetran_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.stg_jira__issue_multiselect_history"}, "test.jira_source.unique_stg_jira__issue_type_issue_type_id.a89d34aa41": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "issue_type_id", "model": "{{ get_where_subquery(ref('stg_jira__issue_type')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__issue_type"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "unique_stg_jira__issue_type_issue_type_id"], "unique_id": "test.jira_source.unique_stg_jira__issue_type_issue_type_id.a89d34aa41", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "unique_stg_jira__issue_type_issue_type_id.sql", "original_file_path": "models/stg_jira.yml", "name": "unique_stg_jira__issue_type_issue_type_id", "alias": "unique_stg_jira__issue_type_issue_type_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__issue_type"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/unique_stg_jira__issue_type_issue_type_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.268511, "compiled_sql": "\n    \n    \n\nselect\n    issue_type_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_type\"\nwhere issue_type_id is not null\ngroup by issue_type_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "issue_type_id", "file_key_name": "models.stg_jira__issue_type"}, "test.jira_source.not_null_stg_jira__issue_type_issue_type_id.57419fc343": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "issue_type_id", "model": "{{ get_where_subquery(ref('stg_jira__issue_type')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__issue_type"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "not_null_stg_jira__issue_type_issue_type_id"], "unique_id": "test.jira_source.not_null_stg_jira__issue_type_issue_type_id.57419fc343", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "not_null_stg_jira__issue_type_issue_type_id.sql", "original_file_path": "models/stg_jira.yml", "name": "not_null_stg_jira__issue_type_issue_type_id", "alias": "not_null_stg_jira__issue_type_issue_type_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__issue_type"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/not_null_stg_jira__issue_type_issue_type_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.2695858, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__issue_type\"\nwhere issue_type_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "issue_type_id", "file_key_name": "models.stg_jira__issue_type"}, "test.jira_source.unique_stg_jira__priority_priority_id.79b77ea5d2": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "priority_id", "model": "{{ get_where_subquery(ref('stg_jira__priority')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__priority"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "unique_stg_jira__priority_priority_id"], "unique_id": "test.jira_source.unique_stg_jira__priority_priority_id.79b77ea5d2", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "unique_stg_jira__priority_priority_id.sql", "original_file_path": "models/stg_jira.yml", "name": "unique_stg_jira__priority_priority_id", "alias": "unique_stg_jira__priority_priority_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__priority"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/unique_stg_jira__priority_priority_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.270533, "compiled_sql": "\n    \n    \n\nselect\n    priority_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__priority\"\nwhere priority_id is not null\ngroup by priority_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "priority_id", "file_key_name": "models.stg_jira__priority"}, "test.jira_source.not_null_stg_jira__priority_priority_id.ec0c873363": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "priority_id", "model": "{{ get_where_subquery(ref('stg_jira__priority')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__priority"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "not_null_stg_jira__priority_priority_id"], "unique_id": "test.jira_source.not_null_stg_jira__priority_priority_id.ec0c873363", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "not_null_stg_jira__priority_priority_id.sql", "original_file_path": "models/stg_jira.yml", "name": "not_null_stg_jira__priority_priority_id", "alias": "not_null_stg_jira__priority_priority_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__priority"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/not_null_stg_jira__priority_priority_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.271471, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__priority\"\nwhere priority_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "priority_id", "file_key_name": "models.stg_jira__priority"}, "test.jira_source.unique_stg_jira__project_project_id.58d321d374": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "project_id", "model": "{{ get_where_subquery(ref('stg_jira__project')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__project"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "unique_stg_jira__project_project_id"], "unique_id": "test.jira_source.unique_stg_jira__project_project_id.58d321d374", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "unique_stg_jira__project_project_id.sql", "original_file_path": "models/stg_jira.yml", "name": "unique_stg_jira__project_project_id", "alias": "unique_stg_jira__project_project_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__project"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/unique_stg_jira__project_project_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.272511, "compiled_sql": "\n    \n    \n\nselect\n    project_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__project\"\nwhere project_id is not null\ngroup by project_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "project_id", "file_key_name": "models.stg_jira__project"}, "test.jira_source.not_null_stg_jira__project_project_id.996fe19522": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "project_id", "model": "{{ get_where_subquery(ref('stg_jira__project')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__project"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "not_null_stg_jira__project_project_id"], "unique_id": "test.jira_source.not_null_stg_jira__project_project_id.996fe19522", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "not_null_stg_jira__project_project_id.sql", "original_file_path": "models/stg_jira.yml", "name": "not_null_stg_jira__project_project_id", "alias": "not_null_stg_jira__project_project_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__project"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/not_null_stg_jira__project_project_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.273441, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__project\"\nwhere project_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "project_id", "file_key_name": "models.stg_jira__project"}, "test.jira_source.unique_stg_jira__resolution_resolution_id.b3acb37c87": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "resolution_id", "model": "{{ get_where_subquery(ref('stg_jira__resolution')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__resolution"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "unique_stg_jira__resolution_resolution_id"], "unique_id": "test.jira_source.unique_stg_jira__resolution_resolution_id.b3acb37c87", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "unique_stg_jira__resolution_resolution_id.sql", "original_file_path": "models/stg_jira.yml", "name": "unique_stg_jira__resolution_resolution_id", "alias": "unique_stg_jira__resolution_resolution_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__resolution"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/unique_stg_jira__resolution_resolution_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.274368, "compiled_sql": "\n    \n    \n\nselect\n    resolution_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__resolution\"\nwhere resolution_id is not null\ngroup by resolution_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "resolution_id", "file_key_name": "models.stg_jira__resolution"}, "test.jira_source.not_null_stg_jira__resolution_resolution_id.1c04bac8a4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "resolution_id", "model": "{{ get_where_subquery(ref('stg_jira__resolution')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__resolution"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "not_null_stg_jira__resolution_resolution_id"], "unique_id": "test.jira_source.not_null_stg_jira__resolution_resolution_id.1c04bac8a4", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "not_null_stg_jira__resolution_resolution_id.sql", "original_file_path": "models/stg_jira.yml", "name": "not_null_stg_jira__resolution_resolution_id", "alias": "not_null_stg_jira__resolution_resolution_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__resolution"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/not_null_stg_jira__resolution_resolution_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.275278, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__resolution\"\nwhere resolution_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "resolution_id", "file_key_name": "models.stg_jira__resolution"}, "test.jira_source.unique_stg_jira__sprint_sprint_id.8a73555fed": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "sprint_id", "model": "{{ get_where_subquery(ref('stg_jira__sprint')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__sprint"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "unique_stg_jira__sprint_sprint_id"], "unique_id": "test.jira_source.unique_stg_jira__sprint_sprint_id.8a73555fed", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "unique_stg_jira__sprint_sprint_id.sql", "original_file_path": "models/stg_jira.yml", "name": "unique_stg_jira__sprint_sprint_id", "alias": "unique_stg_jira__sprint_sprint_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__sprint"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/unique_stg_jira__sprint_sprint_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.276315, "compiled_sql": "\n    \n    \n\nselect\n    sprint_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__sprint\"\nwhere sprint_id is not null\ngroup by sprint_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sprint_id", "file_key_name": "models.stg_jira__sprint"}, "test.jira_source.not_null_stg_jira__sprint_sprint_id.899b4b77d7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "sprint_id", "model": "{{ get_where_subquery(ref('stg_jira__sprint')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__sprint"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "not_null_stg_jira__sprint_sprint_id"], "unique_id": "test.jira_source.not_null_stg_jira__sprint_sprint_id.899b4b77d7", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "not_null_stg_jira__sprint_sprint_id.sql", "original_file_path": "models/stg_jira.yml", "name": "not_null_stg_jira__sprint_sprint_id", "alias": "not_null_stg_jira__sprint_sprint_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__sprint"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/not_null_stg_jira__sprint_sprint_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.277228, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__sprint\"\nwhere sprint_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sprint_id", "file_key_name": "models.stg_jira__sprint"}, "test.jira_source.unique_stg_jira__status_status_id.0449241b95": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "status_id", "model": "{{ get_where_subquery(ref('stg_jira__status')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__status"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "unique_stg_jira__status_status_id"], "unique_id": "test.jira_source.unique_stg_jira__status_status_id.0449241b95", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "unique_stg_jira__status_status_id.sql", "original_file_path": "models/stg_jira.yml", "name": "unique_stg_jira__status_status_id", "alias": "unique_stg_jira__status_status_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__status"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/unique_stg_jira__status_status_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.278188, "compiled_sql": "\n    \n    \n\nselect\n    status_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__status\"\nwhere status_id is not null\ngroup by status_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "status_id", "file_key_name": "models.stg_jira__status"}, "test.jira_source.not_null_stg_jira__status_status_id.b32a8a0d84": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "status_id", "model": "{{ get_where_subquery(ref('stg_jira__status')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__status"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "not_null_stg_jira__status_status_id"], "unique_id": "test.jira_source.not_null_stg_jira__status_status_id.b32a8a0d84", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "not_null_stg_jira__status_status_id.sql", "original_file_path": "models/stg_jira.yml", "name": "not_null_stg_jira__status_status_id", "alias": "not_null_stg_jira__status_status_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__status"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/not_null_stg_jira__status_status_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.279325, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__status\"\nwhere status_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "status_id", "file_key_name": "models.stg_jira__status"}, "test.jira_source.unique_stg_jira__status_category_status_category_id.99c869330a": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "status_category_id", "model": "{{ get_where_subquery(ref('stg_jira__status_category')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__status_category"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "unique_stg_jira__status_category_status_category_id"], "unique_id": "test.jira_source.unique_stg_jira__status_category_status_category_id.99c869330a", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "unique_stg_jira__status_category_status_category_id.sql", "original_file_path": "models/stg_jira.yml", "name": "unique_stg_jira__status_category_status_category_id", "alias": "unique_stg_jira__status_category_status_category_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__status_category"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/unique_stg_jira__status_category_status_category_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.280282, "compiled_sql": "\n    \n    \n\nselect\n    status_category_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__status_category\"\nwhere status_category_id is not null\ngroup by status_category_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "status_category_id", "file_key_name": "models.stg_jira__status_category"}, "test.jira_source.not_null_stg_jira__status_category_status_category_id.7a89cdfcf0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "status_category_id", "model": "{{ get_where_subquery(ref('stg_jira__status_category')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__status_category"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "not_null_stg_jira__status_category_status_category_id"], "unique_id": "test.jira_source.not_null_stg_jira__status_category_status_category_id.7a89cdfcf0", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "not_null_stg_jira__status_category_status_category_id.sql", "original_file_path": "models/stg_jira.yml", "name": "not_null_stg_jira__status_category_status_category_id", "alias": "not_null_stg_jira__status_category_status_category_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__status_category"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/not_null_stg_jira__status_category_status_category_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.2812212, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__status_category\"\nwhere status_category_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "status_category_id", "file_key_name": "models.stg_jira__status_category"}, "test.jira_source.unique_stg_jira__user_user_id.a397e1a23f": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('stg_jira__user')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__user"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "unique_stg_jira__user_user_id"], "unique_id": "test.jira_source.unique_stg_jira__user_user_id.a397e1a23f", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "unique_stg_jira__user_user_id.sql", "original_file_path": "models/stg_jira.yml", "name": "unique_stg_jira__user_user_id", "alias": "unique_stg_jira__user_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__user"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/unique_stg_jira__user_user_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.282142, "compiled_sql": "\n    \n    \n\nselect\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__user\"\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id", "file_key_name": "models.stg_jira__user"}, "test.jira_source.not_null_stg_jira__user_user_id.b2153f97d2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ get_where_subquery(ref('stg_jira__user')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__user"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "not_null_stg_jira__user_user_id"], "unique_id": "test.jira_source.not_null_stg_jira__user_user_id.b2153f97d2", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "not_null_stg_jira__user_user_id.sql", "original_file_path": "models/stg_jira.yml", "name": "not_null_stg_jira__user_user_id", "alias": "not_null_stg_jira__user_user_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__user"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/not_null_stg_jira__user_user_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.283194, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__user\"\nwhere user_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "user_id", "file_key_name": "models.stg_jira__user"}, "test.jira_source.unique_stg_jira__version_version_id.08231bd017": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "version_id", "model": "{{ get_where_subquery(ref('stg_jira__version')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__version"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "unique_stg_jira__version_version_id"], "unique_id": "test.jira_source.unique_stg_jira__version_version_id.08231bd017", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "unique_stg_jira__version_version_id.sql", "original_file_path": "models/stg_jira.yml", "name": "unique_stg_jira__version_version_id", "alias": "unique_stg_jira__version_version_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__version"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/unique_stg_jira__version_version_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.284123, "compiled_sql": "\n    \n    \n\nselect\n    version_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__version\"\nwhere version_id is not null\ngroup by version_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "version_id", "file_key_name": "models.stg_jira__version"}, "test.jira_source.not_null_stg_jira__version_version_id.03877ce324": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "version_id", "model": "{{ get_where_subquery(ref('stg_jira__version')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.jira_source.stg_jira__version"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "postgres", "schema": "jira_integration_tests_dbt_test__audit", "fqn": ["jira_source", "not_null_stg_jira__version_version_id"], "unique_id": "test.jira_source.not_null_stg_jira__version_version_id.03877ce324", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "not_null_stg_jira__version_version_id.sql", "original_file_path": "models/stg_jira.yml", "name": "not_null_stg_jira__version_version_id", "alias": "not_null_stg_jira__version_version_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_jira__version"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/jira_source/models/stg_jira.yml/not_null_stg_jira__version_version_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1663707929.285044, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"postgres\".\"jira_integration_tests_jira_source\".\"stg_jira__version\"\nwhere version_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "version_id", "file_key_name": "models.stg_jira__version"}}, "sources": {"source.jira_source.jira.comment": {"fqn": ["jira_source", "jira", "comment"], "database": "postgres", "schema": "jira_integration_tests", "unique_id": "source.jira_source.jira.comment", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "models/src_jira.yml", "original_file_path": "models/src_jira.yml", "name": "comment", "source_name": "jira", "source_description": "", "loader": "fivetran", "identifier": "comment", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of comments made on issues.", "columns": {"id": {"name": "id", "description": "Unique ID of the comment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "author_id": {"name": "author_id", "description": "Foreign key referencing the `user` id of the comment's author.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "body": {"name": "body", "description": "Content of the comment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created": {"name": "created", "description": "Timestamp of when the comment was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_public": {"name": "is_public", "description": "Boolean that is true if the comment is visible to all users.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_id": {"name": "issue_id", "description": "Foreign key referencing the id of the `issue` that was commented on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "update_author_id": {"name": "update_author_id", "description": "Foreign key referencing the id of the `user` who last updated this comment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated": {"name": "updated", "description": "Timestamp of when the comment was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"jira_integration_tests\".\"comment\"", "created_at": 1663707929.312282}, "source.jira_source.jira.component": {"fqn": ["jira_source", "jira", "component"], "database": "postgres", "schema": "jira_integration_tests", "unique_id": "source.jira_source.jira.component", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "models/src_jira.yml", "original_file_path": "models/src_jira.yml", "name": "component", "source_name": "jira", "source_description": "", "loader": "fivetran", "identifier": "component", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of project components (subsections to group issues).\n", "columns": {"id": {"name": "id", "description": "ID of the component.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description given to the component.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "UI-facing name of the component.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_id": {"name": "project_id", "description": "Foreign key referencing the id of the component's `project`.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"jira_integration_tests\".\"component\"", "created_at": 1663707929.3123689}, "source.jira_source.jira.field": {"fqn": ["jira_source", "jira", "field"], "database": "postgres", "schema": "jira_integration_tests", "unique_id": "source.jira_source.jira.field", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "models/src_jira.yml", "original_file_path": "models/src_jira.yml", "name": "field", "source_name": "jira", "source_description": "", "loader": "fivetran", "identifier": "field", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of all issue fields.", "columns": {"id": {"name": "id", "description": "Unique ID of the field. Default fields will have descriptive IDs, whereas custom field IDs will be `'customfield_#####'`.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_array": {"name": "is_array", "description": "Boolean that is true if a field can have multiple values (is mulitselect).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_custom": {"name": "is_custom", "description": "Boolean that is true if the field is custom to this organization, and false if  it is default to Jira.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the field as it appears on issue cards.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"jira_integration_tests\".\"field\"", "created_at": 1663707929.312438}, "source.jira_source.jira.field_option": {"fqn": ["jira_source", "jira", "field_option"], "database": "postgres", "schema": "jira_integration_tests", "unique_id": "source.jira_source.jira.field_option", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "models/src_jira.yml", "original_file_path": "models/src_jira.yml", "name": "field_option", "source_name": "jira", "source_description": "", "loader": "fivetran", "identifier": "field_option", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of all options related to custom fields.", "columns": {"id": {"name": "id", "description": "The ID of the custom field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "The ID of the parent custom field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the field option.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"jira_integration_tests\".\"field_option\"", "created_at": 1663707929.312499}, "source.jira_source.jira.issue": {"fqn": ["jira_source", "jira", "issue"], "database": "postgres", "schema": "jira_integration_tests", "unique_id": "source.jira_source.jira.issue", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "models/src_jira.yml", "original_file_path": "models/src_jira.yml", "name": "issue", "source_name": "jira", "source_description": "", "loader": "fivetran", "identifier": "issue", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of all issues in your organization's Jira (captures soft deletes).", "columns": {"id": {"name": "id", "description": "Unique ID of the issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_deleted": {"name": "_fivetran_deleted", "description": "Boolean that is true if the row has been soft-deleted from the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "assignee": {"name": "assignee", "description": "Foreign key referencing the ID of the `user` currently assigned to this task.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created": {"name": "created", "description": "Timestamp of when the issue was created (in UTC).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "creator": {"name": "creator", "description": "Foreign key referencing the `user` who first created the issue. Cannot be changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "The issue description, if given.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "Calendar day on which the issue is due, if a due date is provided.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "environment": {"name": "environment", "description": "Text field describing the environment in which the issue occurred (ie \"IE9 on Windows 7\").", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_type": {"name": "issue_type", "description": "Foreign key referencing the ID of the `issue_type`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "key": {"name": "key", "description": "UI-facing id of the issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_viewed": {"name": "last_viewed", "description": "Timestamp of when the user who set up the connector last viewed the issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_estimate": {"name": "original_estimate", "description": "The original estimate of how long working on this issue would take, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_id": {"name": "parent_id", "description": "Self-referencing ID of the parent `issue`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "priority": {"name": "priority", "description": "Foreign key referencing the ID of the issue's current `priority`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project": {"name": "project", "description": "Foreign key referencing the ID of the `project` that the issue belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "remaining_estimate": {"name": "remaining_estimate", "description": "The estimate of how much longer working on this issue will take, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reporter": {"name": "reporter", "description": "Foreign key referencing the ID of the `user` who reported the issue. This differs from the `creator` column  in that the reporter can be changed in-app.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "resolution": {"name": "resolution", "description": "Foreign key referencing the ID of the issue's type of `resolution`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "resolved": {"name": "resolved", "description": "Timestamp of when the issue was resolved (ie completed, marked as duplicate). If an  issue is marked as un-resolved, this is null.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Foreign key referencing the ID of the issue's `status` (the step that the issue is currently at  in the project's workflow).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status_category_changed": {"name": "status_category_changed", "description": "Timestamp of when the status was last changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "summary": {"name": "summary", "description": "Title of the issue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_spent": {"name": "time_spent", "description": "The time that was spent working on this issue, in seconds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated": {"name": "updated", "description": "Timestamp of when the issue was last updated in some way.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "work_ratio": {"name": "work_ratio", "description": "The percentage of work that has been logged against the issue (time_spent) vs the original estimate of worktime. Equals -1.0 when the fields required for calculation are not provided.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"jira_integration_tests\".\"issue\"", "created_at": 1663707929.3125792}, "source.jira_source.jira.issue_field_history": {"fqn": ["jira_source", "jira", "issue_field_history"], "database": "postgres", "schema": "jira_integration_tests", "unique_id": "source.jira_source.jira.issue_field_history", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "models/src_jira.yml", "original_file_path": "models/src_jira.yml", "name": "issue_field_history", "source_name": "jira", "source_description": "", "loader": "fivetran", "identifier": "issue_field_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of every value that each **custom non-array** (not multiselect) field has been set to.", "columns": {"field_id": {"name": "field_id", "description": "Foreign key referencing the ID of the `field` that was changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_id": {"name": "issue_id", "description": "Foreign key referencing the ID of the `issue` whose field was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time": {"name": "time", "description": "Timestamp of when the issue field was set to this value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value": {"name": "value", "description": "Content of the value of that the field was set to.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"jira_integration_tests\".\"issue_field_history\"", "created_at": 1663707929.31264}, "source.jira_source.jira.issue_link": {"fqn": ["jira_source", "jira", "issue_link"], "database": "postgres", "schema": "jira_integration_tests", "unique_id": "source.jira_source.jira.issue_link", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "models/src_jira.yml", "original_file_path": "models/src_jira.yml", "name": "issue_link", "source_name": "jira", "source_description": "", "loader": "fivetran", "identifier": "issue_link", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of relationships (links) created between issues. Issue links can include blockers, clones/duplicates, and general relationships.\n", "columns": {"issue_id": {"name": "issue_id", "description": "Foreign key referencing the ID of the `issue` that is the subject of this relationship (the linker).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "related_issue_id": {"name": "related_issue_id", "description": "Foreign key referencing the ID of the `issue` that is the object of this relationship (the linkee).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "relationship": {"name": "relationship", "description": "The nature of the link between the two issues (\"blocks\", \"is duplicated by\", \"relates to\", etc.)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"jira_integration_tests\".\"issue_link\"", "created_at": 1663707929.3126981}, "source.jira_source.jira.issue_multiselect_history": {"fqn": ["jira_source", "jira", "issue_multiselect_history"], "database": "postgres", "schema": "jira_integration_tests", "unique_id": "source.jira_source.jira.issue_multiselect_history", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "models/src_jira.yml", "original_file_path": "models/src_jira.yml", "name": "issue_multiselect_history", "source_name": "jira", "source_description": "", "loader": "fivetran", "identifier": "issue_multiselect_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of every value that each array-type (multiselect) field has been set to. Each row will pertain to **one** value.\n", "columns": {"_fivetran_id": {"name": "_fivetran_id", "description": "Fivetran-generated ID hashed on field, issue, and value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time": {"name": "time", "description": "Timestamp of when the issue field was updated to included this value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "field_id": {"name": "field_id", "description": "Foreign key referencing the ID of the `field` that was changed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "issue_id": {"name": "issue_id", "description": "Foreign key referencing the ID of the `issue` whose field was updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value": {"name": "value", "description": "Content of the value of that the field was set to.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"jira_integration_tests\".\"issue_multiselect_history\"", "created_at": 1663707929.312757}, "source.jira_source.jira.issue_type": {"fqn": ["jira_source", "jira", "issue_type"], "database": "postgres", "schema": "jira_integration_tests", "unique_id": "source.jira_source.jira.issue_type", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "models/src_jira.yml", "original_file_path": "models/src_jira.yml", "name": "issue_type", "source_name": "jira", "source_description": "", "loader": "fivetran", "identifier": "issue_type", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table containing information about issue types. Issue types can have identical names in different projects, but they may have  differing descriptions.\n", "columns": {"id": {"name": "id", "description": "Unique ID of the issue type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Project-level description given to the issue type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the issue type (ie Epic, Task, Subtask, any custom types)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subtask": {"name": "subtask", "description": "Boolean that is true if this type of issue is a subtask.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"jira_integration_tests\".\"issue_type\"", "created_at": 1663707929.312814}, "source.jira_source.jira.priority": {"fqn": ["jira_source", "jira", "priority"], "database": "postgres", "schema": "jira_integration_tests", "unique_id": "source.jira_source.jira.priority", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "models/src_jira.yml", "original_file_path": "models/src_jira.yml", "name": "priority", "source_name": "jira", "source_description": "", "loader": "fivetran", "identifier": "priority", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of issue priority levels (global).", "columns": {"id": {"name": "id", "description": "Unique ID of the priority level.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the priority level.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the priority as it appears in the UI.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"jira_integration_tests\".\"priority\"", "created_at": 1663707929.312872}, "source.jira_source.jira.project": {"fqn": ["jira_source", "jira", "project"], "database": "postgres", "schema": "jira_integration_tests", "unique_id": "source.jira_source.jira.project", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "models/src_jira.yml", "original_file_path": "models/src_jira.yml", "name": "project", "source_name": "jira", "source_description": "", "loader": "fivetran", "identifier": "project", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of all projects in your organization.", "columns": {"id": {"name": "id", "description": "Unique ID of the project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the project, if given.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "key": {"name": "key", "description": "UI-facing ID of the project. This becomes the default prefix for tasks created within this project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lead_id": {"name": "lead_id", "description": "Foreign key referencing the ID of the `user` who leads this project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Title of the project.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "permission_scheme_id": {"name": "permission_scheme_id", "description": "Foreign key referencing the ID of the `permission_scheme` that the project ascribes to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_category_id": {"name": "project_category_id", "description": "Foreign key referencing the ID of the `project_category` that the project is associated with, if any.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_type_key": {"name": "project_type_key", "description": "ID of the type of project (ie 'software').", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"jira_integration_tests\".\"project\"", "created_at": 1663707929.3129332}, "source.jira_source.jira.resolution": {"fqn": ["jira_source", "jira", "resolution"], "database": "postgres", "schema": "jira_integration_tests", "unique_id": "source.jira_source.jira.resolution", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "models/src_jira.yml", "original_file_path": "models/src_jira.yml", "name": "resolution", "source_name": "jira", "source_description": "", "loader": "fivetran", "identifier": "resolution", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table storing the types of resolutions used by your organization.", "columns": {"id": {"name": "id", "description": "Unique ID of the resolution type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description given to the resolution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Display name of the resolution.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"jira_integration_tests\".\"resolution\"", "created_at": 1663707929.312989}, "source.jira_source.jira.sprint": {"fqn": ["jira_source", "jira", "sprint"], "database": "postgres", "schema": "jira_integration_tests", "unique_id": "source.jira_source.jira.sprint", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "models/src_jira.yml", "original_file_path": "models/src_jira.yml", "name": "sprint", "source_name": "jira", "source_description": "", "loader": "fivetran", "identifier": "sprint", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of all sprints.", "columns": {"id": {"name": "id", "description": "Unique ID of the sprint.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "board_id": {"name": "board_id", "description": "Foreign key referencing the ID of the `board` that the sprint lives in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "complete_date": {"name": "complete_date", "description": "Timestamp of when the sprint was completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_date": {"name": "end_date", "description": "Timestamp of when the sprint is planned to end.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Title of the sprint.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "Timestamp of when the sprint began.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"jira_integration_tests\".\"sprint\"", "created_at": 1663707929.313057}, "source.jira_source.jira.status": {"fqn": ["jira_source", "jira", "status"], "database": "postgres", "schema": "jira_integration_tests", "unique_id": "source.jira_source.jira.status", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "models/src_jira.yml", "original_file_path": "models/src_jira.yml", "name": "status", "source_name": "jira", "source_description": "", "loader": "fivetran", "identifier": "status", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of project-level statuses (which may have the same umbrella `status_category`).", "columns": {"id": {"name": "id", "description": "Unique ID of the project status.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Description of the project status. Different projects may all have a status called \"Backlog\", but their definitions  of \"backlog\" may differ.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Title of the status.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status_category_id": {"name": "status_category_id", "description": "Foreign key referencing the ID of the `status_category` that this project status falls under.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"jira_integration_tests\".\"status\"", "created_at": 1663707929.313117}, "source.jira_source.jira.status_category": {"fqn": ["jira_source", "jira", "status_category"], "database": "postgres", "schema": "jira_integration_tests", "unique_id": "source.jira_source.jira.status_category", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "models/src_jira.yml", "original_file_path": "models/src_jira.yml", "name": "status_category", "source_name": "jira", "source_description": "", "loader": "fivetran", "identifier": "status_category", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of overarching status categories.", "columns": {"id": {"name": "id", "description": "Unique ID of the status category.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Title of the status category.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"jira_integration_tests\".\"status_category\"", "created_at": 1663707929.3131719}, "source.jira_source.jira.user": {"fqn": ["jira_source", "jira", "user"], "database": "postgres", "schema": "jira_integration_tests", "unique_id": "source.jira_source.jira.user", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "models/src_jira.yml", "original_file_path": "models/src_jira.yml", "name": "user", "source_name": "jira", "source_description": "", "loader": "fivetran", "identifier": "user", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of users associated with your organization.", "columns": {"id": {"name": "id", "description": "Unique ID of the user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "Email associated with the user account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "locale": {"name": "locale", "description": "The Java locale of the user.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Name of the user as it appears in the UI.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_zone": {"name": "time_zone", "description": "The user's timezone, as defined in their settings.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "username": {"name": "username", "description": "Account username.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"jira_integration_tests\".\"user\"", "created_at": 1663707929.313232}, "source.jira_source.jira.version": {"fqn": ["jira_source", "jira", "version"], "database": "postgres", "schema": "jira_integration_tests", "unique_id": "source.jira_source.jira.version", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "models/src_jira.yml", "original_file_path": "models/src_jira.yml", "name": "version", "source_name": "jira", "source_description": "", "loader": "fivetran", "identifier": "version", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 96, "period": "hour"}, "filter": null}, "external": null, "description": "Table of project versions in your organization.", "columns": {"archived": {"name": "archived", "description": "Boolean that is true if the project version has been archived.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "The optional description given to the version.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id": {"name": "id", "description": "Unique ID of the version.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Unique name of the version.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "overdue": {"name": "overdue", "description": "Boolean that is true if the version is past its optional release date, false if it is not or if it does not have a due date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "project_id": {"name": "project_id", "description": "Foreign key referencing the `PROJECT` to which this version is attached.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "release_date": {"name": "release_date", "description": "The optional release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "released": {"name": "released", "description": "Boolean that is true if the version has been released. If the version is released a request to release again is ignored", "meta": {}, "data_type": null, "quote": null, "tags": []}, "start_date": {"name": "start_date", "description": "The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"jira_integration_tests\".\"version\"", "created_at": 1663707929.3132942}}, "macros": {"macro.dbt_postgres.postgres__get_catalog": {"unique_id": "macro.dbt_postgres.postgres__get_catalog", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.224417}, "macro.dbt_postgres.postgres_get_relations": {"unique_id": "macro.dbt_postgres.postgres_get_relations", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.225098}, "macro.dbt_postgres.postgres__create_table_as": {"unique_id": "macro.dbt_postgres.postgres__create_table_as", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.230422}, "macro.dbt_postgres.postgres__get_create_index_sql": {"unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.230934}, "macro.dbt_postgres.postgres__create_schema": {"unique_id": "macro.dbt_postgres.postgres__create_schema", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.231251}, "macro.dbt_postgres.postgres__drop_schema": {"unique_id": "macro.dbt_postgres.postgres__drop_schema", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.2315679}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.2320452}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.232426}, "macro.dbt_postgres.postgres__information_schema_name": {"unique_id": "macro.dbt_postgres.postgres__information_schema_name", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.2325969}, "macro.dbt_postgres.postgres__list_schemas": {"unique_id": "macro.dbt_postgres.postgres__list_schemas", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.232949}, "macro.dbt_postgres.postgres__check_schema_exists": {"unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.233341}, "macro.dbt_postgres.postgres__current_timestamp": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.233422}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.233597}, "macro.dbt_postgres.postgres__snapshot_get_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.233697}, "macro.dbt_postgres.postgres__make_temp_relation": {"unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n    {% set suffix_length = suffix|length + dtstring|length %}\n    {% set relation_max_name_length = 63 %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Temp relation suffix is too long (' ~ suffix|length ~ ' characters). Maximum length is ' ~ (relation_max_name_length - dtstring|length) ~ ' characters.') %}\n    {% endif %}\n    {% set tmp_identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix ~ dtstring %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.2346072}, "macro.dbt_postgres.postgres_escape_comment": {"unique_id": "macro.dbt_postgres.postgres_escape_comment", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.2350342}, "macro.dbt_postgres.postgres__alter_relation_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.235258}, "macro.dbt_postgres.postgres__alter_column_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.235852}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "package_name": "dbt_postgres", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.236664}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.2377868}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.2379892}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.2381282}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.238264}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.238403}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.238821}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.2391171}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.239427}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.2399108}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.2401779}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.2434912}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.243666}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.2438881}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.244033}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.244129}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.2449238}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.245091}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.245261}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.246228}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.248106}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.2512481}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.251534}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.251704}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.251789}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.2519958}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.2528698}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.253057}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.2533078}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.253736}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.2595599}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.261646}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.262157}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.2624729}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.2629042}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.263283}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    \n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.264118}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.264662}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.265273}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.26796}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.2691}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.269331}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.2697449}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.2700071}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.270624}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.27132}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.276147}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.2807622}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.281975}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.283158}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.283872}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.287573}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.288082}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.288268}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.288467}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  \n  {{ sql_header if sql_header is not none }}\n  \n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.288883}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.292386}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.2927518}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.292969}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.294188}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.294595}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.294755}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.2949388}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.2951958}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.297972}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3018298}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.302728}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3029718}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3034508}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3035939}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3037078}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.303863}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3039732}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3044538}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3047}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3058848}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.306346}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.306574}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.307136}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.307391}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.307673}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.308118}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.308366}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3087711}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.309011}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.309314}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3099148}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.311044}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3116171}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3119092}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3136268}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.314858}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.315595}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.315826}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3162591}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3164392}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3166022}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3167748}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.317272}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3174021}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3175511}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.317934}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.319485}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.319792}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.319972}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3201761}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.320353}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.320509}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.32071}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3209789}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3212218}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3218298}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.322056}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.322243}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.322769}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.322915}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3231401}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.323554}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.324249}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.324415}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.324615}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.324779}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.325043}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.325527}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3269389}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.32721}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.327405}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3275552}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.327733}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.327967}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.328162}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3285382}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3287191}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.328875}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3464801}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.346638}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3469481}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.347136}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.347477}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3477051}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.348329}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.348589}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.34938}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3499641}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.350204}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.350514}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3508039}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.351138}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3512168}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3512928}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3517141}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.351883}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.352206}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3524091}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3531609}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.353239}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.353315}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.353385}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.353455}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3536189}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3536918}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.353764}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.353833}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.353995}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.35407}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.354135}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.354292}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.354362}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3544269}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3545852}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3546538}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.354723}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.354944}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.355017}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.355084}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3555999}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.356056}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3561962}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ dbt_utils.type_string() }}){%- endset -%}\n    {{ dbt_utils.replace(dbt_utils.replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.356504}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3566458}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3567529}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.357122}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.357229}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.357332}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.35794}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3581052}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.358268}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.358451}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.358646}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.358968}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3590431}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3591108}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.359499}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.359637}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.359838}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.359972}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.360557}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.360697}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.360853}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.361005}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.363185}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.363578}, "macro.dbt_utils.bigquery__listagg": {"unique_id": "macro.dbt_utils.bigquery__listagg", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3638542}, "macro.dbt_utils.postgres__listagg": {"unique_id": "macro.dbt_utils.postgres__listagg", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.364236}, "macro.dbt_utils.redshift__listagg": {"unique_id": "macro.dbt_utils.redshift__listagg", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.365162}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3676028}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.367759}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3679192}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3697789}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3699799}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.370395}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.370543}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3706722}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3707929}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.371134}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.371271}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.371396}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.371756}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.371891}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.372014}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.37252}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.372621}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.372715}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.373052}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.373149}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3732522}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.373656}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.373787}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.373916}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.374281}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.374399}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3749728}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.375081}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.375149}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3752162}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3753679}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.375482}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3756201}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.375724}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.375848}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3772411}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.377702}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.378165}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3783529}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3787699}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3788989}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3790238}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3791502}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.379524}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.379626}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.37979}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.37989}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.380484}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.380755}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.380896}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3812768}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.381451}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.382869}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3830268}, "macro.dbt_utils._split_part_negative": {"unique_id": "macro.dbt_utils._split_part_negative", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.383255}, "macro.dbt_utils.postgres__split_part": {"unique_id": "macro.dbt_utils.postgres__split_part", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3835762}, "macro.dbt_utils.redshift__split_part": {"unique_id": "macro.dbt_utils.redshift__split_part", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.383901}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3842502}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.384635}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.384764}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.38489}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.385437}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.385671}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.385808}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3859441}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.386078}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3870022}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.387421}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.387551}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.38774}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3879209}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.393375}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.393883}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.394198}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.3946822}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.399777}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.400245}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.400725}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.401248}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4018922}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.402269}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4025862}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4031591}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.403383}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.403837}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.404129}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4048152}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4051468}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.405623}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.405951}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.406334}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.406512}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.407163}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.407705}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.408292}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.408662}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.409119}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4092858}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4096682}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4098492}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.410486}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4111161}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.411711}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4120462}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.412569}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4128551}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4133198}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.413852}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.414546}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.41521}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.415678}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4158452}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.416609}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4174762}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.420437}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.421889}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.422241}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.422415}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4227479}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.422944}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.423263}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.423434}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4239502}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.42467}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.42525}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.425483}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4258401}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.426205}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.426612}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.427325}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.428164}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.429}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.429416}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4296079}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.430113}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4308102}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4316428}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4321}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.432381}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4330912}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4340549}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.43577}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4378371}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.44033}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.443317}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.443696}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.443944}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.446314}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.446541}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.44674}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.446924}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4470909}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4472551}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.447968}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4489028}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.449377}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4496582}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.450062}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.450388}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.451879}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.452149}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.452922}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.453421}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4545321}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4560142}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.457103}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.457937}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.458446}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.459164}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.459624}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4602299}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.460744}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.460829}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.460911}, "macro.dbt_utils.bigquery__get_table_types_sql": {"unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4609878}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4620118}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.462286}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.462851}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.463827}, "macro.fivetran_utils.enabled_vars": {"unique_id": "macro.fivetran_utils.enabled_vars", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "name": "enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4642901}, "macro.fivetran_utils.percentile": {"unique_id": "macro.fivetran_utils.percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__percentile"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.465207}, "macro.fivetran_utils.default__percentile": {"unique_id": "macro.fivetran_utils.default__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4653661}, "macro.fivetran_utils.redshift__percentile": {"unique_id": "macro.fivetran_utils.redshift__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.465527}, "macro.fivetran_utils.bigquery__percentile": {"unique_id": "macro.fivetran_utils.bigquery__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.465682}, "macro.fivetran_utils.postgres__percentile": {"unique_id": "macro.fivetran_utils.postgres__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.465819}, "macro.fivetran_utils.spark__percentile": {"unique_id": "macro.fivetran_utils.spark__percentile", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "name": "spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.465981}, "macro.fivetran_utils.pivot_json_extract": {"unique_id": "macro.fivetran_utils.pivot_json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "name": "pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.466455}, "macro.fivetran_utils.persist_pass_through_columns": {"unique_id": "macro.fivetran_utils.persist_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "name": "persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable, identifier=none, transform='') %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ transform ~ '(' ~ (identifier ~ '.' if identifier else '') ~ (field.alias if field.alias else field.name) ~ ')' }} as {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.467168}, "macro.fivetran_utils.json_parse": {"unique_id": "macro.fivetran_utils.json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4682298}, "macro.fivetran_utils.default__json_parse": {"unique_id": "macro.fivetran_utils.default__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.468469}, "macro.fivetran_utils.redshift__json_parse": {"unique_id": "macro.fivetran_utils.redshift__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4687061}, "macro.fivetran_utils.bigquery__json_parse": {"unique_id": "macro.fivetran_utils.bigquery__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4689438}, "macro.fivetran_utils.postgres__json_parse": {"unique_id": "macro.fivetran_utils.postgres__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4691782}, "macro.fivetran_utils.snowflake__json_parse": {"unique_id": "macro.fivetran_utils.snowflake__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.469443}, "macro.fivetran_utils.spark__json_parse": {"unique_id": "macro.fivetran_utils.spark__json_parse", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "name": "spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4697092}, "macro.fivetran_utils.max_bool": {"unique_id": "macro.fivetran_utils.max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.470078}, "macro.fivetran_utils.default__max_bool": {"unique_id": "macro.fivetran_utils.default__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.470176}, "macro.fivetran_utils.snowflake__max_bool": {"unique_id": "macro.fivetran_utils.snowflake__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.470272}, "macro.fivetran_utils.bigquery__max_bool": {"unique_id": "macro.fivetran_utils.bigquery__max_bool", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "name": "bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4704409}, "macro.fivetran_utils.calculated_fields": {"unique_id": "macro.fivetran_utils.calculated_fields", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "name": "calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4708722}, "macro.fivetran_utils.seed_data_helper": {"unique_id": "macro.fivetran_utils.seed_data_helper", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "name": "seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.471491}, "macro.fivetran_utils.fill_pass_through_columns": {"unique_id": "macro.fivetran_utils.fill_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "name": "fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field.transform_sql %}\n            , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n        {% else %}\n            , {{ field.alias if field.alias else field.name }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.472152}, "macro.fivetran_utils.string_agg": {"unique_id": "macro.fivetran_utils.string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.472657}, "macro.fivetran_utils.default__string_agg": {"unique_id": "macro.fivetran_utils.default__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.472791}, "macro.fivetran_utils.snowflake__string_agg": {"unique_id": "macro.fivetran_utils.snowflake__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.472938}, "macro.fivetran_utils.redshift__string_agg": {"unique_id": "macro.fivetran_utils.redshift__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.473065}, "macro.fivetran_utils.spark__string_agg": {"unique_id": "macro.fivetran_utils.spark__string_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.473193}, "macro.fivetran_utils.timestamp_diff": {"unique_id": "macro.fivetran_utils.timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.475873}, "macro.fivetran_utils.default__timestamp_diff": {"unique_id": "macro.fivetran_utils.default__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.476035}, "macro.fivetran_utils.redshift__timestamp_diff": {"unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.476196}, "macro.fivetran_utils.bigquery__timestamp_diff": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.47635}, "macro.fivetran_utils.postgres__timestamp_diff": {"unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4780889}, "macro.fivetran_utils.try_cast": {"unique_id": "macro.fivetran_utils.try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "try_cast", "macro_sql": "{% macro try_cast(field, type) %}\n    {{ adapter.dispatch('try_cast', 'fivetran_utils') (field, type) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__try_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.47894}, "macro.fivetran_utils.default__safe_cast": {"unique_id": "macro.fivetran_utils.default__safe_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.479079}, "macro.fivetran_utils.redshift__try_cast": {"unique_id": "macro.fivetran_utils.redshift__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "redshift__try_cast", "macro_sql": "{% macro redshift__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when trim({{field}}) ~ '^(0|[1-9][0-9]*)$' then trim({{field}})\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.479357}, "macro.fivetran_utils.postgres__try_cast": {"unique_id": "macro.fivetran_utils.postgres__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "postgres__try_cast", "macro_sql": "{% macro postgres__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.479646}, "macro.fivetran_utils.snowflake__try_cast": {"unique_id": "macro.fivetran_utils.snowflake__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "snowflake__try_cast", "macro_sql": "{% macro snowflake__try_cast(field, type) %}\n    try_cast(cast({{field}} as varchar) as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.479775}, "macro.fivetran_utils.bigquery__try_cast": {"unique_id": "macro.fivetran_utils.bigquery__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "bigquery__try_cast", "macro_sql": "{% macro bigquery__try_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.479897}, "macro.fivetran_utils.spark__try_cast": {"unique_id": "macro.fivetran_utils.spark__try_cast", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "name": "spark__try_cast", "macro_sql": "{% macro spark__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.480018}, "macro.fivetran_utils.source_relation": {"unique_id": "macro.fivetran_utils.source_relation", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "name": "source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.480546}, "macro.fivetran_utils.default__source_relation": {"unique_id": "macro.fivetran_utils.default__source_relation", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "name": "default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt_utils.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.481117}, "macro.fivetran_utils.first_value": {"unique_id": "macro.fivetran_utils.first_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.481652}, "macro.fivetran_utils.default__first_value": {"unique_id": "macro.fivetran_utils.default__first_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.481858}, "macro.fivetran_utils.redshift__first_value": {"unique_id": "macro.fivetran_utils.redshift__first_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "name": "redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4820821}, "macro.fivetran_utils.add_dbt_source_relation": {"unique_id": "macro.fivetran_utils.add_dbt_source_relation", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "name": "add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.482404}, "macro.fivetran_utils.add_pass_through_columns": {"unique_id": "macro.fivetran_utils.add_pass_through_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "name": "add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n      {% if column.alias %}\n\n      {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt_utils.type_string()}) %}\n\n      {% else %}\n\n      {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt_utils.type_string()}) %}\n        \n      {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.48328}, "macro.fivetran_utils.union_relations": {"unique_id": "macro.fivetran_utils.union_relations", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4871721}, "macro.fivetran_utils.union_tables": {"unique_id": "macro.fivetran_utils.union_tables", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "name": "union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.487541}, "macro.fivetran_utils.snowflake_seed_data": {"unique_id": "macro.fivetran_utils.snowflake_seed_data", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "name": "snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.487995}, "macro.fivetran_utils.fill_staging_columns": {"unique_id": "macro.fivetran_utils.fill_staging_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.489534}, "macro.fivetran_utils.quote_column": {"unique_id": "macro.fivetran_utils.quote_column", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "name": "quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4900742}, "macro.fivetran_utils.json_extract": {"unique_id": "macro.fivetran_utils.json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4906728}, "macro.fivetran_utils.default__json_extract": {"unique_id": "macro.fivetran_utils.default__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.490823}, "macro.fivetran_utils.snowflake__json_extract": {"unique_id": "macro.fivetran_utils.snowflake__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.490976}, "macro.fivetran_utils.redshift__json_extract": {"unique_id": "macro.fivetran_utils.redshift__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.491147}, "macro.fivetran_utils.bigquery__json_extract": {"unique_id": "macro.fivetran_utils.bigquery__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4913}, "macro.fivetran_utils.postgres__json_extract": {"unique_id": "macro.fivetran_utils.postgres__json_extract", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4914439}, "macro.fivetran_utils.collect_freshness": {"unique_id": "macro.fivetran_utils.collect_freshness", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.492165}, "macro.fivetran_utils.default__collect_freshness": {"unique_id": "macro.fivetran_utils.default__collect_freshness", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.493131}, "macro.fivetran_utils.timestamp_add": {"unique_id": "macro.fivetran_utils.timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.postgres__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.493851}, "macro.fivetran_utils.default__timestamp_add": {"unique_id": "macro.fivetran_utils.default__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.494016}, "macro.fivetran_utils.bigquery__timestamp_add": {"unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4941702}, "macro.fivetran_utils.redshift__timestamp_add": {"unique_id": "macro.fivetran_utils.redshift__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.494326}, "macro.fivetran_utils.postgres__timestamp_add": {"unique_id": "macro.fivetran_utils.postgres__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.494494}, "macro.fivetran_utils.spark__timestamp_add": {"unique_id": "macro.fivetran_utils.spark__timestamp_add", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt_utils.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.494665}, "macro.fivetran_utils.ceiling": {"unique_id": "macro.fivetran_utils.ceiling", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.494972}, "macro.fivetran_utils.default__ceiling": {"unique_id": "macro.fivetran_utils.default__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.495069}, "macro.fivetran_utils.snowflake__ceiling": {"unique_id": "macro.fivetran_utils.snowflake__ceiling", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4951649}, "macro.fivetran_utils.remove_prefix_from_columns": {"unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "name": "remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.4959161}, "macro.fivetran_utils.union_data": {"unique_id": "macro.fivetran_utils.union_data", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "name": "union_data", "macro_sql": "{% macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.497115}, "macro.fivetran_utils.default__union_data": {"unique_id": "macro.fivetran_utils.default__union_data", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "name": "default__union_data", "macro_sql": "{% macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) %}\n\n{% if var(union_schema_variable, none) %}\n\n    {% set relations = [] %}\n    \n    {% if var(union_schema_variable) is string %}\n    {% set trimmed = var(union_schema_variable)|trim('[')|trim(']') %}\n    {% set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") %}\n    {% else %}\n    {% set schemas = var(union_schema_variable) %}\n    {% endif %}\n\n    {% for schema in var(union_schema_variable) %}\n\n    {% set relation=adapter.get_relation(\n        database=var(database_variable, default_database),\n        schema=schema,\n        identifier=table_identifier\n    ) -%}\n    \n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% elif var(union_database_variable, none) %}\n\n    {% set relations = [] %}\n\n    {% for database in var(union_database_variable) %}\n\n    {% set relation=adapter.get_relation(\n        database=database,\n        schema=var(schema_variable, default_schema),\n        identifier=table_identifier\n    ) -%}\n\n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% else %}\n\n    select * \n    from {{ var(default_variable) }}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.498823}, "macro.fivetran_utils.dummy_coalesce_value": {"unique_id": "macro.fivetran_utils.dummy_coalesce_value", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "name": "dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.500282}, "macro.fivetran_utils.array_agg": {"unique_id": "macro.fivetran_utils.array_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.500617}, "macro.fivetran_utils.default__array_agg": {"unique_id": "macro.fivetran_utils.default__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.500721}, "macro.fivetran_utils.redshift__array_agg": {"unique_id": "macro.fivetran_utils.redshift__array_agg", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "name": "redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.5008278}, "macro.fivetran_utils.empty_variable_warning": {"unique_id": "macro.fivetran_utils.empty_variable_warning", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "name": "empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.501299}, "macro.fivetran_utils.enabled_vars_one_true": {"unique_id": "macro.fivetran_utils.enabled_vars_one_true", "package_name": "fivetran_utils", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "name": "enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.501769}, "macro.jira_source.get_issue_link_columns": {"unique_id": "macro.jira_source.get_issue_link_columns", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "macros/get_issue_link_columns.sql", "original_file_path": "macros/get_issue_link_columns.sql", "name": "get_issue_link_columns", "macro_sql": "{% macro get_issue_link_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"issue_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"related_issue_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"relationship\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.50241}, "macro.jira_source.get_issue_columns": {"unique_id": "macro.jira_source.get_issue_columns", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "macros/get_issue_columns.sql", "original_file_path": "macros/get_issue_columns.sql", "name": "get_issue_columns", "macro_sql": "{% macro get_issue_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_deleted\", \"datatype\": \"boolean\"},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"_original_estimate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"_remaining_estimate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"_time_spent\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"assignee\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"creator\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"due_date\", \"datatype\": \"date\"},\n    {\"name\": \"environment\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"issue_type\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"key\", \"datatype\": dbt_utils.type_string()},\n\n    {\"name\": \"original_estimate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"parent_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"priority\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"project\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"remaining_estimate\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"reporter\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"resolution\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"resolved\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"status\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"status_category_changed\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"summary\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"time_spent\", \"datatype\": dbt_utils.type_float()},\n    {\"name\": \"updated\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"work_ratio\", \"datatype\": dbt_utils.type_float()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_float", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.505544}, "macro.jira_source.get_status_columns": {"unique_id": "macro.jira_source.get_status_columns", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "macros/get_status_columns.sql", "original_file_path": "macros/get_status_columns.sql", "name": "get_status_columns", "macro_sql": "{% macro get_status_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"status_category_id\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.506291}, "macro.jira_source.get_status_category_columns": {"unique_id": "macro.jira_source.get_status_category_columns", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "macros/get_status_category_columns.sql", "original_file_path": "macros/get_status_category_columns.sql", "name": "get_status_category_columns", "macro_sql": "{% macro get_status_category_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.50685}, "macro.jira_source.get_issue_field_history_columns": {"unique_id": "macro.jira_source.get_issue_field_history_columns", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "macros/get_issue_field_history_columns.sql", "original_file_path": "macros/get_issue_field_history_columns.sql", "name": "get_issue_field_history_columns", "macro_sql": "{% macro get_issue_field_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"field_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"issue_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"value\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{% if target.type == 'redshift' %}\n {{ columns.append( {\"name\": \"time\", \"datatype\": dbt_utils.type_timestamp(), \"quote\": True } ) }}\n{% elif target.type == 'snowflake' %}\n {{ columns.append( {\"name\": \"TIME\", \"datatype\": dbt_utils.type_timestamp(), \"quote\": True } ) }}\n{% else %}\n {{ columns.append( {\"name\": \"time\", \"datatype\": dbt_utils.type_timestamp()} ) }}\n{% endif %}\n\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.5081432}, "macro.jira_source.get_comment_columns": {"unique_id": "macro.jira_source.get_comment_columns", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "macros/get_comment_columns.sql", "original_file_path": "macros/get_comment_columns.sql", "name": "get_comment_columns", "macro_sql": "{% macro get_comment_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"author_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"body\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"created\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"is_public\", \"datatype\": \"boolean\"},\n    {\"name\": \"issue_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"update_author_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"updated\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.509274}, "macro.jira_source.get_field_columns": {"unique_id": "macro.jira_source.get_field_columns", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "macros/get_field_columns.sql", "original_file_path": "macros/get_field_columns.sql", "name": "get_field_columns", "macro_sql": "{% macro get_field_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"is_array\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_custom\", \"datatype\": \"boolean\"},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.5099719}, "macro.jira_source.get_version_columns": {"unique_id": "macro.jira_source.get_version_columns", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "macros/get_version_columns.sql", "original_file_path": "macros/get_version_columns.sql", "name": "get_version_columns", "macro_sql": "{% macro get_version_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"archived\", \"datatype\": \"boolean\"},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"overdue\", \"datatype\": \"boolean\"},\n    {\"name\": \"project_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"release_date\", \"datatype\": \"date\"},\n    {\"name\": \"released\", \"datatype\": \"boolean\"},\n    {\"name\": \"start_date\", \"datatype\": \"date\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.511141}, "macro.jira_source.get_field_option_columns": {"unique_id": "macro.jira_source.get_field_option_columns", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "macros/get_field_option_columns.sql", "original_file_path": "macros/get_field_option_columns.sql", "name": "get_field_option_columns", "macro_sql": "{% macro get_field_option_columns() %}\n\n{% set columns = [\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"parent_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.5118048}, "macro.jira_source.get_issue_multiselect_history_columns": {"unique_id": "macro.jira_source.get_issue_multiselect_history_columns", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "macros/get_issue_multiselect_history_columns.sql", "original_file_path": "macros/get_issue_multiselect_history_columns.sql", "name": "get_issue_multiselect_history_columns", "macro_sql": "{% macro get_issue_multiselect_history_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"field_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"issue_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"value\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{% if target.type == 'redshift' %}\n {{ columns.append( {\"name\": \"time\", \"datatype\": dbt_utils.type_timestamp(), \"quote\": True } ) }}\n{% elif target.type == 'snowflake' %}\n {{ columns.append( {\"name\": \"TIME\", \"datatype\": dbt_utils.type_timestamp(), \"quote\": True } ) }}\n{% else %}\n {{ columns.append( {\"name\": \"time\", \"datatype\": dbt_utils.type_timestamp()} ) }}\n{% endif %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.513238}, "macro.jira_source.get_epic_columns": {"unique_id": "macro.jira_source.get_epic_columns", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "macros/get_epic_columns.sql", "original_file_path": "macros/get_epic_columns.sql", "name": "get_epic_columns", "macro_sql": "{% macro get_epic_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"done\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"key\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"summary\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.514113}, "macro.jira_source.get_issue_type_columns": {"unique_id": "macro.jira_source.get_issue_type_columns", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "macros/get_issue_type_columns.sql", "original_file_path": "macros/get_issue_type_columns.sql", "name": "get_issue_type_columns", "macro_sql": "{% macro get_issue_type_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"subtask\", \"datatype\": \"boolean\"}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.514833}, "macro.jira_source.get_user_columns": {"unique_id": "macro.jira_source.get_user_columns", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "macros/get_user_columns.sql", "original_file_path": "macros/get_user_columns.sql", "name": "get_user_columns", "macro_sql": "{% macro get_user_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"email\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"locale\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"time_zone\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"username\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.515763}, "macro.jira_source.get_project_columns": {"unique_id": "macro.jira_source.get_project_columns", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "macros/get_project_columns.sql", "original_file_path": "macros/get_project_columns.sql", "name": "get_project_columns", "macro_sql": "{% macro get_project_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"key\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"lead_id\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"permission_scheme_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"project_category_id\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.516781}, "macro.jira_source.get_resolution_columns": {"unique_id": "macro.jira_source.get_resolution_columns", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "macros/get_resolution_columns.sql", "original_file_path": "macros/get_resolution_columns.sql", "name": "get_resolution_columns", "macro_sql": "{% macro get_resolution_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.51743}, "macro.jira_source.get_component_columns": {"unique_id": "macro.jira_source.get_component_columns", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "macros/get_component_columns.sql", "original_file_path": "macros/get_component_columns.sql", "name": "get_component_columns", "macro_sql": "{% macro get_component_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"project_id\", \"datatype\": dbt_utils.type_int()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.518204}, "macro.jira_source.get_priority_columns": {"unique_id": "macro.jira_source.get_priority_columns", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "macros/get_priority_columns.sql", "original_file_path": "macros/get_priority_columns.sql", "name": "get_priority_columns", "macro_sql": "{% macro get_priority_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"description\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_string", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.518871}, "macro.jira_source.get_sprint_columns": {"unique_id": "macro.jira_source.get_sprint_columns", "package_name": "jira_source", "root_path": "/Users/joseph.markiewicz/Documents/dbt_packages/jira/dbt_jira/integration_tests/dbt_packages/jira_source", "path": "macros/get_sprint_columns.sql", "original_file_path": "macros/get_sprint_columns.sql", "name": "get_sprint_columns", "macro_sql": "{% macro get_sprint_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"board_id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"complete_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"end_date\", \"datatype\": dbt_utils.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt_utils.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt_utils.type_string()},\n    {\"name\": \"start_date\", \"datatype\": dbt_utils.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1663707928.519897}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-postgres/1.0.4/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"seed.jira_integration_tests.issue_link": [], "seed.jira_integration_tests.issue_type": [], "seed.jira_integration_tests.project_board": [], "seed.jira_integration_tests.resolution": [], "seed.jira_integration_tests.version": [], "seed.jira_integration_tests.status": [], "seed.jira_integration_tests.user_group": [], "seed.jira_integration_tests.component": [], "seed.jira_integration_tests.project": [], "seed.jira_integration_tests.issue_multiselect_history": [], "seed.jira_integration_tests.comment": [], "seed.jira_integration_tests.issue": [], "seed.jira_integration_tests.sprint": [], "seed.jira_integration_tests.field_option": [], "seed.jira_integration_tests.epic": [], "seed.jira_integration_tests.field": [], "seed.jira_integration_tests.user": [], "seed.jira_integration_tests.priority": [], "seed.jira_integration_tests.status_category": [], "seed.jira_integration_tests.issue_field_history": [], "seed.jira_integration_tests.project_category": [], "model.jira.jira__daily_issue_field_history": ["model.jira.int_jira__field_history_scd", "model.jira.int_jira__field_history_scd", "model.jira.int_jira__issue_calendar_spine", "model.jira_source.stg_jira__field_option", "model.jira_source.stg_jira__status"], "model.jira.jira__user_enhanced": ["model.jira.int_jira__user_metrics", "model.jira.jira__issue_enhanced", "model.jira_source.stg_jira__user"], "model.jira.jira__issue_enhanced": ["model.jira.int_jira__issue_join", "model.jira.int_jira__issue_join", "model.jira.jira__daily_issue_field_history", "model.jira.jira__daily_issue_field_history"], "model.jira.jira__project_enhanced": ["model.jira.int_jira__project_metrics", "model.jira.jira__issue_enhanced", "model.jira_source.stg_jira__component", "model.jira_source.stg_jira__project", "model.jira_source.stg_jira__user"], "model.jira.int_jira__issue_type_parents": ["model.jira.int_jira__issue_epic", "model.jira_source.stg_jira__issue", "model.jira_source.stg_jira__issue_type"], "model.jira.int_jira__issue_epic": ["model.jira.int_jira__issue_field_history"], "model.jira.int_jira__user_metrics": ["model.jira.jira__issue_enhanced"], "model.jira.int_jira__issue_join": ["model.jira.int_jira__issue_assign_resolution", "model.jira.int_jira__issue_comments", "model.jira.int_jira__issue_sprint", "model.jira.int_jira__issue_users", "model.jira.int_jira__issue_versions", "model.jira_source.stg_jira__priority", "model.jira_source.stg_jira__project", "model.jira_source.stg_jira__resolution", "model.jira_source.stg_jira__status", "model.jira_source.stg_jira__status_category"], "model.jira.int_jira__issue_assign_resolution": ["model.jira.int_jira__issue_field_history"], "model.jira.int_jira__issue_versions": ["model.jira.int_jira__issue_multiselect_history", "model.jira_source.stg_jira__version"], "model.jira.int_jira__issue_users": ["model.jira.int_jira__issue_type_parents", "model.jira.int_jira__issue_type_parents", "model.jira_source.stg_jira__user"], "model.jira.int_jira__issue_sprint": ["model.jira.int_jira__issue_multiselect_history", "model.jira_source.stg_jira__sprint"], "model.jira.int_jira__issue_comments": ["model.jira_source.stg_jira__comment", "model.jira_source.stg_jira__user"], "model.jira.int_jira__project_metrics": ["model.jira.jira__issue_enhanced"], "model.jira.int_jira__issue_multiselect_history": ["model.jira_source.stg_jira__field", "model.jira_source.stg_jira__issue_multiselect_history"], "model.jira.int_jira__pivot_daily_field_history": ["model.jira.int_jira__daily_field_history"], "model.jira.int_jira__issue_calendar_spine": ["model.jira_source.stg_jira__issue"], "model.jira.int_jira__agg_multiselect_history": ["model.jira.int_jira__issue_multiselect_history"], "model.jira.int_jira__field_history_scd": ["model.jira.int_jira__pivot_daily_field_history", "model.jira.int_jira__pivot_daily_field_history"], "model.jira.int_jira__combine_field_histories": ["model.jira.int_jira__agg_multiselect_history", "model.jira.int_jira__issue_field_history"], "model.jira.int_jira__issue_field_history": ["model.jira_source.stg_jira__field", "model.jira_source.stg_jira__issue_field_history"], "model.jira.int_jira__daily_field_history": ["model.jira.int_jira__combine_field_histories"], "model.jira_source.stg_jira__comment": ["model.jira_source.stg_jira__comment_tmp", "model.jira_source.stg_jira__comment_tmp"], "model.jira_source.stg_jira__project": ["model.jira_source.stg_jira__project_tmp", "model.jira_source.stg_jira__project_tmp"], "model.jira_source.stg_jira__issue_field_history": ["model.jira_source.stg_jira__issue_field_history_tmp", "model.jira_source.stg_jira__issue_field_history_tmp"], "model.jira_source.stg_jira__version": ["model.jira_source.stg_jira__version_tmp", "model.jira_source.stg_jira__version_tmp"], "model.jira_source.stg_jira__sprint": ["model.jira_source.stg_jira__sprint_tmp", "model.jira_source.stg_jira__sprint_tmp"], "model.jira_source.stg_jira__field_option": ["model.jira_source.stg_jira__field_option_tmp", "model.jira_source.stg_jira__field_option_tmp"], "model.jira_source.stg_jira__field": ["model.jira_source.stg_jira__field_tmp", "model.jira_source.stg_jira__field_tmp"], "model.jira_source.stg_jira__resolution": ["model.jira_source.stg_jira__resolution_tmp", "model.jira_source.stg_jira__resolution_tmp"], "model.jira_source.stg_jira__status": ["model.jira_source.stg_jira__status_tmp", "model.jira_source.stg_jira__status_tmp"], "model.jira_source.stg_jira__issue": ["model.jira_source.stg_jira__issue_tmp", "model.jira_source.stg_jira__issue_tmp"], "model.jira_source.stg_jira__status_category": ["model.jira_source.stg_jira__status_category_tmp", "model.jira_source.stg_jira__status_category_tmp"], "model.jira_source.stg_jira__issue_multiselect_history": ["model.jira_source.stg_jira__issue_multiselect_history_tmp", "model.jira_source.stg_jira__issue_multiselect_history_tmp"], "model.jira_source.stg_jira__issue_type": ["model.jira_source.stg_jira__issue_type_tmp", "model.jira_source.stg_jira__issue_type_tmp"], "model.jira_source.stg_jira__issue_link": ["model.jira_source.stg_jira__issue_link_tmp", "model.jira_source.stg_jira__issue_link_tmp"], "model.jira_source.stg_jira__component": ["model.jira_source.stg_jira__component_tmp", "model.jira_source.stg_jira__component_tmp"], "model.jira_source.stg_jira__user": ["model.jira_source.stg_jira__user_tmp", "model.jira_source.stg_jira__user_tmp"], "model.jira_source.stg_jira__priority": ["model.jira_source.stg_jira__priority_tmp", "model.jira_source.stg_jira__priority_tmp"], "model.jira_source.stg_jira__version_tmp": ["seed.jira_integration_tests.version"], "model.jira_source.stg_jira__status_category_tmp": ["seed.jira_integration_tests.status_category"], "model.jira_source.stg_jira__field_option_tmp": ["seed.jira_integration_tests.field_option"], "model.jira_source.stg_jira__issue_multiselect_history_tmp": ["seed.jira_integration_tests.issue_multiselect_history"], "model.jira_source.stg_jira__issue_type_tmp": ["seed.jira_integration_tests.issue_type"], "model.jira_source.stg_jira__sprint_tmp": ["seed.jira_integration_tests.sprint"], "model.jira_source.stg_jira__status_tmp": ["seed.jira_integration_tests.status"], "model.jira_source.stg_jira__project_tmp": ["seed.jira_integration_tests.project"], "model.jira_source.stg_jira__comment_tmp": ["seed.jira_integration_tests.comment"], "model.jira_source.stg_jira__issue_field_history_tmp": ["seed.jira_integration_tests.issue_field_history"], "model.jira_source.stg_jira__issue_link_tmp": ["seed.jira_integration_tests.issue_link"], "model.jira_source.stg_jira__field_tmp": ["seed.jira_integration_tests.field_option"], "model.jira_source.stg_jira__user_tmp": ["seed.jira_integration_tests.user"], "model.jira_source.stg_jira__issue_tmp": ["seed.jira_integration_tests.issue"], "model.jira_source.stg_jira__priority_tmp": ["seed.jira_integration_tests.priority"], "model.jira_source.stg_jira__component_tmp": ["seed.jira_integration_tests.component"], "model.jira_source.stg_jira__resolution_tmp": ["seed.jira_integration_tests.resolution"], "test.jira.unique_jira__daily_issue_field_history_issue_day_id.75c24d3154": ["model.jira.jira__daily_issue_field_history"], "test.jira.not_null_jira__daily_issue_field_history_issue_day_id.d13b058bcd": ["model.jira.jira__daily_issue_field_history"], "test.jira.unique_jira__issue_enhanced_issue_id.fec6e723ee": ["model.jira.jira__issue_enhanced"], "test.jira.not_null_jira__issue_enhanced_issue_id.6b18e0db38": ["model.jira.jira__issue_enhanced"], "test.jira.unique_jira__project_enhanced_project_id.c18e39faef": ["model.jira.jira__project_enhanced"], "test.jira.not_null_jira__project_enhanced_project_id.4f7c58f1d4": ["model.jira.jira__project_enhanced"], "test.jira.unique_jira__user_enhanced_user_id.c9ee73454a": ["model.jira.jira__user_enhanced"], "test.jira.not_null_jira__user_enhanced_user_id.aecc00744a": ["model.jira.jira__user_enhanced"], "test.jira.unique_int_jira__issue_join_issue_id.0bd360ec4b": ["model.jira.int_jira__issue_join"], "test.jira.not_null_int_jira__issue_join_issue_id.53391b21a6": ["model.jira.int_jira__issue_join"], "test.jira.unique_int_jira__project_metrics_project_id.154ccc194e": ["model.jira.int_jira__project_metrics"], "test.jira.not_null_int_jira__project_metrics_project_id.1542338148": ["model.jira.int_jira__project_metrics"], "test.jira.unique_int_jira__user_metrics_user_id.c042bcdd66": ["model.jira.int_jira__user_metrics"], "test.jira.not_null_int_jira__user_metrics_user_id.2143177b14": ["model.jira.int_jira__user_metrics"], "test.jira.unique_int_jira__issue_comments_issue_id.26e3f11046": ["model.jira.int_jira__issue_comments"], "test.jira.not_null_int_jira__issue_comments_issue_id.9f16878e45": ["model.jira.int_jira__issue_comments"], "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_epic_issue_id__epic_issue_id.9ddee9201b": ["model.jira.int_jira__issue_epic"], "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_sprint_issue_id__sprint_id.f6627c3eb3": ["model.jira.int_jira__issue_sprint"], "test.jira.unique_int_jira__issue_type_parents_issue_id.c07f8c6af3": ["model.jira.int_jira__issue_type_parents"], "test.jira.not_null_int_jira__issue_type_parents_issue_id.8dd98255b0": ["model.jira.int_jira__issue_type_parents"], "test.jira.unique_int_jira__issue_users_issue_id.e3a5962431": ["model.jira.int_jira__issue_users"], "test.jira.not_null_int_jira__issue_users_issue_id.480b7b6beb": ["model.jira.int_jira__issue_users"], "test.jira.unique_int_jira__agg_multiselect_history_batch_id.14b3dea579": ["model.jira.int_jira__agg_multiselect_history"], "test.jira.not_null_int_jira__agg_multiselect_history_batch_id.7d6d2460a8": ["model.jira.int_jira__agg_multiselect_history"], "test.jira.unique_int_jira__combine_field_histories_combined_history_id.5b6b492428": ["model.jira.int_jira__combine_field_histories"], "test.jira.not_null_int_jira__combine_field_histories_combined_history_id.943e81a794": ["model.jira.int_jira__combine_field_histories"], "test.jira.unique_int_jira__issue_calendar_spine_issue_day_id.c49483d2e5": ["model.jira.int_jira__issue_calendar_spine"], "test.jira.not_null_int_jira__issue_calendar_spine_issue_day_id.a9512b8e8a": ["model.jira.int_jira__issue_calendar_spine"], "test.jira.unique_int_jira__daily_field_history_issue_field_day_id.bfd34ced78": ["model.jira.int_jira__daily_field_history"], "test.jira.not_null_int_jira__daily_field_history_issue_field_day_id.c910c3df84": ["model.jira.int_jira__daily_field_history"], "test.jira.unique_int_jira__pivot_daily_field_history_issue_day_id.46c6f9a842": ["model.jira.int_jira__pivot_daily_field_history"], "test.jira.not_null_int_jira__pivot_daily_field_history_issue_day_id.b697c971fd": ["model.jira.int_jira__pivot_daily_field_history"], "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_field_history_field_id__issue_id__updated_at.34d1b3eaa1": ["model.jira.int_jira__issue_field_history"], "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_multiselect_history__fivetran_id__updated_at.aad394167d": ["model.jira.int_jira__issue_multiselect_history"], "test.jira.unique_int_jira__issue_assign_resolution_issue_id.f41f7c00ab": ["model.jira.int_jira__issue_assign_resolution"], "test.jira.not_null_int_jira__issue_assign_resolution_issue_id.b3af89c733": ["model.jira.int_jira__issue_assign_resolution"], "test.jira.unique_int_jira__field_history_scd_issue_day_id.21b932e949": ["model.jira.int_jira__field_history_scd"], "test.jira.not_null_int_jira__field_history_scd_issue_day_id.327ac0856c": ["model.jira.int_jira__field_history_scd"], "test.jira.unique_int_jira__issue_versions_issue_id.e2a88132de": ["model.jira.int_jira__issue_versions"], "test.jira.not_null_int_jira__issue_versions_issue_id.54c4cd445e": ["model.jira.int_jira__issue_versions"], "test.jira_source.unique_stg_jira__comment_comment_id.004104fac5": ["model.jira_source.stg_jira__comment"], "test.jira_source.not_null_stg_jira__comment_comment_id.5dec28a22a": ["model.jira_source.stg_jira__comment"], "test.jira_source.unique_stg_jira__component_component_id.1773ebe913": ["model.jira_source.stg_jira__component"], "test.jira_source.not_null_stg_jira__component_component_id.2f017ad5ad": ["model.jira_source.stg_jira__component"], "test.jira_source.unique_stg_jira__field_field_id.df7b462fff": ["model.jira_source.stg_jira__field"], "test.jira_source.not_null_stg_jira__field_field_id.34424f1c2b": ["model.jira_source.stg_jira__field"], "test.jira_source.not_null_stg_jira__field_option_field_id.1b1f37b358": ["model.jira_source.stg_jira__field_option"], "test.jira_source.unique_stg_jira__issue_issue_id.7bb0ee7230": ["model.jira_source.stg_jira__issue"], "test.jira_source.not_null_stg_jira__issue_issue_id.13a4fbe132": ["model.jira_source.stg_jira__issue"], "test.jira_source.dbt_utils_unique_combination_of_columns_stg_jira__issue_field_history_field_id__issue_id__updated_at.c01ecbb82c": ["model.jira_source.stg_jira__issue_field_history"], "test.jira_source.dbt_utils_unique_combination_of_columns_stg_jira__issue_multiselect_history__fivetran_id__updated_at.4dd2d1c5a8": ["model.jira_source.stg_jira__issue_multiselect_history"], "test.jira_source.unique_stg_jira__issue_type_issue_type_id.a89d34aa41": ["model.jira_source.stg_jira__issue_type"], "test.jira_source.not_null_stg_jira__issue_type_issue_type_id.57419fc343": ["model.jira_source.stg_jira__issue_type"], "test.jira_source.unique_stg_jira__priority_priority_id.79b77ea5d2": ["model.jira_source.stg_jira__priority"], "test.jira_source.not_null_stg_jira__priority_priority_id.ec0c873363": ["model.jira_source.stg_jira__priority"], "test.jira_source.unique_stg_jira__project_project_id.58d321d374": ["model.jira_source.stg_jira__project"], "test.jira_source.not_null_stg_jira__project_project_id.996fe19522": ["model.jira_source.stg_jira__project"], "test.jira_source.unique_stg_jira__resolution_resolution_id.b3acb37c87": ["model.jira_source.stg_jira__resolution"], "test.jira_source.not_null_stg_jira__resolution_resolution_id.1c04bac8a4": ["model.jira_source.stg_jira__resolution"], "test.jira_source.unique_stg_jira__sprint_sprint_id.8a73555fed": ["model.jira_source.stg_jira__sprint"], "test.jira_source.not_null_stg_jira__sprint_sprint_id.899b4b77d7": ["model.jira_source.stg_jira__sprint"], "test.jira_source.unique_stg_jira__status_status_id.0449241b95": ["model.jira_source.stg_jira__status"], "test.jira_source.not_null_stg_jira__status_status_id.b32a8a0d84": ["model.jira_source.stg_jira__status"], "test.jira_source.unique_stg_jira__status_category_status_category_id.99c869330a": ["model.jira_source.stg_jira__status_category"], "test.jira_source.not_null_stg_jira__status_category_status_category_id.7a89cdfcf0": ["model.jira_source.stg_jira__status_category"], "test.jira_source.unique_stg_jira__user_user_id.a397e1a23f": ["model.jira_source.stg_jira__user"], "test.jira_source.not_null_stg_jira__user_user_id.b2153f97d2": ["model.jira_source.stg_jira__user"], "test.jira_source.unique_stg_jira__version_version_id.08231bd017": ["model.jira_source.stg_jira__version"], "test.jira_source.not_null_stg_jira__version_version_id.03877ce324": ["model.jira_source.stg_jira__version"], "source.jira_source.jira.comment": [], "source.jira_source.jira.component": [], "source.jira_source.jira.field": [], "source.jira_source.jira.field_option": [], "source.jira_source.jira.issue": [], "source.jira_source.jira.issue_field_history": [], "source.jira_source.jira.issue_link": [], "source.jira_source.jira.issue_multiselect_history": [], "source.jira_source.jira.issue_type": [], "source.jira_source.jira.priority": [], "source.jira_source.jira.project": [], "source.jira_source.jira.resolution": [], "source.jira_source.jira.sprint": [], "source.jira_source.jira.status": [], "source.jira_source.jira.status_category": [], "source.jira_source.jira.user": [], "source.jira_source.jira.version": []}, "child_map": {"seed.jira_integration_tests.issue_link": ["model.jira_source.stg_jira__issue_link_tmp"], "seed.jira_integration_tests.issue_type": ["model.jira_source.stg_jira__issue_type_tmp"], "seed.jira_integration_tests.project_board": [], "seed.jira_integration_tests.resolution": ["model.jira_source.stg_jira__resolution_tmp"], "seed.jira_integration_tests.version": ["model.jira_source.stg_jira__version_tmp"], "seed.jira_integration_tests.status": ["model.jira_source.stg_jira__status_tmp"], "seed.jira_integration_tests.user_group": [], "seed.jira_integration_tests.component": ["model.jira_source.stg_jira__component_tmp"], "seed.jira_integration_tests.project": ["model.jira_source.stg_jira__project_tmp"], "seed.jira_integration_tests.issue_multiselect_history": ["model.jira_source.stg_jira__issue_multiselect_history_tmp"], "seed.jira_integration_tests.comment": ["model.jira_source.stg_jira__comment_tmp"], "seed.jira_integration_tests.issue": ["model.jira_source.stg_jira__issue_tmp"], "seed.jira_integration_tests.sprint": ["model.jira_source.stg_jira__sprint_tmp"], "seed.jira_integration_tests.field_option": ["model.jira_source.stg_jira__field_option_tmp", "model.jira_source.stg_jira__field_tmp"], "seed.jira_integration_tests.epic": [], "seed.jira_integration_tests.field": [], "seed.jira_integration_tests.user": ["model.jira_source.stg_jira__user_tmp"], "seed.jira_integration_tests.priority": ["model.jira_source.stg_jira__priority_tmp"], "seed.jira_integration_tests.status_category": ["model.jira_source.stg_jira__status_category_tmp"], "seed.jira_integration_tests.issue_field_history": ["model.jira_source.stg_jira__issue_field_history_tmp"], "seed.jira_integration_tests.project_category": [], "model.jira.jira__daily_issue_field_history": ["model.jira.jira__issue_enhanced", "model.jira.jira__issue_enhanced", "test.jira.not_null_jira__daily_issue_field_history_issue_day_id.d13b058bcd", "test.jira.unique_jira__daily_issue_field_history_issue_day_id.75c24d3154"], "model.jira.jira__user_enhanced": ["test.jira.not_null_jira__user_enhanced_user_id.aecc00744a", "test.jira.unique_jira__user_enhanced_user_id.c9ee73454a"], "model.jira.jira__issue_enhanced": ["model.jira.int_jira__project_metrics", "model.jira.int_jira__user_metrics", "model.jira.jira__project_enhanced", "model.jira.jira__user_enhanced", "test.jira.not_null_jira__issue_enhanced_issue_id.6b18e0db38", "test.jira.unique_jira__issue_enhanced_issue_id.fec6e723ee"], "model.jira.jira__project_enhanced": ["test.jira.not_null_jira__project_enhanced_project_id.4f7c58f1d4", "test.jira.unique_jira__project_enhanced_project_id.c18e39faef"], "model.jira.int_jira__issue_type_parents": ["model.jira.int_jira__issue_users", "model.jira.int_jira__issue_users", "test.jira.not_null_int_jira__issue_type_parents_issue_id.8dd98255b0", "test.jira.unique_int_jira__issue_type_parents_issue_id.c07f8c6af3"], "model.jira.int_jira__issue_epic": ["model.jira.int_jira__issue_type_parents", "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_epic_issue_id__epic_issue_id.9ddee9201b"], "model.jira.int_jira__user_metrics": ["model.jira.jira__user_enhanced", "test.jira.not_null_int_jira__user_metrics_user_id.2143177b14", "test.jira.unique_int_jira__user_metrics_user_id.c042bcdd66"], "model.jira.int_jira__issue_join": ["model.jira.jira__issue_enhanced", "model.jira.jira__issue_enhanced", "test.jira.not_null_int_jira__issue_join_issue_id.53391b21a6", "test.jira.unique_int_jira__issue_join_issue_id.0bd360ec4b"], "model.jira.int_jira__issue_assign_resolution": ["model.jira.int_jira__issue_join", "test.jira.not_null_int_jira__issue_assign_resolution_issue_id.b3af89c733", "test.jira.unique_int_jira__issue_assign_resolution_issue_id.f41f7c00ab"], "model.jira.int_jira__issue_versions": ["model.jira.int_jira__issue_join", "test.jira.not_null_int_jira__issue_versions_issue_id.54c4cd445e", "test.jira.unique_int_jira__issue_versions_issue_id.e2a88132de"], "model.jira.int_jira__issue_users": ["model.jira.int_jira__issue_join", "test.jira.not_null_int_jira__issue_users_issue_id.480b7b6beb", "test.jira.unique_int_jira__issue_users_issue_id.e3a5962431"], "model.jira.int_jira__issue_sprint": ["model.jira.int_jira__issue_join", "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_sprint_issue_id__sprint_id.f6627c3eb3"], "model.jira.int_jira__issue_comments": ["model.jira.int_jira__issue_join", "test.jira.not_null_int_jira__issue_comments_issue_id.9f16878e45", "test.jira.unique_int_jira__issue_comments_issue_id.26e3f11046"], "model.jira.int_jira__project_metrics": ["model.jira.jira__project_enhanced", "test.jira.not_null_int_jira__project_metrics_project_id.1542338148", "test.jira.unique_int_jira__project_metrics_project_id.154ccc194e"], "model.jira.int_jira__issue_multiselect_history": ["model.jira.int_jira__agg_multiselect_history", "model.jira.int_jira__issue_sprint", "model.jira.int_jira__issue_versions", "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_multiselect_history__fivetran_id__updated_at.aad394167d"], "model.jira.int_jira__pivot_daily_field_history": ["model.jira.int_jira__field_history_scd", "model.jira.int_jira__field_history_scd", "test.jira.not_null_int_jira__pivot_daily_field_history_issue_day_id.b697c971fd", "test.jira.unique_int_jira__pivot_daily_field_history_issue_day_id.46c6f9a842"], "model.jira.int_jira__issue_calendar_spine": ["model.jira.jira__daily_issue_field_history", "test.jira.not_null_int_jira__issue_calendar_spine_issue_day_id.a9512b8e8a", "test.jira.unique_int_jira__issue_calendar_spine_issue_day_id.c49483d2e5"], "model.jira.int_jira__agg_multiselect_history": ["model.jira.int_jira__combine_field_histories", "test.jira.not_null_int_jira__agg_multiselect_history_batch_id.7d6d2460a8", "test.jira.unique_int_jira__agg_multiselect_history_batch_id.14b3dea579"], "model.jira.int_jira__field_history_scd": ["model.jira.jira__daily_issue_field_history", "model.jira.jira__daily_issue_field_history", "test.jira.not_null_int_jira__field_history_scd_issue_day_id.327ac0856c", "test.jira.unique_int_jira__field_history_scd_issue_day_id.21b932e949"], "model.jira.int_jira__combine_field_histories": ["model.jira.int_jira__daily_field_history", "test.jira.not_null_int_jira__combine_field_histories_combined_history_id.943e81a794", "test.jira.unique_int_jira__combine_field_histories_combined_history_id.5b6b492428"], "model.jira.int_jira__issue_field_history": ["model.jira.int_jira__combine_field_histories", "model.jira.int_jira__issue_assign_resolution", "model.jira.int_jira__issue_epic", "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_field_history_field_id__issue_id__updated_at.34d1b3eaa1"], "model.jira.int_jira__daily_field_history": ["model.jira.int_jira__pivot_daily_field_history", "test.jira.not_null_int_jira__daily_field_history_issue_field_day_id.c910c3df84", "test.jira.unique_int_jira__daily_field_history_issue_field_day_id.bfd34ced78"], "model.jira_source.stg_jira__comment": ["model.jira.int_jira__issue_comments", "test.jira_source.not_null_stg_jira__comment_comment_id.5dec28a22a", "test.jira_source.unique_stg_jira__comment_comment_id.004104fac5"], "model.jira_source.stg_jira__project": ["model.jira.int_jira__issue_join", "model.jira.jira__project_enhanced", "test.jira_source.not_null_stg_jira__project_project_id.996fe19522", "test.jira_source.unique_stg_jira__project_project_id.58d321d374"], "model.jira_source.stg_jira__issue_field_history": ["model.jira.int_jira__issue_field_history", "test.jira_source.dbt_utils_unique_combination_of_columns_stg_jira__issue_field_history_field_id__issue_id__updated_at.c01ecbb82c"], "model.jira_source.stg_jira__version": ["model.jira.int_jira__issue_versions", "test.jira_source.not_null_stg_jira__version_version_id.03877ce324", "test.jira_source.unique_stg_jira__version_version_id.08231bd017"], "model.jira_source.stg_jira__sprint": ["model.jira.int_jira__issue_sprint", "test.jira_source.not_null_stg_jira__sprint_sprint_id.899b4b77d7", "test.jira_source.unique_stg_jira__sprint_sprint_id.8a73555fed"], "model.jira_source.stg_jira__field_option": ["model.jira.jira__daily_issue_field_history", "test.jira_source.not_null_stg_jira__field_option_field_id.1b1f37b358"], "model.jira_source.stg_jira__field": ["model.jira.int_jira__issue_field_history", "model.jira.int_jira__issue_multiselect_history", "test.jira_source.not_null_stg_jira__field_field_id.34424f1c2b", "test.jira_source.unique_stg_jira__field_field_id.df7b462fff"], "model.jira_source.stg_jira__resolution": ["model.jira.int_jira__issue_join", "test.jira_source.not_null_stg_jira__resolution_resolution_id.1c04bac8a4", "test.jira_source.unique_stg_jira__resolution_resolution_id.b3acb37c87"], "model.jira_source.stg_jira__status": ["model.jira.int_jira__issue_join", "model.jira.jira__daily_issue_field_history", "test.jira_source.not_null_stg_jira__status_status_id.b32a8a0d84", "test.jira_source.unique_stg_jira__status_status_id.0449241b95"], "model.jira_source.stg_jira__issue": ["model.jira.int_jira__issue_calendar_spine", "model.jira.int_jira__issue_type_parents", "test.jira_source.not_null_stg_jira__issue_issue_id.13a4fbe132", "test.jira_source.unique_stg_jira__issue_issue_id.7bb0ee7230"], "model.jira_source.stg_jira__status_category": ["model.jira.int_jira__issue_join", "test.jira_source.not_null_stg_jira__status_category_status_category_id.7a89cdfcf0", "test.jira_source.unique_stg_jira__status_category_status_category_id.99c869330a"], "model.jira_source.stg_jira__issue_multiselect_history": ["model.jira.int_jira__issue_multiselect_history", "test.jira_source.dbt_utils_unique_combination_of_columns_stg_jira__issue_multiselect_history__fivetran_id__updated_at.4dd2d1c5a8"], "model.jira_source.stg_jira__issue_type": ["model.jira.int_jira__issue_type_parents", "test.jira_source.not_null_stg_jira__issue_type_issue_type_id.57419fc343", "test.jira_source.unique_stg_jira__issue_type_issue_type_id.a89d34aa41"], "model.jira_source.stg_jira__issue_link": [], "model.jira_source.stg_jira__component": ["model.jira.jira__project_enhanced", "test.jira_source.not_null_stg_jira__component_component_id.2f017ad5ad", "test.jira_source.unique_stg_jira__component_component_id.1773ebe913"], "model.jira_source.stg_jira__user": ["model.jira.int_jira__issue_comments", "model.jira.int_jira__issue_users", "model.jira.jira__project_enhanced", "model.jira.jira__user_enhanced", "test.jira_source.not_null_stg_jira__user_user_id.b2153f97d2", "test.jira_source.unique_stg_jira__user_user_id.a397e1a23f"], "model.jira_source.stg_jira__priority": ["model.jira.int_jira__issue_join", "test.jira_source.not_null_stg_jira__priority_priority_id.ec0c873363", "test.jira_source.unique_stg_jira__priority_priority_id.79b77ea5d2"], "model.jira_source.stg_jira__version_tmp": ["model.jira_source.stg_jira__version", "model.jira_source.stg_jira__version"], "model.jira_source.stg_jira__status_category_tmp": ["model.jira_source.stg_jira__status_category", "model.jira_source.stg_jira__status_category"], "model.jira_source.stg_jira__field_option_tmp": ["model.jira_source.stg_jira__field_option", "model.jira_source.stg_jira__field_option"], "model.jira_source.stg_jira__issue_multiselect_history_tmp": ["model.jira_source.stg_jira__issue_multiselect_history", "model.jira_source.stg_jira__issue_multiselect_history"], "model.jira_source.stg_jira__issue_type_tmp": ["model.jira_source.stg_jira__issue_type", "model.jira_source.stg_jira__issue_type"], "model.jira_source.stg_jira__sprint_tmp": ["model.jira_source.stg_jira__sprint", "model.jira_source.stg_jira__sprint"], "model.jira_source.stg_jira__status_tmp": ["model.jira_source.stg_jira__status", "model.jira_source.stg_jira__status"], "model.jira_source.stg_jira__project_tmp": ["model.jira_source.stg_jira__project", "model.jira_source.stg_jira__project"], "model.jira_source.stg_jira__comment_tmp": ["model.jira_source.stg_jira__comment", "model.jira_source.stg_jira__comment"], "model.jira_source.stg_jira__issue_field_history_tmp": ["model.jira_source.stg_jira__issue_field_history", "model.jira_source.stg_jira__issue_field_history"], "model.jira_source.stg_jira__issue_link_tmp": ["model.jira_source.stg_jira__issue_link", "model.jira_source.stg_jira__issue_link"], "model.jira_source.stg_jira__field_tmp": ["model.jira_source.stg_jira__field", "model.jira_source.stg_jira__field"], "model.jira_source.stg_jira__user_tmp": ["model.jira_source.stg_jira__user", "model.jira_source.stg_jira__user"], "model.jira_source.stg_jira__issue_tmp": ["model.jira_source.stg_jira__issue", "model.jira_source.stg_jira__issue"], "model.jira_source.stg_jira__priority_tmp": ["model.jira_source.stg_jira__priority", "model.jira_source.stg_jira__priority"], "model.jira_source.stg_jira__component_tmp": ["model.jira_source.stg_jira__component", "model.jira_source.stg_jira__component"], "model.jira_source.stg_jira__resolution_tmp": ["model.jira_source.stg_jira__resolution", "model.jira_source.stg_jira__resolution"], "test.jira.unique_jira__daily_issue_field_history_issue_day_id.75c24d3154": [], "test.jira.not_null_jira__daily_issue_field_history_issue_day_id.d13b058bcd": [], "test.jira.unique_jira__issue_enhanced_issue_id.fec6e723ee": [], "test.jira.not_null_jira__issue_enhanced_issue_id.6b18e0db38": [], "test.jira.unique_jira__project_enhanced_project_id.c18e39faef": [], "test.jira.not_null_jira__project_enhanced_project_id.4f7c58f1d4": [], "test.jira.unique_jira__user_enhanced_user_id.c9ee73454a": [], "test.jira.not_null_jira__user_enhanced_user_id.aecc00744a": [], "test.jira.unique_int_jira__issue_join_issue_id.0bd360ec4b": [], "test.jira.not_null_int_jira__issue_join_issue_id.53391b21a6": [], "test.jira.unique_int_jira__project_metrics_project_id.154ccc194e": [], "test.jira.not_null_int_jira__project_metrics_project_id.1542338148": [], "test.jira.unique_int_jira__user_metrics_user_id.c042bcdd66": [], "test.jira.not_null_int_jira__user_metrics_user_id.2143177b14": [], "test.jira.unique_int_jira__issue_comments_issue_id.26e3f11046": [], "test.jira.not_null_int_jira__issue_comments_issue_id.9f16878e45": [], "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_epic_issue_id__epic_issue_id.9ddee9201b": [], "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_sprint_issue_id__sprint_id.f6627c3eb3": [], "test.jira.unique_int_jira__issue_type_parents_issue_id.c07f8c6af3": [], "test.jira.not_null_int_jira__issue_type_parents_issue_id.8dd98255b0": [], "test.jira.unique_int_jira__issue_users_issue_id.e3a5962431": [], "test.jira.not_null_int_jira__issue_users_issue_id.480b7b6beb": [], "test.jira.unique_int_jira__agg_multiselect_history_batch_id.14b3dea579": [], "test.jira.not_null_int_jira__agg_multiselect_history_batch_id.7d6d2460a8": [], "test.jira.unique_int_jira__combine_field_histories_combined_history_id.5b6b492428": [], "test.jira.not_null_int_jira__combine_field_histories_combined_history_id.943e81a794": [], "test.jira.unique_int_jira__issue_calendar_spine_issue_day_id.c49483d2e5": [], "test.jira.not_null_int_jira__issue_calendar_spine_issue_day_id.a9512b8e8a": [], "test.jira.unique_int_jira__daily_field_history_issue_field_day_id.bfd34ced78": [], "test.jira.not_null_int_jira__daily_field_history_issue_field_day_id.c910c3df84": [], "test.jira.unique_int_jira__pivot_daily_field_history_issue_day_id.46c6f9a842": [], "test.jira.not_null_int_jira__pivot_daily_field_history_issue_day_id.b697c971fd": [], "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_field_history_field_id__issue_id__updated_at.34d1b3eaa1": [], "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_multiselect_history__fivetran_id__updated_at.aad394167d": [], "test.jira.unique_int_jira__issue_assign_resolution_issue_id.f41f7c00ab": [], "test.jira.not_null_int_jira__issue_assign_resolution_issue_id.b3af89c733": [], "test.jira.unique_int_jira__field_history_scd_issue_day_id.21b932e949": [], "test.jira.not_null_int_jira__field_history_scd_issue_day_id.327ac0856c": [], "test.jira.unique_int_jira__issue_versions_issue_id.e2a88132de": [], "test.jira.not_null_int_jira__issue_versions_issue_id.54c4cd445e": [], "test.jira_source.unique_stg_jira__comment_comment_id.004104fac5": [], "test.jira_source.not_null_stg_jira__comment_comment_id.5dec28a22a": [], "test.jira_source.unique_stg_jira__component_component_id.1773ebe913": [], "test.jira_source.not_null_stg_jira__component_component_id.2f017ad5ad": [], "test.jira_source.unique_stg_jira__field_field_id.df7b462fff": [], "test.jira_source.not_null_stg_jira__field_field_id.34424f1c2b": [], "test.jira_source.not_null_stg_jira__field_option_field_id.1b1f37b358": [], "test.jira_source.unique_stg_jira__issue_issue_id.7bb0ee7230": [], "test.jira_source.not_null_stg_jira__issue_issue_id.13a4fbe132": [], "test.jira_source.dbt_utils_unique_combination_of_columns_stg_jira__issue_field_history_field_id__issue_id__updated_at.c01ecbb82c": [], "test.jira_source.dbt_utils_unique_combination_of_columns_stg_jira__issue_multiselect_history__fivetran_id__updated_at.4dd2d1c5a8": [], "test.jira_source.unique_stg_jira__issue_type_issue_type_id.a89d34aa41": [], "test.jira_source.not_null_stg_jira__issue_type_issue_type_id.57419fc343": [], "test.jira_source.unique_stg_jira__priority_priority_id.79b77ea5d2": [], "test.jira_source.not_null_stg_jira__priority_priority_id.ec0c873363": [], "test.jira_source.unique_stg_jira__project_project_id.58d321d374": [], "test.jira_source.not_null_stg_jira__project_project_id.996fe19522": [], "test.jira_source.unique_stg_jira__resolution_resolution_id.b3acb37c87": [], "test.jira_source.not_null_stg_jira__resolution_resolution_id.1c04bac8a4": [], "test.jira_source.unique_stg_jira__sprint_sprint_id.8a73555fed": [], "test.jira_source.not_null_stg_jira__sprint_sprint_id.899b4b77d7": [], "test.jira_source.unique_stg_jira__status_status_id.0449241b95": [], "test.jira_source.not_null_stg_jira__status_status_id.b32a8a0d84": [], "test.jira_source.unique_stg_jira__status_category_status_category_id.99c869330a": [], "test.jira_source.not_null_stg_jira__status_category_status_category_id.7a89cdfcf0": [], "test.jira_source.unique_stg_jira__user_user_id.a397e1a23f": [], "test.jira_source.not_null_stg_jira__user_user_id.b2153f97d2": [], "test.jira_source.unique_stg_jira__version_version_id.08231bd017": [], "test.jira_source.not_null_stg_jira__version_version_id.03877ce324": [], "source.jira_source.jira.comment": [], "source.jira_source.jira.component": [], "source.jira_source.jira.field": [], "source.jira_source.jira.field_option": [], "source.jira_source.jira.issue": [], "source.jira_source.jira.issue_field_history": [], "source.jira_source.jira.issue_link": [], "source.jira_source.jira.issue_multiselect_history": [], "source.jira_source.jira.issue_type": [], "source.jira_source.jira.priority": [], "source.jira_source.jira.project": [], "source.jira_source.jira.resolution": [], "source.jira_source.jira.sprint": [], "source.jira_source.jira.status": [], "source.jira_source.jira.status_category": [], "source.jira_source.jira.user": [], "source.jira_source.jira.version": []}}