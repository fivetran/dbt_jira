{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.4", "generated_at": "2024-01-09T11:19:52.721062Z", "invocation_id": "00839112-5ed1-44c6-90a3-f662963cfdfd", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.641926Z", "completed_at": "2024-01-09T11:19:44.651494Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.653834Z", "completed_at": "2024-01-09T11:19:44.653850Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.029013872146606445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__comment_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_1\".\"comment\"", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__comment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.644146Z", "completed_at": "2024-01-09T11:19:44.651904Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.654222Z", "completed_at": "2024-01-09T11:19:44.654229Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.028731107711791992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__component_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"jira_integrations_tests_1\".\"component\"", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__component_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.646548Z", "completed_at": "2024-01-09T11:19:44.652428Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.654636Z", "completed_at": "2024-01-09T11:19:44.654641Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.028476953506469727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__field_option_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_1\".\"field_option\"", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__field_option_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.663490Z", "completed_at": "2024-01-09T11:19:44.668740Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.670103Z", "completed_at": "2024-01-09T11:19:44.670108Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011924982070922852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue_field_history_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_1\".\"issue_field_history\"", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_field_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.660920Z", "completed_at": "2024-01-09T11:19:44.669002Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.670338Z", "completed_at": "2024-01-09T11:19:44.670342Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012929916381835938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__field_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_1\".\"field\"", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__field_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.666374Z", "completed_at": "2024-01-09T11:19:44.669230Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.670576Z", "completed_at": "2024-01-09T11:19:44.670579Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012321949005126953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue_link_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_1\".\"issue_link\"", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_link_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.674865Z", "completed_at": "2024-01-09T11:19:44.681980Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.682436Z", "completed_at": "2024-01-09T11:19:44.682441Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009778976440429688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue_multiselect_history_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_1\".\"issue_multiselect_history\"", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_multiselect_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.677618Z", "completed_at": "2024-01-09T11:19:44.683911Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.687055Z", "completed_at": "2024-01-09T11:19:44.687058Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015066146850585938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_1\".\"issue\"", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.679643Z", "completed_at": "2024-01-09T11:19:44.686771Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.688896Z", "completed_at": "2024-01-09T11:19:44.688901Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01598811149597168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue_type_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_1\".\"issue_type\"", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_type_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.684202Z", "completed_at": "2024-01-09T11:19:44.689158Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.690964Z", "completed_at": "2024-01-09T11:19:44.690967Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008477926254272461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__priority_tmp", "compiled": true, "compiled_code": "\n\nselect * from \"postgres\".\"jira_integrations_tests_1\".\"priority\"", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__priority_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.692100Z", "completed_at": "2024-01-09T11:19:44.697396Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.700282Z", "completed_at": "2024-01-09T11:19:44.700287Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010644197463989258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__project_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_1\".\"project\"", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__project_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.694873Z", "completed_at": "2024-01-09T11:19:44.700523Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.702121Z", "completed_at": "2024-01-09T11:19:44.702125Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011783838272094727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__resolution_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_1\".\"resolution\"", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__resolution_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.698072Z", "completed_at": "2024-01-09T11:19:44.701865Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.703695Z", "completed_at": "2024-01-09T11:19:44.703700Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010162830352783203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__sprint_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"jira_integrations_tests_1\".\"sprint\"", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__sprint_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.704193Z", "completed_at": "2024-01-09T11:19:44.709080Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.715412Z", "completed_at": "2024-01-09T11:19:44.715421Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0135650634765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__status_category_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_1\".\"status_category\"", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__status_category_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.709365Z", "completed_at": "2024-01-09T11:19:44.716473Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.717997Z", "completed_at": "2024-01-09T11:19:44.718001Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013515233993530273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__status_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_1\".\"status\"", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__status_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.712254Z", "completed_at": "2024-01-09T11:19:44.717150Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.720611Z", "completed_at": "2024-01-09T11:19:44.720614Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012940168380737305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__user_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_1\".\"user\"", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__user_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.718227Z", "completed_at": "2024-01-09T11:19:44.722472Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.723970Z", "completed_at": "2024-01-09T11:19:44.723973Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009970903396606445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__version_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"jira_integrations_tests_1\".\"version\"", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__version_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.724196Z", "completed_at": "2024-01-09T11:19:44.725261Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.727728Z", "completed_at": "2024-01-09T11:19:44.727731Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005950927734375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.comment", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.725502Z", "completed_at": "2024-01-09T11:19:44.726371Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.727946Z", "completed_at": "2024-01-09T11:19:44.727948Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0060541629791259766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.component", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.730030Z", "completed_at": "2024-01-09T11:19:44.731042Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.732557Z", "completed_at": "2024-01-09T11:19:44.732561Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007730007171630859, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.epic", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.732790Z", "completed_at": "2024-01-09T11:19:44.733693Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.736729Z", "completed_at": "2024-01-09T11:19:44.736732Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006315946578979492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.field", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.733923Z", "completed_at": "2024-01-09T11:19:44.735489Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.736955Z", "completed_at": "2024-01-09T11:19:44.736958Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006396055221557617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.field_option", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.739056Z", "completed_at": "2024-01-09T11:19:44.739914Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.741347Z", "completed_at": "2024-01-09T11:19:44.741351Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006745100021362305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.issue", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.741561Z", "completed_at": "2024-01-09T11:19:44.742456Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.744748Z", "completed_at": "2024-01-09T11:19:44.744751Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0055201053619384766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.issue_field_history", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.742686Z", "completed_at": "2024-01-09T11:19:44.743525Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.744989Z", "completed_at": "2024-01-09T11:19:44.744992Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005631923675537109, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.issue_link", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.747040Z", "completed_at": "2024-01-09T11:19:44.747995Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.749377Z", "completed_at": "2024-01-09T11:19:44.749381Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007414102554321289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.issue_multiselect_history", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.749594Z", "completed_at": "2024-01-09T11:19:44.751157Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.753453Z", "completed_at": "2024-01-09T11:19:44.753456Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006129026412963867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.issue_type", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.751408Z", "completed_at": "2024-01-09T11:19:44.752241Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.753682Z", "completed_at": "2024-01-09T11:19:44.753685Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006224155426025391, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.priority", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.755676Z", "completed_at": "2024-01-09T11:19:44.756664Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.758340Z", "completed_at": "2024-01-09T11:19:44.758345Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007241964340209961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.project", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.758583Z", "completed_at": "2024-01-09T11:19:44.759604Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.762023Z", "completed_at": "2024-01-09T11:19:44.762026Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00606226921081543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.project_board", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.759856Z", "completed_at": "2024-01-09T11:19:44.760711Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.762272Z", "completed_at": "2024-01-09T11:19:44.762275Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006134986877441406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.project_category", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.764266Z", "completed_at": "2024-01-09T11:19:44.765117Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.766544Z", "completed_at": "2024-01-09T11:19:44.766547Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007328033447265625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.resolution", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.766756Z", "completed_at": "2024-01-09T11:19:44.768377Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.770665Z", "completed_at": "2024-01-09T11:19:44.770668Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006499767303466797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.sprint", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.768607Z", "completed_at": "2024-01-09T11:19:44.769433Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.770970Z", "completed_at": "2024-01-09T11:19:44.770980Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006630897521972656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.status", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.773255Z", "completed_at": "2024-01-09T11:19:44.774299Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.776008Z", "completed_at": "2024-01-09T11:19:44.776013Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0075910091400146484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.status_category", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.776271Z", "completed_at": "2024-01-09T11:19:44.777324Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.779839Z", "completed_at": "2024-01-09T11:19:44.779843Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0065059661865234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.user", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.777597Z", "completed_at": "2024-01-09T11:19:44.778471Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.780154Z", "completed_at": "2024-01-09T11:19:44.780163Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006670713424682617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.user_group", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.782581Z", "completed_at": "2024-01-09T11:19:44.783665Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:44.785182Z", "completed_at": "2024-01-09T11:19:44.785187Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.015827178955078125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.version", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.785408Z", "completed_at": "2024-01-09T11:19:45.685056Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:45.687997Z", "completed_at": "2024-01-09T11:19:45.688001Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.9904136657714844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__comment", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__comment_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    author_id\n    \n as \n    \n    author_id\n    \n, \n    \n    \n    body\n    \n as \n    \n    body\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_public\n    \n as \n    \n    is_public\n    \n, \n    \n    \n    issue_id\n    \n as \n    \n    issue_id\n    \n, \n    \n    \n    update_author_id\n    \n as \n    \n    update_author_id\n    \n, \n    \n    \n    updated\n    \n as \n    \n    updated\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        author_id as author_user_id,\n        body,\n        cast(created as timestamp) as created_at,\n        id as comment_id,\n        issue_id,\n        is_public,\n        update_author_id as last_update_user_id,\n        cast(updated as timestamp) as last_updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__comment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.792436Z", "completed_at": "2024-01-09T11:19:45.684637Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:45.687653Z", "completed_at": "2024-01-09T11:19:45.687657Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.9926331043243408, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__component", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__component_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    project_id\n    \n as \n    \n    project_id\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        description as component_description,\n        id as component_id,\n        name as component_name,\n        project_id,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__component\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:44.798659Z", "completed_at": "2024-01-09T11:19:45.684241Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:45.687284Z", "completed_at": "2024-01-09T11:19:45.687293Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.9798228740692139, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__field_option", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__field_option_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    cast(null as integer) as \n    \n    parent_id\n    \n , \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as field_id,\n        parent_id as parent_field_id,\n        name as field_option_name\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__field_option\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:45.802366Z", "completed_at": "2024-01-09T11:19:46.767354Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:46.768554Z", "completed_at": "2024-01-09T11:19:46.768570Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.0746040344238281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue_multiselect_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_multiselect_history_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    field_id\n    \n as \n    \n    field_id\n    \n, \n    \n    \n    issue_id\n    \n as \n    \n    issue_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n, \n    \n    \n    time\n    \n as \n    \n    time\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        cast(field_id as TEXT) as field_id,\n        issue_id,\n        \n        cast(time as timestamp)\n         as updated_at,\n        value as field_value,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_multiselect_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:45.797673Z", "completed_at": "2024-01-09T11:19:46.768924Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:46.770961Z", "completed_at": "2024-01-09T11:19:46.770965Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.0769269466400146, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue_link", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_link_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    issue_id\n    \n as \n    \n    issue_id\n    \n, \n    \n    \n    related_issue_id\n    \n as \n    \n    related_issue_id\n    \n, \n    \n    \n    relationship\n    \n as \n    \n    relationship\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        issue_id,\n        related_issue_id,\n        relationship,\n        _fivetran_synced \n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_link\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:45.780621Z", "completed_at": "2024-01-09T11:19:46.768094Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:46.770329Z", "completed_at": "2024-01-09T11:19:46.770335Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.0927989482879639, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue_field_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_field_history_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    field_id\n    \n as \n    \n    field_id\n    \n, \n    \n    \n    issue_id\n    \n as \n    \n    issue_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n, \n    \n    \n    time\n    \n as \n    \n    time\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(field_id as TEXT) as field_id,\n        issue_id,\n        cast(time as timestamp)\n         as updated_at,\n        value as field_value,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_field_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:45.789967Z", "completed_at": "2024-01-09T11:19:46.769501Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:46.771496Z", "completed_at": "2024-01-09T11:19:46.771500Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.090320110321045, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__field", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__field_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_array\n    \n as \n    \n    is_array\n    \n, \n    \n    \n    is_custom\n    \n as \n    \n    is_custom\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as field_id,\n        is_array,\n        is_custom,\n        name as field_name,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__field\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:46.880277Z", "completed_at": "2024-01-09T11:19:47.826847Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:47.829071Z", "completed_at": "2024-01-09T11:19:47.829103Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.0475273132324219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue_type", "compiled": true, "compiled_code": "with base as (\n\n    select * from \n    \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_type_tmp\"\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    subtask\n    \n as \n    \n    subtask\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        description,\n        id as issue_type_id,\n        name as issue_type_name,\n        subtask as is_subtask,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_type\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:46.885784Z", "completed_at": "2024-01-09T11:19:47.828450Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:47.831344Z", "completed_at": "2024-01-09T11:19:47.831351Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.0503411293029785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__priority", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__priority_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        description as priority_description,\n        id as priority_id,\n        name as priority_name,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__priority\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:46.871451Z", "completed_at": "2024-01-09T11:19:47.828717Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:47.831729Z", "completed_at": "2024-01-09T11:19:47.831735Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.061838150024414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue", "compiled": true, "compiled_code": "with base as (\n    \n    select * \n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_tmp\"\n    where not coalesce(_fivetran_deleted, false)\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _original_estimate\n    \n as \n    \n    _original_estimate\n    \n, \n    \n    \n    _remaining_estimate\n    \n as \n    \n    _remaining_estimate\n    \n, \n    \n    \n    _time_spent\n    \n as \n    \n    _time_spent\n    \n, \n    \n    \n    assignee\n    \n as \n    \n    assignee\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    creator\n    \n as \n    \n    creator\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    environment\n    \n as \n    \n    environment\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    issue_type\n    \n as \n    \n    issue_type\n    \n, \n    \n    \n    key\n    \n as \n    \n    key\n    \n, \n    \n    \n    original_estimate\n    \n as \n    \n    original_estimate\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n, \n    \n    \n    priority\n    \n as \n    \n    priority\n    \n, \n    \n    \n    project\n    \n as \n    \n    project\n    \n, \n    \n    \n    remaining_estimate\n    \n as \n    \n    remaining_estimate\n    \n, \n    \n    \n    reporter\n    \n as \n    \n    reporter\n    \n, \n    \n    \n    resolution\n    \n as \n    \n    resolution\n    \n, \n    \n    \n    resolved\n    \n as \n    \n    resolved\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    status_category_changed\n    \n as \n    \n    status_category_changed\n    \n, \n    \n    \n    summary\n    \n as \n    \n    summary\n    \n, \n    \n    \n    time_spent\n    \n as \n    \n    time_spent\n    \n, \n    \n    \n    updated\n    \n as \n    \n    updated\n    \n, \n    \n    \n    work_ratio\n    \n as \n    \n    work_ratio\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        coalesce(original_estimate, _original_estimate) as original_estimate_seconds,\n        coalesce(remaining_estimate, _remaining_estimate) as remaining_estimate_seconds,\n        coalesce(time_spent, _time_spent) as time_spent_seconds,\n        assignee as assignee_user_id,\n        cast(created as timestamp) as created_at,\n        cast(resolved  as timestamp) as resolved_at,\n        creator as creator_user_id,\n        description as issue_description,\n        due_date,\n        environment,\n        id as issue_id,\n        issue_type as issue_type_id,\n        key as issue_key,\n        parent_id as parent_issue_id,\n        priority as priority_id,\n        project as project_id,\n        reporter as reporter_user_id,\n        resolution as resolution_id,\n        status as status_id,\n        cast(status_category_changed as timestamp) as status_changed_at,\n        summary as issue_name,\n        cast(updated as timestamp) as updated_at,\n        work_ratio,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:46.890397Z", "completed_at": "2024-01-09T11:19:47.827310Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:47.829584Z", "completed_at": "2024-01-09T11:19:47.829590Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.0517120361328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__project", "compiled": true, "compiled_code": "with base as (\n    \n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__project_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    key\n    \n as \n    \n    key\n    \n, \n    \n    \n    lead_id\n    \n as \n    \n    lead_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    permission_scheme_id\n    \n as \n    \n    permission_scheme_id\n    \n, \n    \n    \n    project_category_id\n    \n as \n    \n    project_category_id\n    \n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select \n        description as project_description,\n        id as project_id,\n        key as project_key,\n        lead_id as project_lead_user_id,\n        name as project_name,\n        project_category_id,\n        permission_scheme_id,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__project\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:47.920443Z", "completed_at": "2024-01-09T11:19:48.788604Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:48.790049Z", "completed_at": "2024-01-09T11:19:48.790064Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.9664149284362793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__resolution", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__resolution_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        description as resolution_description,\n        id as resolution_id,\n        name as resolution_name,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__resolution\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:47.941763Z", "completed_at": "2024-01-09T11:19:48.820212Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:48.821463Z", "completed_at": "2024-01-09T11:19:48.821475Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.9722239971160889, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__status_category", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__status_category_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as status_category_id,\n        name as status_category_name\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__status_category\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:47.935116Z", "completed_at": "2024-01-09T11:19:48.822276Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:48.823756Z", "completed_at": "2024-01-09T11:19:48.823765Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.9824550151824951, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__sprint", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__sprint_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    board_id\n    \n as \n    \n    board_id\n    \n, \n    \n    \n    complete_date\n    \n as \n    \n    complete_date\n    \n, \n    \n    \n    end_date\n    \n as \n    \n    end_date\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    start_date\n    \n as \n    \n    start_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as sprint_id,\n        name as sprint_name,\n        board_id,\n        cast(complete_date as timestamp) as completed_at,\n        cast(end_date as timestamp) as ended_at,\n        cast(start_date as timestamp) as started_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__sprint\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:47.946812Z", "completed_at": "2024-01-09T11:19:48.823227Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:48.824985Z", "completed_at": "2024-01-09T11:19:48.824991Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.9820868968963623, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__status", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__status_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    status_category_id\n    \n as \n    \n    status_category_id\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        description as status_description,\n        id as status_id,\n        name as status_name,\n        status_category_id,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__status\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:48.932312Z", "completed_at": "2024-01-09T11:19:48.938741Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:48.940164Z", "completed_at": "2024-01-09T11:19:48.940171Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02286696434020996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__comment_comment_id.004104fac5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    comment_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__comment\"\nwhere comment_id is not null\ngroup by comment_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:48.919749Z", "completed_at": "2024-01-09T11:19:48.939165Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:48.940499Z", "completed_at": "2024-01-09T11:19:48.940503Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02414417266845703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__comment_comment_id.5dec28a22a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect comment_id\nfrom \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__comment\"\nwhere comment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:48.944481Z", "completed_at": "2024-01-09T11:19:48.951831Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:48.953013Z", "completed_at": "2024-01-09T11:19:48.953019Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010972023010253906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__component_component_id.2f017ad5ad", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect component_id\nfrom \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__component\"\nwhere component_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:48.948158Z", "completed_at": "2024-01-09T11:19:48.952188Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:48.953301Z", "completed_at": "2024-01-09T11:19:48.953304Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011056900024414062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__component_component_id.1773ebe913", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    component_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__component\"\nwhere component_id is not null\ngroup by component_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:48.956865Z", "completed_at": "2024-01-09T11:19:48.969327Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:48.970575Z", "completed_at": "2024-01-09T11:19:48.970584Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.016013622283935547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__field_option_field_id.1b1f37b358", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect field_id\nfrom \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__field_option\"\nwhere field_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:48.960448Z", "completed_at": "2024-01-09T11:19:48.969778Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:48.970867Z", "completed_at": "2024-01-09T11:19:48.970871Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016270160675048828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.dbt_utils_unique_combination_of_columns_stg_jira__issue_multiselect_history__fivetran_id__updated_at.4dd2d1c5a8", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _fivetran_id, updated_at\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_multiselect_history\"\n    group by _fivetran_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:48.974349Z", "completed_at": "2024-01-09T11:19:48.981122Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:48.982413Z", "completed_at": "2024-01-09T11:19:48.982416Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010022163391113281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.dbt_utils_unique_combination_of_columns_stg_jira__issue_field_history_field_id__issue_id__updated_at.c01ecbb82c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        field_id, issue_id, updated_at\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_field_history\"\n    group by field_id, issue_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:48.987637Z", "completed_at": "2024-01-09T11:19:48.991377Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:48.992471Z", "completed_at": "2024-01-09T11:19:48.992474Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012197256088256836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__field_field_id.34424f1c2b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect field_id\nfrom \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__field\"\nwhere field_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:48.992702Z", "completed_at": "2024-01-09T11:19:49.000623Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.001167Z", "completed_at": "2024-01-09T11:19:49.001172Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01010894775390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__field_field_id.df7b462fff", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    field_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__field\"\nwhere field_id is not null\ngroup by field_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:48.997949Z", "completed_at": "2024-01-09T11:19:49.001406Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.002565Z", "completed_at": "2024-01-09T11:19:49.002568Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006072044372558594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__issue_type_issue_type_id.57419fc343", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_type_id\nfrom \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_type\"\nwhere issue_type_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.004028Z", "completed_at": "2024-01-09T11:19:49.009729Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.010201Z", "completed_at": "2024-01-09T11:19:49.010206Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008032083511352539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__issue_type_issue_type_id.a89d34aa41", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_type_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_type\"\nwhere issue_type_id is not null\ngroup by issue_type_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.007221Z", "completed_at": "2024-01-09T11:19:49.010423Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.011624Z", "completed_at": "2024-01-09T11:19:49.011627Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005745887756347656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__priority_priority_id.ec0c873363", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect priority_id\nfrom \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__priority\"\nwhere priority_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.013159Z", "completed_at": "2024-01-09T11:19:49.019947Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.020700Z", "completed_at": "2024-01-09T11:19:49.020705Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0094757080078125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__priority_priority_id.79b77ea5d2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    priority_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__priority\"\nwhere priority_id is not null\ngroup by priority_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.016347Z", "completed_at": "2024-01-09T11:19:49.020445Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.021665Z", "completed_at": "2024-01-09T11:19:49.021668Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006600856781005859, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__issue_issue_id.13a4fbe132", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_id\nfrom \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue\"\nwhere issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.023721Z", "completed_at": "2024-01-09T11:19:49.029345Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.029827Z", "completed_at": "2024-01-09T11:19:49.029831Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007796049118041992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__issue_issue_id.7bb0ee7230", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue\"\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.026757Z", "completed_at": "2024-01-09T11:19:49.030029Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.031176Z", "completed_at": "2024-01-09T11:19:49.031179Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008593082427978516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__project_project_id.996fe19522", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect project_id\nfrom \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__project\"\nwhere project_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.032799Z", "completed_at": "2024-01-09T11:19:49.039239Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.039780Z", "completed_at": "2024-01-09T11:19:49.039787Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009073257446289062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__project_project_id.58d321d374", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    project_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__project\"\nwhere project_id is not null\ngroup by project_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.036131Z", "completed_at": "2024-01-09T11:19:49.039996Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.041287Z", "completed_at": "2024-01-09T11:19:49.041290Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006716012954711914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__resolution_resolution_id.1c04bac8a4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect resolution_id\nfrom \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__resolution\"\nwhere resolution_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.042870Z", "completed_at": "2024-01-09T11:19:49.050327Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.050919Z", "completed_at": "2024-01-09T11:19:49.050926Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010004997253417969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__resolution_resolution_id.b3acb37c87", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    resolution_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__resolution\"\nwhere resolution_id is not null\ngroup by resolution_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.046534Z", "completed_at": "2024-01-09T11:19:49.051870Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.053258Z", "completed_at": "2024-01-09T11:19:49.053264Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008063077926635742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__status_category_status_category_id.7a89cdfcf0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect status_category_id\nfrom \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__status_category\"\nwhere status_category_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.054250Z", "completed_at": "2024-01-09T11:19:49.060911Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.061402Z", "completed_at": "2024-01-09T11:19:49.061407Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009084224700927734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__status_category_status_category_id.99c869330a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    status_category_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__status_category\"\nwhere status_category_id is not null\ngroup by status_category_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.058227Z", "completed_at": "2024-01-09T11:19:49.062359Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.063347Z", "completed_at": "2024-01-09T11:19:49.063350Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008858203887939453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__sprint_sprint_id.899b4b77d7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sprint_id\nfrom \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__sprint\"\nwhere sprint_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.063567Z", "completed_at": "2024-01-09T11:19:49.067714Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.071122Z", "completed_at": "2024-01-09T11:19:49.071126Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008960723876953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__sprint_sprint_id.8a73555fed", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    sprint_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__sprint\"\nwhere sprint_id is not null\ngroup by sprint_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.068440Z", "completed_at": "2024-01-09T11:19:49.072162Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.073174Z", "completed_at": "2024-01-09T11:19:49.073177Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.010009765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__status_status_id.b32a8a0d84", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect status_id\nfrom \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__status\"\nwhere status_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.073451Z", "completed_at": "2024-01-09T11:19:49.083965Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.084575Z", "completed_at": "2024-01-09T11:19:49.084582Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012634754180908203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__status_status_id.0449241b95", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    status_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__status\"\nwhere status_id is not null\ngroup by status_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.092657Z", "completed_at": "2024-01-09T11:19:49.098034Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.119533Z", "completed_at": "2024-01-09T11:19:49.119541Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.032994747161865234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_field_history_field_id__issue_id__updated_at.34d1b3eaa1", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    lower(fields.field_name) as field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n), validation_errors as (\n\n    select\n        field_id, issue_id, updated_at\n    from __dbt__cte__int_jira__issue_field_history\n    group by field_id, issue_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.098828Z", "completed_at": "2024-01-09T11:19:49.131117Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.131739Z", "completed_at": "2024-01-09T11:19:49.131745Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03455519676208496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.int_jira__agg_multiselect_history", "compiled": true, "compiled_code": "\n\n-- issue_multiselect_history splits out an array-type field into multiple rows with unique individual values\n-- to combine with issue_field_history we need to aggregate the multiselect field values.\n\nwith  __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    lower(fields.field_name) as field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n), issue_multiselect_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n    \n    -- always refresh the most recent day of data\n    where cast(updated_at as date) >= \n\n    (select max(date_day) from \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__agg_multiselect_history\") + ((interval '1 day') * (-1))\n\n\n    \n\n),\n\n-- each field value has its own row, but each batch of values for that field has the same timestamp\nbatch_updates as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(field_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(issue_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(updated_at as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as batch_id\n\n    from issue_multiselect_history \n),\n\nconsolidate_batches as (\n\n    select \n        field_id,\n        field_name,\n        issue_id,\n        updated_at,\n        batch_id,\n        cast( date_trunc('day', updated_at) as date) as date_day,\n\n        -- if the field refers to an object captured in a table elsewhere (ie sprint, users, field_option for custom fields),\n        -- the value is actually a foreign key to that table. \n        \n    string_agg(batch_updates.field_value, ', ')\n\n as field_values \n\n    from batch_updates\n\n    group by 1,2,3,4,5,6\n)\n\nselect *\nfrom consolidate_batches", "relation_name": "\"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__agg_multiselect_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.134818Z", "completed_at": "2024-01-09T11:19:49.142489Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.143333Z", "completed_at": "2024-01-09T11:19:49.143342Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010730981826782227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_multiselect_history__fivetran_id__updated_at.aad394167d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    lower(fields.field_name) as field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n), validation_errors as (\n\n    select\n        _fivetran_id, updated_at\n    from __dbt__cte__int_jira__issue_multiselect_history\n    group by _fivetran_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.139242Z", "completed_at": "2024-01-09T11:19:49.143646Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.145231Z", "completed_at": "2024-01-09T11:19:49.145235Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011758089065551758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__issue_assign_resolution_issue_id.b3af89c733", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    lower(fields.field_name) as field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_assign_resolution as (\nwith issue_field_history as (\n    \n    select *\n    from __dbt__cte__int_jira__issue_field_history\n\n), \n\nfiltered as (\n    -- we're only looking at assignments and resolutions, which are single-field values\n    select *\n    from issue_field_history\n\n    where (lower(field_id) = 'assignee'\n    or lower(field_id) = 'resolutiondate')\n\n    and field_value is not null -- remove initial null rows\n),\n\nissue_dates as (\n\n    select\n\n        issue_id,\n        min(case when field_id = 'assignee' then updated_at end) as first_assigned_at,\n        max(case when field_id = 'assignee' then updated_at end) as last_assigned_at,\n        min(case when field_id = 'resolutiondate' then updated_at end) as first_resolved_at -- in case it's been re-opened\n\n    from filtered\n    group by 1\n)\n\nselect *\nfrom issue_dates\n) select issue_id\nfrom __dbt__cte__int_jira__issue_assign_resolution\nwhere issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.147194Z", "completed_at": "2024-01-09T11:19:49.214133Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.214938Z", "completed_at": "2024-01-09T11:19:49.214945Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07008004188537598, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__issue_assign_resolution_issue_id.f41f7c00ab", "compiled": true, "compiled_code": "\n    \n    \n\nwith __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    lower(fields.field_name) as field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_assign_resolution as (\nwith issue_field_history as (\n    \n    select *\n    from __dbt__cte__int_jira__issue_field_history\n\n), \n\nfiltered as (\n    -- we're only looking at assignments and resolutions, which are single-field values\n    select *\n    from issue_field_history\n\n    where (lower(field_id) = 'assignee'\n    or lower(field_id) = 'resolutiondate')\n\n    and field_value is not null -- remove initial null rows\n),\n\nissue_dates as (\n\n    select\n\n        issue_id,\n        min(case when field_id = 'assignee' then updated_at end) as first_assigned_at,\n        max(case when field_id = 'assignee' then updated_at end) as last_assigned_at,\n        min(case when field_id = 'resolutiondate' then updated_at end) as first_resolved_at -- in case it's been re-opened\n\n    from filtered\n    group by 1\n)\n\nselect *\nfrom issue_dates\n) select\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_jira__issue_assign_resolution\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.205576Z", "completed_at": "2024-01-09T11:19:49.214673Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.216067Z", "completed_at": "2024-01-09T11:19:49.216077Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01235198974609375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.int_jira__issue_type_parents", "compiled": true, "compiled_code": "\n-- needs to be a view to use the dbt_utils.star macro in int_jira__issue_users\n\nwith  __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    lower(fields.field_name) as field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_epic as (\n-- issue-epic relationships are either captured via the issue's parent_issue_id (next-gen projects)\n-- or through the 'Epic Link' field (classic projects)\nwith epic_field_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_field_history\n    where lower(field_name) like 'epic%link'\n    \n),\n\norder_epic_links as (\n\n    select\n        issue_id,\n        cast(field_value as integer ) as epic_issue_id,\n\n        row_number() over (\n                partition by issue_id order by updated_at desc\n                ) as row_num\n\n    from epic_field_history\n),\n\nlast_epic_link as (\n\n    select \n      issue_id, \n      epic_issue_id \n    \n    from order_epic_links\n    where row_num = 1\n)\n\nselect *\nfrom last_epic_link\n), issue as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue\"\n    \n),\n\nissue_type as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_type\"\n), \n-- issue-epic relationships are either captured via the issue's parent_issue_id (next-gen projects)\n-- or through the 'Epic Link' field (classic projects)\n\nissues_w_epics as (\n\n  select * \n  from __dbt__cte__int_jira__issue_epic\n\n), \n\nissue_enriched_with_epics as (\n\n  select\n  \n    issue.*,\n    coalesce(parent_issue_id, epic_issue_id) as revised_parent_issue_id\n  \n  from issue\n  \n  left join issues_w_epics on issues_w_epics.issue_id = issue.issue_id\n\n), \n\nissue_w_types as (\n\n    select \n\n        issue_enriched_with_epics.*,\n        issue_type.issue_type_name as issue_type\n        \n    from issue_enriched_with_epics \n    \n    left join issue_type on issue_type.issue_type_id = issue_enriched_with_epics.issue_type_id\n),\n\nadd_parent_info as (\n\n    select\n        issue_w_types.*,\n        parent.issue_type as parent_issue_type,\n        parent.issue_name as parent_issue_name,\n        parent.issue_key as parent_issue_key,\n        lower(coalesce(parent.issue_type, '')) = 'epic' as is_parent_epic\n\n    from\n    issue_w_types\n\n    -- do a left join so we can grab all issue types from this table in `issue_join`\n    left join issue_w_types as parent on issue_w_types.revised_parent_issue_id = parent.issue_id\n\n)\n\nselect * \nfrom add_parent_info", "relation_name": "\"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__issue_type_parents\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.218606Z", "completed_at": "2024-01-09T11:19:49.237143Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.237756Z", "completed_at": "2024-01-09T11:19:49.237764Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02121901512145996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_epic_issue_id__epic_issue_id.9ddee9201b", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    lower(fields.field_name) as field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_epic as (\n-- issue-epic relationships are either captured via the issue's parent_issue_id (next-gen projects)\n-- or through the 'Epic Link' field (classic projects)\nwith epic_field_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_field_history\n    where lower(field_name) like 'epic%link'\n    \n),\n\norder_epic_links as (\n\n    select\n        issue_id,\n        cast(field_value as integer ) as epic_issue_id,\n\n        row_number() over (\n                partition by issue_id order by updated_at desc\n                ) as row_num\n\n    from epic_field_history\n),\n\nlast_epic_link as (\n\n    select \n      issue_id, \n      epic_issue_id \n    \n    from order_epic_links\n    where row_num = 1\n)\n\nselect *\nfrom last_epic_link\n), validation_errors as (\n\n    select\n        issue_id, epic_issue_id\n    from __dbt__cte__int_jira__issue_epic\n    group by issue_id, epic_issue_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.223363Z", "completed_at": "2024-01-09T11:19:49.237992Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.239288Z", "completed_at": "2024-01-09T11:19:49.239292Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.021799325942993164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.int_jira__combine_field_histories", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    lower(fields.field_name) as field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n), issue_field_history as (\n\n    select * from __dbt__cte__int_jira__issue_field_history\n\n    \n    where cast( updated_at as date) >= (select max(valid_starting_on) from \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__combine_field_histories\" )\n    \n),\n\nissue_multiselect_batch_history as (\n\n    select * from \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__agg_multiselect_history\"\n\n    \n    where cast( updated_at as date) >= (select max(valid_starting_on) from \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__combine_field_histories\" )\n    \n),\n\ncombine_field_history as (\n-- combining all the field histories together\n    select \n        field_id,\n        issue_id,\n        updated_at,\n        field_value,\n        field_name\n\n    from issue_field_history\n\n    union all\n\n    select \n        field_id,\n        issue_id,\n        updated_at,\n        field_values as field_value, -- this is an aggregated list but we'll just call it field_value\n        field_name\n\n    from issue_multiselect_batch_history\n),\n\nget_valid_dates as (\n\n\n    select \n        field_id,\n        issue_id,\n        field_value,\n        field_name,\n        updated_at as valid_starting_at,\n\n        -- this value is valid until the next value is updated\n        lead(updated_at, 1) over(partition by issue_id, field_id order by updated_at asc) as valid_ending_at, \n\n        cast( date_trunc('day', updated_at) as date) as valid_starting_on\n\n    from combine_field_history\n\n),\n\nsurrogate_key as (\n\n    select \n    *,\n    md5(cast(coalesce(cast(field_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(issue_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(valid_starting_at as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as combined_history_id\n\n    from get_valid_dates\n\n)\n\nselect * from surrogate_key", "relation_name": "\"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__combine_field_histories\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.240856Z", "completed_at": "2024-01-09T11:19:49.248165Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.248661Z", "completed_at": "2024-01-09T11:19:49.248666Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009557008743286133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__agg_multiselect_history_batch_id.7d6d2460a8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect batch_id\nfrom \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__agg_multiselect_history\"\nwhere batch_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.245480Z", "completed_at": "2024-01-09T11:19:49.249358Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.250705Z", "completed_at": "2024-01-09T11:19:49.250711Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006763935089111328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__agg_multiselect_history_batch_id.14b3dea579", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    batch_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__agg_multiselect_history\"\nwhere batch_id is not null\ngroup by batch_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.251784Z", "completed_at": "2024-01-09T11:19:49.260273Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.260876Z", "completed_at": "2024-01-09T11:19:49.260882Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011273860931396484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_sprint_issue_id__current_sprint_id.aafda24567", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    lower(fields.field_name) as field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_sprint as (\n\n\nwith sprint as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__sprint\"\n\n),\n\nfield_history as (\n\n     -- sprints don't appear to be capable of multiselect in the UI...\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n),\n\nsprint_field_history as (\n\n    select \n        field_history.*,\n        sprint.*,\n        row_number() over (\n                    partition by field_history.issue_id \n                    order by field_history.updated_at desc, sprint.started_at desc         \n                    ) as row_num\n    from field_history\n    join sprint on field_history.field_value = cast(sprint.sprint_id as TEXT)\n    where lower(field_history.field_name) = 'sprint'\n),\n\n\nlast_sprint as (\n\n    select *\n    from sprint_field_history\n    \n    where row_num = 1\n\n), \n\nsprint_rollovers as (\n\n    select \n        issue_id,\n        count(distinct case when field_value is not null then field_value end) as count_sprint_changes\n    \n    from sprint_field_history\n    group by 1\n\n),\n\nissue_sprint as (\n\n    select \n        last_sprint.issue_id,\n        last_sprint.field_value as current_sprint_id,\n        last_sprint.sprint_name as current_sprint_name,\n        last_sprint.board_id,\n        last_sprint.started_at as sprint_started_at,\n        last_sprint.ended_at as sprint_ended_at,\n        last_sprint.completed_at as sprint_completed_at,\n        coalesce(sprint_rollovers.count_sprint_changes, 0) as count_sprint_changes\n\n    from \n    last_sprint \n    left join sprint_rollovers on sprint_rollovers.issue_id = last_sprint.issue_id\n    \n)\n\nselect * from issue_sprint\n), validation_errors as (\n\n    select\n        issue_id, current_sprint_id\n    from __dbt__cte__int_jira__issue_sprint\n    group by issue_id, current_sprint_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.257479Z", "completed_at": "2024-01-09T11:19:49.262086Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.263202Z", "completed_at": "2024-01-09T11:19:49.263206Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009584903717041016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__issue_type_parents_issue_id.8dd98255b0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_id\nfrom \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__issue_type_parents\"\nwhere issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.263438Z", "completed_at": "2024-01-09T11:19:49.267780Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.274888Z", "completed_at": "2024-01-09T11:19:49.274900Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013142108917236328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__issue_type_parents_issue_id.c07f8c6af3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__issue_type_parents\"\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.268715Z", "completed_at": "2024-01-09T11:19:49.276798Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.280502Z", "completed_at": "2024-01-09T11:19:49.280511Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01372218132019043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.int_jira__daily_field_history", "compiled": true, "compiled_code": "\n\nwith combined_field_histories as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__combine_field_histories\"\n\n    \n    where valid_starting_on >= (select max(valid_starting_on) from \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__daily_field_history\" )\n    \n),\n\n\nlimit_to_relevant_fields as (\n\n-- let's remove unncessary rows moving forward and grab field names \n    select \n        combined_field_histories.*\n\n    from combined_field_histories\n\n    where lower(field_id) = 'status' \n            or lower(field_name) in ('sprint','summary','story points','components')\n    \n),\n\norder_daily_values as (\n\n    select \n        *,\n\n        -- want to grab last value for an issue's field for each day\n        row_number() over (\n            partition by valid_starting_on, issue_id, field_id\n            order by valid_starting_at desc\n            ) as row_num\n\n    from limit_to_relevant_fields\n),\n\n-- only looking at the latest value for each day\nget_latest_daily_value as (\n\n    select * \n    from order_daily_values\n\n    where row_num = 1\n), \n\nfinal as (\n\n    select\n        field_id,\n        issue_id,\n        field_name,\n\n        -- doing this to figure out what values are actually null and what needs to be backfilled in jira__daily_issue_field_history\n        case when field_value is null then 'is_null' else field_value end as field_value,\n        valid_starting_at,\n        valid_ending_at, \n        valid_starting_on,\n\n        md5(cast(coalesce(cast(field_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(issue_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(valid_starting_on as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as issue_field_day_id\n        \n    from get_latest_daily_value\n)\n\nselect * from final", "relation_name": "\"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__daily_field_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.277053Z", "completed_at": "2024-01-09T11:19:49.281675Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.282872Z", "completed_at": "2024-01-09T11:19:49.282876Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010049104690551758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__combine_field_histories_combined_history_id.943e81a794", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect combined_history_id\nfrom \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__combine_field_histories\"\nwhere combined_history_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.283134Z", "completed_at": "2024-01-09T11:19:49.293489Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.295466Z", "completed_at": "2024-01-09T11:19:49.295473Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013915777206420898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__combine_field_histories_combined_history_id.5b6b492428", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    combined_history_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__combine_field_histories\"\nwhere combined_history_id is not null\ngroup by combined_history_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.287830Z", "completed_at": "2024-01-09T11:19:49.296684Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.297784Z", "completed_at": "2024-01-09T11:19:49.297789Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014410018920898438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.int_jira__pivot_daily_field_history", "compiled": true, "compiled_code": "\n\n-- latest value per issue field (already limited included fields to sprint, status, and var(issue_field_history_columns))\nwith daily_field_history as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__daily_field_history\"\n\n    \n    where valid_starting_on >= (select max(valid_starting_on) from \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__pivot_daily_field_history\" )\n    \n),\n\npivot_out as (\n\n    -- pivot out default columns (status and sprint) and others specified in the var(issue_field_history_columns)\n    -- only days on which a field value was actively changed will have a non-null value. the nulls will need to \n    -- be backfilled in the final jira__daily_issue_field_history model\n    select \n        valid_starting_on, \n        issue_id,\n        max(case when lower(field_id) = 'status' then field_value end) as status,\n        max(case when lower(field_name) = 'sprint' then field_value end) as sprint\n\n        ,\n            max(case when lower(field_name) = 'summary' then field_value end) as summary\n        ,\n            max(case when lower(field_name) = 'story points' then field_value end) as story_points\n        ,\n            max(case when lower(field_name) = 'components' then field_value end) as components\n        from daily_field_history\n\n    group by 1,2\n),\n\nsurrogate_key as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(valid_starting_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(issue_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as issue_day_id\n\n    from pivot_out\n)\n\nselect * from surrogate_key", "relation_name": "\"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__pivot_daily_field_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.298050Z", "completed_at": "2024-01-09T11:19:49.302848Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.307517Z", "completed_at": "2024-01-09T11:19:49.307523Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011095046997070312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__daily_field_history_issue_field_day_id.c910c3df84", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_field_day_id\nfrom \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__daily_field_history\"\nwhere issue_field_day_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.303598Z", "completed_at": "2024-01-09T11:19:49.309428Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.316226Z", "completed_at": "2024-01-09T11:19:49.316233Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014580011367797852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__daily_field_history_issue_field_day_id.bfd34ced78", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_field_day_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__daily_field_history\"\nwhere issue_field_day_id is not null\ngroup by issue_field_day_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.318631Z", "completed_at": "2024-01-09T11:19:49.321578Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.322018Z", "completed_at": "2024-01-09T11:19:49.322022Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004378080368041992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__pivot_daily_field_history_issue_day_id.b697c971fd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_day_id\nfrom \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__pivot_daily_field_history\"\nwhere issue_day_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.323703Z", "completed_at": "2024-01-09T11:19:49.326941Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.327410Z", "completed_at": "2024-01-09T11:19:49.327415Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004853725433349609, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__pivot_daily_field_history_issue_day_id.46c6f9a842", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_day_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__pivot_daily_field_history\"\nwhere issue_day_id is not null\ngroup by issue_day_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:48.887934Z", "completed_at": "2024-01-09T11:19:49.749087Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.750407Z", "completed_at": "2024-01-09T11:19:49.750422Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.9501779079437256, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__user", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__user_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    locale\n    \n as \n    \n    locale\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    time_zone\n    \n as \n    \n    time_zone\n    \n, \n    \n    \n    username\n    \n as \n    \n    username\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select \n        email,\n        id as user_id,\n        locale,\n        name as user_display_name,\n        time_zone,\n        username,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__user\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:48.907487Z", "completed_at": "2024-01-09T11:19:49.761650Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.762207Z", "completed_at": "2024-01-09T11:19:49.762213Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.9572470188140869, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__version", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__version_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    archived\n    \n as \n    \n    archived\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    overdue\n    \n as \n    \n    overdue\n    \n, \n    \n    \n    project_id\n    \n as \n    \n    project_id\n    \n, \n    \n    \n    release_date\n    \n as \n    \n    release_date\n    \n, \n    \n    \n    released\n    \n as \n    \n    released\n    \n, \n    \n    \n    start_date\n    \n as \n    \n    start_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        archived as is_archived,\n        description,\n        id as version_id,\n        name as version_name,\n        overdue as is_overdue,\n        project_id,\n        cast(release_date as timestamp) as release_date,\n        released as is_released,\n        cast(start_date as timestamp) as start_date\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__version\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.860156Z", "completed_at": "2024-01-09T11:19:49.869345Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.871277Z", "completed_at": "2024-01-09T11:19:49.871284Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03138017654418945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__user_user_id.b2153f97d2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__user\"\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.865960Z", "completed_at": "2024-01-09T11:19:49.871622Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.873778Z", "completed_at": "2024-01-09T11:19:49.873782Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.029188156127929688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__user_user_id.a397e1a23f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__user\"\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.895923Z", "completed_at": "2024-01-09T11:19:49.904826Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.905616Z", "completed_at": "2024-01-09T11:19:49.905623Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012948989868164062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__version_version_id.03877ce324", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect version_id\nfrom \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__version\"\nwhere version_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.901399Z", "completed_at": "2024-01-09T11:19:49.906905Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.908209Z", "completed_at": "2024-01-09T11:19:49.908214Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.021363258361816406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__version_version_id.08231bd017", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    version_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__version\"\nwhere version_id is not null\ngroup by version_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.924003Z", "completed_at": "2024-01-09T11:19:49.934436Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.935139Z", "completed_at": "2024-01-09T11:19:49.935145Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013020038604736328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__issue_comments_issue_id.9f16878e45", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_jira__issue_comments as (\n\n\nwith comment as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__comment\"\n\n    order by issue_id, created_at asc\n\n),\n\n-- user is a reserved keyword in AWS \njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__user\"\n),\n\nagg_comments as (\n\n    select \n    comment.issue_id,\n    \n    string_agg(comment.created_at || '  -  ' || jira_user.user_display_name || ':  ' || comment.body, '\\n')\n\n as conversation,\n    count(comment.comment_id) as count_comments\n\n    from\n    comment \n    join jira_user on comment.author_user_id = jira_user.user_id\n\n    group by 1\n)\n\nselect * from agg_comments\n) select issue_id\nfrom __dbt__cte__int_jira__issue_comments\nwhere issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.929187Z", "completed_at": "2024-01-09T11:19:49.940526Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.941102Z", "completed_at": "2024-01-09T11:19:49.941107Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.013138055801391602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__issue_comments_issue_id.26e3f11046", "compiled": true, "compiled_code": "\n    \n    \n\nwith __dbt__cte__int_jira__issue_comments as (\n\n\nwith comment as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__comment\"\n\n    order by issue_id, created_at asc\n\n),\n\n-- user is a reserved keyword in AWS \njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__user\"\n),\n\nagg_comments as (\n\n    select \n    comment.issue_id,\n    \n    string_agg(comment.created_at || '  -  ' || jira_user.user_display_name || ':  ' || comment.body, '\\n')\n\n as conversation,\n    count(comment.comment_id) as count_comments\n\n    from\n    comment \n    join jira_user on comment.author_user_id = jira_user.user_id\n\n    group by 1\n)\n\nselect * from agg_comments\n) select\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_jira__issue_comments\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.936817Z", "completed_at": "2024-01-09T11:19:49.941811Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.943038Z", "completed_at": "2024-01-09T11:19:49.943043Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007550239562988281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__issue_versions_issue_id.54c4cd445e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    lower(fields.field_name) as field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_versions as (\n\n\nwith version as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__version\"\n),\n\nversion_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n    where field_id = 'versions'\n        or field_id = 'fixVersions'\n),\n\norder_versions as (\n\n    select\n        *,\n        -- using rank so batches stick together\n        rank() over (\n            partition by field_id, issue_id\n            order by updated_at desc\n            ) as row_num\n\n    from version_history\n),\n\nlatest_versions as (\n\n    select \n        field_id,\n        issue_id,\t\n        updated_at,\n        cast(field_value as integer) as version_id\n    from order_versions\n    where row_num = 1\n),\n\nversion_info as (\n\n    select \n        latest_versions.field_id,\n        latest_versions.issue_id,\n        \n    string_agg(version.version_name, ', ')\n\n as versions\n\n    from latest_versions\n    join version on latest_versions.version_id = version.version_id\n\n    group by 1,2\n),\n\nsplit_versions as (\n\n    select \n        issue_id,\n        case when field_id = 'versions' then versions else null end as affects_versions,\n        case when field_id = 'fixVersions' then versions else null end as fixes_versions\n    from version_info\n),\n\nfinal as (\n\n    select \n        issue_id,\n        max(affects_versions) as affects_versions,\n        max(fixes_versions) as fixes_versions\n    from split_versions\n    group by 1\n)\n\nselect *\nfrom final\n) select issue_id\nfrom __dbt__cte__int_jira__issue_versions\nwhere issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.943988Z", "completed_at": "2024-01-09T11:19:49.948143Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:49.948628Z", "completed_at": "2024-01-09T11:19:49.948633Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.006396055221557617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__issue_versions_issue_id.e2a88132de", "compiled": true, "compiled_code": "\n    \n    \n\nwith __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    lower(fields.field_name) as field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_versions as (\n\n\nwith version as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__version\"\n),\n\nversion_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n    where field_id = 'versions'\n        or field_id = 'fixVersions'\n),\n\norder_versions as (\n\n    select\n        *,\n        -- using rank so batches stick together\n        rank() over (\n            partition by field_id, issue_id\n            order by updated_at desc\n            ) as row_num\n\n    from version_history\n),\n\nlatest_versions as (\n\n    select \n        field_id,\n        issue_id,\t\n        updated_at,\n        cast(field_value as integer) as version_id\n    from order_versions\n    where row_num = 1\n),\n\nversion_info as (\n\n    select \n        latest_versions.field_id,\n        latest_versions.issue_id,\n        \n    string_agg(version.version_name, ', ')\n\n as versions\n\n    from latest_versions\n    join version on latest_versions.version_id = version.version_id\n\n    group by 1,2\n),\n\nsplit_versions as (\n\n    select \n        issue_id,\n        case when field_id = 'versions' then versions else null end as affects_versions,\n        case when field_id = 'fixVersions' then versions else null end as fixes_versions\n    from version_info\n),\n\nfinal as (\n\n    select \n        issue_id,\n        max(affects_versions) as affects_versions,\n        max(fixes_versions) as fixes_versions\n    from split_versions\n    group by 1\n)\n\nselect *\nfrom final\n) select\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_jira__issue_versions\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:49.309676Z", "completed_at": "2024-01-09T11:19:50.185824Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:50.186679Z", "completed_at": "2024-01-09T11:19:50.186687Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.977752685546875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.int_jira__field_history_scd", "compiled": true, "compiled_code": "with issue as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue\"\n),   \n    \nchange_data as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__pivot_daily_field_history\"\n), \n\nset_values as (\n\n    select \n        valid_starting_on, \n        issue_id,\n        issue_day_id,\n        status as status_id,\n        sum( case when status is null then 0 else 1 end) over ( partition by issue_id \n            order by valid_starting_on rows unbounded preceding) as status_id_field_partition\n\n         \n        , status\n        -- create a batch/partition once a new value is provided\n        , sum( case when status is null then 0 else 1 end) over ( partition by issue_id \n            order by valid_starting_on rows unbounded preceding) as status_field_partition\n\n         \n        , sprint\n        -- create a batch/partition once a new value is provided\n        , sum( case when sprint is null then 0 else 1 end) over ( partition by issue_id \n            order by valid_starting_on rows unbounded preceding) as sprint_field_partition\n\n         \n        , summary\n        -- create a batch/partition once a new value is provided\n        , sum( case when summary is null then 0 else 1 end) over ( partition by issue_id \n            order by valid_starting_on rows unbounded preceding) as summary_field_partition\n\n         \n        , story_points\n        -- create a batch/partition once a new value is provided\n        , sum( case when story_points is null then 0 else 1 end) over ( partition by issue_id \n            order by valid_starting_on rows unbounded preceding) as story_points_field_partition\n\n         \n        , components\n        -- create a batch/partition once a new value is provided\n        , sum( case when components is null then 0 else 1 end) over ( partition by issue_id \n            order by valid_starting_on rows unbounded preceding) as components_field_partition\n\n        \n    \n    from change_data\n\n), \n\nfill_values as (\n\n-- each row of the pivoted table includes field values if that field was updated on that day\n-- we need to backfill to persist values that have been previously updated and are still valid \n    select \n        valid_starting_on, \n        issue_id,\n        issue_day_id,\n        first_value( status ) over (\n            partition by issue_id, status_id_field_partition \n            order by valid_starting_on asc rows between unbounded preceding and current row) as status_id\n        \n         \n\n        -- grab the value that started this batch/partition\n        , first_value( status ) over (\n            partition by issue_id, status_field_partition \n            order by valid_starting_on asc rows between unbounded preceding and current row) as status\n\n         \n\n        -- grab the value that started this batch/partition\n        , first_value( sprint ) over (\n            partition by issue_id, sprint_field_partition \n            order by valid_starting_on asc rows between unbounded preceding and current row) as sprint\n\n         \n\n        -- grab the value that started this batch/partition\n        , first_value( summary ) over (\n            partition by issue_id, summary_field_partition \n            order by valid_starting_on asc rows between unbounded preceding and current row) as summary\n\n         \n\n        -- grab the value that started this batch/partition\n        , first_value( story_points ) over (\n            partition by issue_id, story_points_field_partition \n            order by valid_starting_on asc rows between unbounded preceding and current row) as story_points\n\n         \n\n        -- grab the value that started this batch/partition\n        , first_value( components ) over (\n            partition by issue_id, components_field_partition \n            order by valid_starting_on asc rows between unbounded preceding and current row) as components\n\n        \n\n    from set_values\n\n),\n\nissue_dates as (\n\n    select\n        fill_values.*,\n        cast( date_trunc('day', issue.created_at) as date) as created_on,\n        -- resolved_at will become null if an issue is marked as un-resolved. if this sorta thing happens often, you may want to run full-refreshes of the field_history models often\n        -- if it's not resolved include everything up to today. if it is, look at the last time it was updated \n        cast(date_trunc('day', case when issue.resolved_at is null then \n    (current_timestamp at time zone 'utc')::timestamp\n else cast(fill_values.valid_starting_on as timestamp) end) as date) as open_until\n    from fill_values\n    left join issue\n        on fill_values.issue_id = issue.issue_id\n)\n\nselect *\nfrom issue_dates", "relation_name": "\"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__field_history_scd\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:50.296294Z", "completed_at": "2024-01-09T11:19:50.322442Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:50.331897Z", "completed_at": "2024-01-09T11:19:50.331906Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04012012481689453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.int_jira__issue_calendar_spine", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_jira__calendar_spine as (\nwith spine as (\n\n    \n    \n    \n    \n    \n\n\n    select * \n    from (\n        \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1385\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2020-04-01' as date) + ((interval '1 day') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= \n\n    \n    (current_timestamp at time zone 'utc')::timestamp\n + ((interval '1 week') * (1))\n\n\n\n)\n\nselect * from filtered\n\n \n    ) as date_spine\n\n),\n\nrecast as (\n\n    select cast(date_day as date) as date_day\n    from spine\n)\n\nselect *\nfrom recast\n), spine as (\n\n    select *\n    from __dbt__cte__int_jira__calendar_spine\n\n\n    \n    where date_day >= (select max(date_day) from \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__issue_calendar_spine\")\n      \n),\n\nissue_dates as (\n    \n    select *\n    from \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__field_history_scd\" \n\n    \n    where valid_starting_on >= (select max(date_day) from \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__issue_calendar_spine\")\n    \n), \n\nissue_spine as (\n\n    select \n        cast(spine.date_day as date) as date_day,\n        issue_dates.issue_id,\n        -- will take the table-wide min of this in the incremental block at the top of this model\n        min(issue_dates.open_until) as earliest_open_until_date\n    from spine \n    join issue_dates on\n        issue_dates.created_on <= spine.date_day\n        and \n\n    issue_dates.open_until + ((interval '1 month') * (1))\n\n >= spine.date_day\n        -- if we cut off issues, we're going to have to do a full refresh to catch issues that have been un-resolved\n\n    group by 1,2\n),\n\nsurrogate_key as (\n\n    select \n        date_day,\n        issue_id,\n        md5(cast(coalesce(cast(date_day as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(issue_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as issue_day_id,\n        earliest_open_until_date\n    from issue_spine\n    where date_day <= cast( date_trunc('day', \n    (current_timestamp at time zone 'utc')::timestamp\n) as date)\n)\n\nselect * from surrogate_key", "relation_name": "\"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__issue_calendar_spine\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:50.327887Z", "completed_at": "2024-01-09T11:19:50.333120Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:50.334852Z", "completed_at": "2024-01-09T11:19:50.334857Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01530313491821289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__field_history_scd_issue_day_id.21b932e949", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_day_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__field_history_scd\"\nwhere issue_day_id is not null\ngroup by issue_day_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:50.322811Z", "completed_at": "2024-01-09T11:19:50.333530Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:50.335749Z", "completed_at": "2024-01-09T11:19:50.335754Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016920089721679688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__field_history_scd_issue_day_id.327ac0856c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_day_id\nfrom \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__field_history_scd\"\nwhere issue_day_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:50.364475Z", "completed_at": "2024-01-09T11:19:50.368400Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:50.369438Z", "completed_at": "2024-01-09T11:19:50.369444Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01019906997680664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__issue_calendar_spine_issue_day_id.c49483d2e5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_day_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__issue_calendar_spine\"\nwhere issue_day_id is not null\ngroup by issue_day_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:50.361155Z", "completed_at": "2024-01-09T11:19:50.368685Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:50.369718Z", "completed_at": "2024-01-09T11:19:50.369721Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011491775512695312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__issue_calendar_spine_issue_day_id.a9512b8e8a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_day_id\nfrom \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__issue_calendar_spine\"\nwhere issue_day_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:50.864782Z", "completed_at": "2024-01-09T11:19:50.921693Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:50.922711Z", "completed_at": "2024-01-09T11:19:50.922718Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.06163501739501953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.int_jira__issue_join", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_jira__issue_users as (\n-- just grabs user attributes for issue assignees and reporters \n\nwith issue as (\n\n    -- including issue_id in here because snowflake for some reason ignores issue_id,\n    -- so we'll just always pull it out and explicitly select it\n    \n\n    select\n        issue_id,\n        coalesce(revised_parent_issue_id, parent_issue_id) as parent_issue_id,\n\n        \"original_estimate_seconds\",\n  \"remaining_estimate_seconds\",\n  \"time_spent_seconds\",\n  \"assignee_user_id\",\n  \"created_at\",\n  \"resolved_at\",\n  \"creator_user_id\",\n  \"issue_description\",\n  \"due_date\",\n  \"environment\",\n  \"issue_type_id\",\n  \"issue_key\",\n  \"priority_id\",\n  \"project_id\",\n  \"reporter_user_id\",\n  \"resolution_id\",\n  \"status_id\",\n  \"status_changed_at\",\n  \"issue_name\",\n  \"updated_at\",\n  \"work_ratio\",\n  \"_fivetran_synced\",\n  \"issue_type\",\n  \"parent_issue_type\",\n  \"parent_issue_name\",\n  \"parent_issue_key\",\n  \"is_parent_epic\"\n\n\n    \n    from \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__issue_type_parents\"\n\n),\n\n-- user is a reserved keyword in AWS\njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__user\"\n),\n\nissue_user_join as (\n\n    select\n        issue.*,\n        assignee.user_display_name as assignee_name,\n        assignee.time_zone as assignee_timezone,\n        assignee.email as assignee_email,\n        reporter.email as reporter_email,\n        reporter.user_display_name as reporter_name,\n        reporter.time_zone as reporter_timezone\n        \n        \n    from issue\n    left join jira_user as assignee on issue.assignee_user_id = assignee.user_id \n    left join jira_user as reporter on issue.reporter_user_id = reporter.user_id\n\n)\n\nselect * \nfrom issue_user_join\n),  __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    lower(fields.field_name) as field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_sprint as (\n\n\nwith sprint as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__sprint\"\n\n),\n\nfield_history as (\n\n     -- sprints don't appear to be capable of multiselect in the UI...\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n),\n\nsprint_field_history as (\n\n    select \n        field_history.*,\n        sprint.*,\n        row_number() over (\n                    partition by field_history.issue_id \n                    order by field_history.updated_at desc, sprint.started_at desc         \n                    ) as row_num\n    from field_history\n    join sprint on field_history.field_value = cast(sprint.sprint_id as TEXT)\n    where lower(field_history.field_name) = 'sprint'\n),\n\n\nlast_sprint as (\n\n    select *\n    from sprint_field_history\n    \n    where row_num = 1\n\n), \n\nsprint_rollovers as (\n\n    select \n        issue_id,\n        count(distinct case when field_value is not null then field_value end) as count_sprint_changes\n    \n    from sprint_field_history\n    group by 1\n\n),\n\nissue_sprint as (\n\n    select \n        last_sprint.issue_id,\n        last_sprint.field_value as current_sprint_id,\n        last_sprint.sprint_name as current_sprint_name,\n        last_sprint.board_id,\n        last_sprint.started_at as sprint_started_at,\n        last_sprint.ended_at as sprint_ended_at,\n        last_sprint.completed_at as sprint_completed_at,\n        coalesce(sprint_rollovers.count_sprint_changes, 0) as count_sprint_changes\n\n    from \n    last_sprint \n    left join sprint_rollovers on sprint_rollovers.issue_id = last_sprint.issue_id\n    \n)\n\nselect * from issue_sprint\n),  __dbt__cte__int_jira__issue_comments as (\n\n\nwith comment as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__comment\"\n\n    order by issue_id, created_at asc\n\n),\n\n-- user is a reserved keyword in AWS \njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__user\"\n),\n\nagg_comments as (\n\n    select \n    comment.issue_id,\n    \n    string_agg(comment.created_at || '  -  ' || jira_user.user_display_name || ':  ' || comment.body, '\\n')\n\n as conversation,\n    count(comment.comment_id) as count_comments\n\n    from\n    comment \n    join jira_user on comment.author_user_id = jira_user.user_id\n\n    group by 1\n)\n\nselect * from agg_comments\n),  __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    lower(fields.field_name) as field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_assign_resolution as (\nwith issue_field_history as (\n    \n    select *\n    from __dbt__cte__int_jira__issue_field_history\n\n), \n\nfiltered as (\n    -- we're only looking at assignments and resolutions, which are single-field values\n    select *\n    from issue_field_history\n\n    where (lower(field_id) = 'assignee'\n    or lower(field_id) = 'resolutiondate')\n\n    and field_value is not null -- remove initial null rows\n),\n\nissue_dates as (\n\n    select\n\n        issue_id,\n        min(case when field_id = 'assignee' then updated_at end) as first_assigned_at,\n        max(case when field_id = 'assignee' then updated_at end) as last_assigned_at,\n        min(case when field_id = 'resolutiondate' then updated_at end) as first_resolved_at -- in case it's been re-opened\n\n    from filtered\n    group by 1\n)\n\nselect *\nfrom issue_dates\n),  __dbt__cte__int_jira__issue_versions as (\n\n\nwith version as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__version\"\n),\n\nversion_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n    where field_id = 'versions'\n        or field_id = 'fixVersions'\n),\n\norder_versions as (\n\n    select\n        *,\n        -- using rank so batches stick together\n        rank() over (\n            partition by field_id, issue_id\n            order by updated_at desc\n            ) as row_num\n\n    from version_history\n),\n\nlatest_versions as (\n\n    select \n        field_id,\n        issue_id,\t\n        updated_at,\n        cast(field_value as integer) as version_id\n    from order_versions\n    where row_num = 1\n),\n\nversion_info as (\n\n    select \n        latest_versions.field_id,\n        latest_versions.issue_id,\n        \n    string_agg(version.version_name, ', ')\n\n as versions\n\n    from latest_versions\n    join version on latest_versions.version_id = version.version_id\n\n    group by 1,2\n),\n\nsplit_versions as (\n\n    select \n        issue_id,\n        case when field_id = 'versions' then versions else null end as affects_versions,\n        case when field_id = 'fixVersions' then versions else null end as fixes_versions\n    from version_info\n),\n\nfinal as (\n\n    select \n        issue_id,\n        max(affects_versions) as affects_versions,\n        max(fixes_versions) as fixes_versions\n    from split_versions\n    group by 1\n)\n\nselect *\nfrom final\n), issue as (\n\n    select *\n    from __dbt__cte__int_jira__issue_users\n\n),\n\nproject as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__project\"\n),\n\nstatus as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__status\"\n),\n\nstatus_category as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__status_category\"\n),\n\nresolution as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__resolution\"\n),\n\n\npriority as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__priority\"\n),\n\n\n\nissue_sprint as (\n\n    select *\n    from __dbt__cte__int_jira__issue_sprint\n),\n\n\n\nissue_comments as (\n\n    select * \n    from __dbt__cte__int_jira__issue_comments\n),\n\n\nissue_assignments_and_resolutions as (\n  \n  select *\n  from __dbt__cte__int_jira__issue_assign_resolution\n\n),\n\n\nissue_versions as (\n\n    select *\n    from __dbt__cte__int_jira__issue_versions\n),\n\n\njoin_issue as (\n\n    select\n        issue.* \n\n        ,project.project_name as project_name\n\n        ,status.status_name as current_status\n        ,status_category.status_category_name as current_status_category   \n        ,resolution.resolution_name as resolution_type\n        \n        ,priority.priority_name as current_priority\n\t\n\n        \n        ,issue_sprint.current_sprint_id\n        ,issue_sprint.current_sprint_name\n        ,coalesce(issue_sprint.count_sprint_changes, 0) as count_sprint_changes\n        ,issue_sprint.sprint_started_at\n        ,issue_sprint.sprint_ended_at\n        ,issue_sprint.sprint_completed_at\n        ,coalesce(issue_sprint.sprint_started_at <= \n    current_timestamp::timestamp\n\n          and coalesce(issue_sprint.sprint_completed_at, \n    current_timestamp::timestamp\n) >= \n    current_timestamp::timestamp\n  \n          , false) as is_active_sprint -- If sprint doesn't have a start date, default to false. If it does have a start date, but no completed date, this means that the sprint is active. The ended_at timestamp is irrelevant here.\n        \n\n        ,issue_assignments_and_resolutions.first_assigned_at\n        ,issue_assignments_and_resolutions.last_assigned_at\n        ,issue_assignments_and_resolutions.first_resolved_at\n\n        \n        ,issue_versions.fixes_versions\n        ,issue_versions.affects_versions\n        \n\n        \n        ,issue_comments.conversation\n        ,coalesce(issue_comments.count_comments, 0) as count_comments\n        \n    \n    from issue\n    left join project on project.project_id = issue.project_id\n    left join status on status.status_id = issue.status_id\n    left join status_category on status.status_category_id = status_category.status_category_id\n    left join resolution on resolution.resolution_id = issue.resolution_id\n\t\n    left join priority on priority.priority_id = issue.priority_id\n\t\n    left join issue_assignments_and_resolutions on issue_assignments_and_resolutions.issue_id = issue.issue_id\n\n    \n    left join issue_versions on issue_versions.issue_id = issue.issue_id\n    \n    \n    \n    left join issue_sprint on issue_sprint.issue_id = issue.issue_id\n    \n\n    \n    left join issue_comments on issue_comments.issue_id = issue.issue_id\n    \n)\n\nselect * \nfrom join_issue", "relation_name": "\"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__issue_join\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:50.912291Z", "completed_at": "2024-01-09T11:19:50.923950Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:50.926010Z", "completed_at": "2024-01-09T11:19:50.926025Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.028952836990356445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__issue_users_issue_id.480b7b6beb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_jira__issue_users as (\n-- just grabs user attributes for issue assignees and reporters \n\nwith issue as (\n\n    -- including issue_id in here because snowflake for some reason ignores issue_id,\n    -- so we'll just always pull it out and explicitly select it\n    \n\n    select\n        issue_id,\n        coalesce(revised_parent_issue_id, parent_issue_id) as parent_issue_id,\n\n        \"original_estimate_seconds\",\n  \"remaining_estimate_seconds\",\n  \"time_spent_seconds\",\n  \"assignee_user_id\",\n  \"created_at\",\n  \"resolved_at\",\n  \"creator_user_id\",\n  \"issue_description\",\n  \"due_date\",\n  \"environment\",\n  \"issue_type_id\",\n  \"issue_key\",\n  \"priority_id\",\n  \"project_id\",\n  \"reporter_user_id\",\n  \"resolution_id\",\n  \"status_id\",\n  \"status_changed_at\",\n  \"issue_name\",\n  \"updated_at\",\n  \"work_ratio\",\n  \"_fivetran_synced\",\n  \"issue_type\",\n  \"parent_issue_type\",\n  \"parent_issue_name\",\n  \"parent_issue_key\",\n  \"is_parent_epic\"\n\n\n    \n    from \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__issue_type_parents\"\n\n),\n\n-- user is a reserved keyword in AWS\njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__user\"\n),\n\nissue_user_join as (\n\n    select\n        issue.*,\n        assignee.user_display_name as assignee_name,\n        assignee.time_zone as assignee_timezone,\n        assignee.email as assignee_email,\n        reporter.email as reporter_email,\n        reporter.user_display_name as reporter_name,\n        reporter.time_zone as reporter_timezone\n        \n        \n    from issue\n    left join jira_user as assignee on issue.assignee_user_id = assignee.user_id \n    left join jira_user as reporter on issue.reporter_user_id = reporter.user_id\n\n)\n\nselect * \nfrom issue_user_join\n) select issue_id\nfrom __dbt__cte__int_jira__issue_users\nwhere issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:50.917076Z", "completed_at": "2024-01-09T11:19:50.924383Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:50.926360Z", "completed_at": "2024-01-09T11:19:50.926365Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016852855682373047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__issue_users_issue_id.e3a5962431", "compiled": true, "compiled_code": "\n    \n    \n\nwith __dbt__cte__int_jira__issue_users as (\n-- just grabs user attributes for issue assignees and reporters \n\nwith issue as (\n\n    -- including issue_id in here because snowflake for some reason ignores issue_id,\n    -- so we'll just always pull it out and explicitly select it\n    \n\n    select\n        issue_id,\n        coalesce(revised_parent_issue_id, parent_issue_id) as parent_issue_id,\n\n        \"original_estimate_seconds\",\n  \"remaining_estimate_seconds\",\n  \"time_spent_seconds\",\n  \"assignee_user_id\",\n  \"created_at\",\n  \"resolved_at\",\n  \"creator_user_id\",\n  \"issue_description\",\n  \"due_date\",\n  \"environment\",\n  \"issue_type_id\",\n  \"issue_key\",\n  \"priority_id\",\n  \"project_id\",\n  \"reporter_user_id\",\n  \"resolution_id\",\n  \"status_id\",\n  \"status_changed_at\",\n  \"issue_name\",\n  \"updated_at\",\n  \"work_ratio\",\n  \"_fivetran_synced\",\n  \"issue_type\",\n  \"parent_issue_type\",\n  \"parent_issue_name\",\n  \"parent_issue_key\",\n  \"is_parent_epic\"\n\n\n    \n    from \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__issue_type_parents\"\n\n),\n\n-- user is a reserved keyword in AWS\njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__user\"\n),\n\nissue_user_join as (\n\n    select\n        issue.*,\n        assignee.user_display_name as assignee_name,\n        assignee.time_zone as assignee_timezone,\n        assignee.email as assignee_email,\n        reporter.email as reporter_email,\n        reporter.user_display_name as reporter_name,\n        reporter.time_zone as reporter_timezone\n        \n        \n    from issue\n    left join jira_user as assignee on issue.assignee_user_id = assignee.user_id \n    left join jira_user as reporter on issue.reporter_user_id = reporter.user_id\n\n)\n\nselect * \nfrom issue_user_join\n) select\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_jira__issue_users\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:50.927963Z", "completed_at": "2024-01-09T11:19:50.936179Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:50.936868Z", "completed_at": "2024-01-09T11:19:50.936873Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011811017990112305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__issue_join_issue_id.53391b21a6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_id\nfrom \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__issue_join\"\nwhere issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:50.933255Z", "completed_at": "2024-01-09T11:19:50.937653Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:50.938172Z", "completed_at": "2024-01-09T11:19:50.938175Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0059049129486083984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__issue_join_issue_id.0bd360ec4b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__issue_join\"\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:50.338347Z", "completed_at": "2024-01-09T11:19:51.331985Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:51.332702Z", "completed_at": "2024-01-09T11:19:51.332708Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.0846431255340576, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.jira__daily_issue_field_history", "compiled": true, "compiled_code": "\n\n-- grab column names that were pivoted out-- in intermediate/field_history/\nwith pivoted_daily_history as (\n\n    select\"valid_starting_on\",\n  \"issue_id\",\n  \"issue_day_id\",\n  \"status_id\",\n  \"status\",\n  \"sprint\",\n  \"summary\",\n  \"story_points\",\n  \"components\" \n    from \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__field_history_scd\"\n\n    \n    \n    where valid_starting_on >= (select max(date_day) from \"postgres\".\"jira_integrations_tests_1_jira\".\"jira__daily_issue_field_history\" )\n\n-- If no issue fields have been updated since the last incremental run, the pivoted_daily_history CTE will return no record/rows.\n-- When this is the case, we need to grab the most recent day's records from the previously built table so that we can persist \n-- those values into the future.\n\n), most_recent_data as ( \n    select \n        *\n    from \"postgres\".\"jira_integrations_tests_1_jira\".\"jira__daily_issue_field_history\"\n    where date_day = (select max(date_day) from \"postgres\".\"jira_integrations_tests_1_jira\".\"jira__daily_issue_field_history\" )\n\n\n\n), field_option as (\n    \n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__field_option\"\n),\n\nstatuses as (\n    \n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__status\"\n),\n\nissue_types as (\n    \n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__issue_type\"\n),\n\n\ncomponents as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__component\"\n),\n\n\n-- in intermediate/field_history/\ncalendar as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__issue_calendar_spine\"\n\n    \n    where date_day >= (select max(date_day) from \"postgres\".\"jira_integrations_tests_1_jira\".\"jira__daily_issue_field_history\" )\n    \n),\n\njoined as (\n\n    select\n        calendar.date_day,\n        calendar.issue_id\n\n            \n            \n                \n            \n                \n            \n                \n            \n                 \n                , coalesce(pivoted_daily_history.status_id, most_recent_data.status_id) as status_id\n\n                \n            \n                 \n                , coalesce(pivoted_daily_history.status, most_recent_data.status) as status\n\n                \n            \n                 \n                , coalesce(pivoted_daily_history.sprint, most_recent_data.sprint) as sprint\n\n                \n            \n                 \n                , coalesce(pivoted_daily_history.summary, most_recent_data.summary) as summary\n\n                \n            \n                 \n                , coalesce(pivoted_daily_history.story_points, most_recent_data.story_points) as story_points\n\n                \n            \n                \n                , coalesce(pivoted_daily_history.components, most_recent_data.components) as components\n\n                \n            \n                \n            \n                \n             \n\n        \n    \n    from calendar\n    left join pivoted_daily_history \n        on calendar.issue_id = pivoted_daily_history.issue_id\n        and calendar.date_day = pivoted_daily_history.valid_starting_on\n    \n    \n    left join most_recent_data\n        on calendar.issue_id = most_recent_data.issue_id\n        and calendar.date_day = most_recent_data.date_day\n    \n),\n\nset_values as (\n    select\n        date_day,\n        issue_id,\n        joined.status_id,\n        sum( case when joined.status_id is null then 0 else 1 end) over ( partition by issue_id\n            order by date_day rows unbounded preceding) as status_id_field_partition\n\n        -- list of exception columns\n        \n\n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n            , coalesce(field_option_sprint.field_option_name, joined.sprint) as sprint\n            -- create a batch/partition once a new value is provided\n            , sum( case when joined.sprint is null then 0 else 1 end) over ( partition by issue_id\n                order by date_day rows unbounded preceding) as sprint_field_partition\n\n            \n        \n            \n            , coalesce(field_option_summary.field_option_name, joined.summary) as summary\n            -- create a batch/partition once a new value is provided\n            , sum( case when joined.summary is null then 0 else 1 end) over ( partition by issue_id\n                order by date_day rows unbounded preceding) as summary_field_partition\n\n            \n        \n            \n            , coalesce(field_option_story_points.field_option_name, joined.story_points) as story_points\n            -- create a batch/partition once a new value is provided\n            , sum( case when joined.story_points is null then 0 else 1 end) over ( partition by issue_id\n                order by date_day rows unbounded preceding) as story_points_field_partition\n\n            \n        \n            \n            , coalesce(components.component_name, joined.components) as components\n            , sum(case when joined.components is null then 0 else 1 end) over (partition by issue_id order by date_day rows unbounded preceding) as component_field_partition\n\n            \n        \n            \n        \n            \n        \n\n    from joined\n\n    \n        \n    \n        \n    \n        \n    \n        \n    \n        \n    \n        \n        left join field_option as field_option_sprint\n            on cast(field_option_sprint.field_id as TEXT) = joined.sprint\n\n        \n    \n        \n        left join field_option as field_option_summary\n            on cast(field_option_summary.field_id as TEXT) = joined.summary\n\n        \n    \n        \n        left join field_option as field_option_story_points\n            on cast(field_option_story_points.field_id as TEXT) = joined.story_points\n\n        \n    \n        \n        left join components   \n            on cast(components.component_id as TEXT) = joined.components\n        \n        \n    \n        \n    \n        \n    \n),\n\nfill_values as (\n\n    select  \n        date_day,\n        issue_id,\n        first_value( status_id ) over (\n            partition by issue_id, status_id_field_partition \n            order by date_day asc rows between unbounded preceding and current row) as status_id\n\n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n            -- grab the value that started this batch/partition\n            , first_value( sprint ) over (\n                partition by issue_id, sprint_field_partition \n                order by date_day asc rows between unbounded preceding and current row) as sprint\n\n            \n        \n            \n            -- grab the value that started this batch/partition\n            , first_value( summary ) over (\n                partition by issue_id, summary_field_partition \n                order by date_day asc rows between unbounded preceding and current row) as summary\n\n            \n        \n            \n            -- grab the value that started this batch/partition\n            , first_value( story_points ) over (\n                partition by issue_id, story_points_field_partition \n                order by date_day asc rows between unbounded preceding and current row) as story_points\n\n            \n        \n            \n            , first_value(components) over (\n                partition by issue_id, component_field_partition \n                order by date_day asc rows between unbounded preceding and current row) as components\n\n            \n        \n            \n        \n            \n        \n\n    from set_values\n),\n\nfix_null_values as (\n\n    select  \n        date_day,\n        issue_id\n\n        \n            \n        \n            \n        \n            \n        \n            \n            -- we de-nulled the true null values earlier in order to differentiate them from nulls that just needed to be backfilled\n            , case when status_id = 'is_null' then null else status_id end as status_id\n\n            \n        \n            \n        \n            \n            -- we de-nulled the true null values earlier in order to differentiate them from nulls that just needed to be backfilled\n            , case when sprint = 'is_null' then null else sprint end as sprint\n\n            \n        \n            \n            -- we de-nulled the true null values earlier in order to differentiate them from nulls that just needed to be backfilled\n            , case when summary = 'is_null' then null else summary end as summary\n\n            \n        \n            \n            -- we de-nulled the true null values earlier in order to differentiate them from nulls that just needed to be backfilled\n            , case when story_points = 'is_null' then null else story_points end as story_points\n\n            \n        \n            \n            , case when components = 'is_null' then null else components end as components\n\n            \n        \n            \n        \n            \n        \n\n    from fill_values\n\n),\n\nsurrogate_key as (\n\n    select\n        fix_null_values.date_day,\n        fix_null_values.issue_id,\n        statuses.status_name as status\n\n        \n            \n        \n            \n        \n            \n        \n             \n            , fix_null_values.status_id as status_id\n\n            \n        \n            \n        \n             \n            , fix_null_values.sprint as sprint\n\n            \n        \n             \n            , fix_null_values.summary as summary\n\n            \n        \n             \n            , fix_null_values.story_points as story_points\n\n            \n        \n            \n            , fix_null_values.components as components\n\n            \n        \n            \n        \n            \n        \n\n        , md5(cast(coalesce(cast(date_day as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(issue_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as issue_day_id\n\n    from fix_null_values\n\n    left join statuses\n        on cast(statuses.status_id as TEXT) = fix_null_values.status_id\n)\n\nselect *\nfrom surrogate_key", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira\".\"jira__daily_issue_field_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:51.454199Z", "completed_at": "2024-01-09T11:19:51.458003Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:51.459384Z", "completed_at": "2024-01-09T11:19:51.459392Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.029227733612060547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_jira__daily_issue_field_history_issue_day_id.75c24d3154", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_day_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_1_jira\".\"jira__daily_issue_field_history\"\nwhere issue_day_id is not null\ngroup by issue_day_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:51.450091Z", "completed_at": "2024-01-09T11:19:51.458377Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:51.459678Z", "completed_at": "2024-01-09T11:19:51.459682Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03110194206237793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_jira__daily_issue_field_history_issue_day_id.d13b058bcd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_day_id\nfrom \"postgres\".\"jira_integrations_tests_1_jira\".\"jira__daily_issue_field_history\"\nwhere issue_day_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:51.432006Z", "completed_at": "2024-01-09T11:19:52.427391Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:52.429682Z", "completed_at": "2024-01-09T11:19:52.429698Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1001989841461182, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.jira__issue_enhanced", "compiled": true, "compiled_code": "with issue as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_int_jira\".\"int_jira__issue_join\"\n),daily_issue_field_history as (\n    \n    select\n        *,\n        row_number() over (partition by issue_id order by date_day desc) = 1 as latest_record\n    from \"postgres\".\"jira_integrations_tests_1_jira\".\"jira__daily_issue_field_history\"\n\n),\n\nlatest_issue_field_history as (\n    \n    select\n        *\n    from daily_issue_field_history\n    where latest_record\n),\n\nfinal as (\n\n    select \n    \n        issue.*,\n\n        \n        (\n        (\n        (\n        ((coalesce(resolved_at, \n    current_timestamp::timestamp\n))::date - (created_at)::date)\n     * 24 + date_part('hour', (coalesce(resolved_at, \n    current_timestamp::timestamp\n))::timestamp) - date_part('hour', (created_at)::timestamp))\n     * 60 + date_part('minute', (coalesce(resolved_at, \n    current_timestamp::timestamp\n))::timestamp) - date_part('minute', (created_at)::timestamp))\n     * 60 + floor(date_part('second', (coalesce(resolved_at, \n    current_timestamp::timestamp\n))::timestamp)) - floor(date_part('second', (created_at)::timestamp)))\n     open_duration_seconds,\n\n        -- this will be null if no one has been assigned\n        \n        (\n        (\n        (\n        ((coalesce(resolved_at, \n    current_timestamp::timestamp\n))::date - (first_assigned_at)::date)\n     * 24 + date_part('hour', (coalesce(resolved_at, \n    current_timestamp::timestamp\n))::timestamp) - date_part('hour', (first_assigned_at)::timestamp))\n     * 60 + date_part('minute', (coalesce(resolved_at, \n    current_timestamp::timestamp\n))::timestamp) - date_part('minute', (first_assigned_at)::timestamp))\n     * 60 + floor(date_part('second', (coalesce(resolved_at, \n    current_timestamp::timestamp\n))::timestamp)) - floor(date_part('second', (first_assigned_at)::timestamp)))\n     any_assignment_duration_seconds,\n\n        -- if an issue is not currently assigned this will not be null\n        \n        (\n        (\n        (\n        ((coalesce(resolved_at, \n    current_timestamp::timestamp\n))::date - (last_assigned_at)::date)\n     * 24 + date_part('hour', (coalesce(resolved_at, \n    current_timestamp::timestamp\n))::timestamp) - date_part('hour', (last_assigned_at)::timestamp))\n     * 60 + date_part('minute', (coalesce(resolved_at, \n    current_timestamp::timestamp\n))::timestamp) - date_part('minute', (last_assigned_at)::timestamp))\n     * 60 + floor(date_part('second', (coalesce(resolved_at, \n    current_timestamp::timestamp\n))::timestamp)) - floor(date_part('second', (last_assigned_at)::timestamp)))\n     last_assignment_duration_seconds \n\n        , status, sprint, summary, story_points, components\n\n    from issue\n    \n    left join latest_issue_field_history \n        on issue.issue_id = latest_issue_field_history.issue_id\n        \n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira\".\"jira__issue_enhanced\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:52.573584Z", "completed_at": "2024-01-09T11:19:52.599851Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:52.643340Z", "completed_at": "2024-01-09T11:19:52.643362Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08910989761352539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_jira__issue_enhanced_issue_id.fec6e723ee", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_1_jira\".\"jira__issue_enhanced\"\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:52.569825Z", "completed_at": "2024-01-09T11:19:52.611019Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:52.643780Z", "completed_at": "2024-01-09T11:19:52.643789Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.09038019180297852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_jira__issue_enhanced_issue_id.6b18e0db38", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_id\nfrom \"postgres\".\"jira_integrations_tests_1_jira\".\"jira__issue_enhanced\"\nwhere issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:52.622200Z", "completed_at": "2024-01-09T11:19:52.645816Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:52.653202Z", "completed_at": "2024-01-09T11:19:52.653210Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05782508850097656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.jira__project_enhanced", "compiled": true, "compiled_code": "with  __dbt__cte__int_jira__project_metrics as (\nwith issue as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_jira\".\"jira__issue_enhanced\"\n    where project_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        project_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_age_currently_open_seconds,\n\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_assigned_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_age_currently_open_assigned_seconds\n\n    from issue\n\n     group by project_id \n),\n\n-- grouping because the medians were calculated using window functions (except in postgres)\nmedian_metrics as (\n\n    select \n        project_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds,\n        median_assigned_close_time_seconds,\n        median_age_currently_open_assigned_seconds\n\n    from calculate_medians\n    group by 1,2,3,4,5\n),\n\n\n-- get appropriate counts + sums to calculate averages\nproject_issues as (\n    select\n        project_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        -- using the below to calculate averages\n\n        -- assigned issues\n        sum(case when resolved_at is null and assignee_user_id is not null then 1 else 0 end) as count_open_assigned_issues,\n        sum(case when resolved_at is not null and assignee_user_id is not null then 1 else 0 end) as count_closed_assigned_issues,\n\n        -- close time \n        sum(case when resolved_at is not null then open_duration_seconds else 0 end) as sum_close_time_seconds,\n        sum(case when resolved_at is not null then any_assignment_duration_seconds else 0 end) as sum_assigned_close_time_seconds,\n\n        -- age of currently open tasks\n        sum(case when resolved_at is null then open_duration_seconds else 0 end) as sum_currently_open_duration_seconds,\n        sum(case when resolved_at is null then any_assignment_duration_seconds else 0 end) as sum_currently_open_assigned_duration_seconds\n\n    from issue\n\n    group by 1\n),\n\ncalculate_avg_metrics as (\n\n    select\n        project_id,\n        count_closed_issues,\n        count_open_issues,\n        count_open_assigned_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues  as numeric(28,6) ), 0) end as avg_close_time_seconds,\n\n        case when count_closed_assigned_issues = 0 then 0 else\n        round( cast(sum_assigned_close_time_seconds * 1.0 / count_closed_assigned_issues  as numeric(28,6) ), 0) end as avg_assigned_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_currently_open_duration_seconds * 1.0 / count_open_issues as numeric(28,6) ), 0) end as avg_age_currently_open_seconds,\n\n        case when count_open_assigned_issues = 0 then 0 else\n        round( cast(sum_currently_open_assigned_duration_seconds * 1.0 / count_open_assigned_issues as numeric(28,6) ), 0) end as avg_age_currently_open_assigned_seconds\n\n    from project_issues\n),\n\n-- join medians and averages + convert to days\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n\n        -- there are 86400 seconds in a day\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_assigned_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as avg_assigned_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as avg_age_currently_open_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_assigned_seconds / 86400.0 as numeric(28,6) ), 0) as avg_age_currently_open_assigned_days,\n\n        median_metrics.median_close_time_seconds, \n        median_metrics.median_age_currently_open_seconds,\n        median_metrics.median_assigned_close_time_seconds,\n        median_metrics.median_age_currently_open_assigned_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as median_age_currently_open_days,\n        round( cast(median_metrics.median_assigned_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as median_assigned_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_assigned_seconds / 86400.0 as numeric(28,6) ), 0) as median_age_currently_open_assigned_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(project_id)\n)\n\nselect * from join_metrics\n), project as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__project\"\n),\n\nproject_metrics as (\n\n    select * \n    from __dbt__cte__int_jira__project_metrics\n),\n\n-- user is reserved in AWS\njira_user as (\n-- to grab the project lead\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__user\"\n),\n\nagg_epics as (\n\n    select \n        project_id,\n        \n    string_agg(issue_name, ', ')\n\n as epics\n\n    from \"postgres\".\"jira_integrations_tests_1_jira\".\"jira__issue_enhanced\"\n    where lower(issue_type) = 'epic'\n    -- should we limit to active epics?\n    group by 1\n\n),\n\n\n\nagg_components as (\n    -- i'm just aggregating the components here, but perhaps pivoting out components (and epics) \n    -- into columns where the values are the number of issues completed and/or open would be more valuable\n    select \n        project_id,\n        \n    string_agg(component_name, ', ')\n\n as components\n\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__component\"\n\n    group by 1\n),\n\n\n\nproject_join as (\n\n    select\n        project.*,\n        jira_user.user_display_name as project_lead_user_name,\n        jira_user.email as project_lead_email,\n        agg_epics.epics,\n        \n        \n        agg_components.components,\n        \n\n        coalesce(project_metrics.count_closed_issues, 0) as count_closed_issues,\n        coalesce(project_metrics.count_open_issues, 0) as count_open_issues,\n        coalesce(project_metrics.count_open_assigned_issues, 0) as count_open_assigned_issues,\n\n        -- days\n        project_metrics.avg_close_time_days,\n        project_metrics.avg_assigned_close_time_days,\n\n        project_metrics.avg_age_currently_open_days,\n        project_metrics.avg_age_currently_open_assigned_days,\n\n        project_metrics.median_close_time_days, \n        project_metrics.median_age_currently_open_days,\n        project_metrics.median_assigned_close_time_days,\n        project_metrics.median_age_currently_open_assigned_days,\n\n        -- seconds\n        project_metrics.avg_close_time_seconds,\n        project_metrics.avg_assigned_close_time_seconds,\n\n        project_metrics.avg_age_currently_open_seconds,\n        project_metrics.avg_age_currently_open_assigned_seconds,\n\n        project_metrics.median_close_time_seconds, \n        project_metrics.median_age_currently_open_seconds,\n        project_metrics.median_assigned_close_time_seconds,\n        project_metrics.median_age_currently_open_assigned_seconds\n\n    from project\n    left join project_metrics on project.project_id = project_metrics.project_id\n    left join jira_user on project.project_lead_user_id = jira_user.user_id\n    left join agg_epics on project.project_id = agg_epics.project_id \n    \n    \n    left join agg_components on project.project_id = agg_components.project_id \n    \n\n)\n\nselect * from project_join", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira\".\"jira__project_enhanced\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:52.646081Z", "completed_at": "2024-01-09T11:19:52.653500Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:52.669021Z", "completed_at": "2024-01-09T11:19:52.669027Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04964780807495117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__project_metrics_project_id.1542338148", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_jira__project_metrics as (\nwith issue as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_jira\".\"jira__issue_enhanced\"\n    where project_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        project_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_age_currently_open_seconds,\n\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_assigned_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_age_currently_open_assigned_seconds\n\n    from issue\n\n     group by project_id \n),\n\n-- grouping because the medians were calculated using window functions (except in postgres)\nmedian_metrics as (\n\n    select \n        project_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds,\n        median_assigned_close_time_seconds,\n        median_age_currently_open_assigned_seconds\n\n    from calculate_medians\n    group by 1,2,3,4,5\n),\n\n\n-- get appropriate counts + sums to calculate averages\nproject_issues as (\n    select\n        project_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        -- using the below to calculate averages\n\n        -- assigned issues\n        sum(case when resolved_at is null and assignee_user_id is not null then 1 else 0 end) as count_open_assigned_issues,\n        sum(case when resolved_at is not null and assignee_user_id is not null then 1 else 0 end) as count_closed_assigned_issues,\n\n        -- close time \n        sum(case when resolved_at is not null then open_duration_seconds else 0 end) as sum_close_time_seconds,\n        sum(case when resolved_at is not null then any_assignment_duration_seconds else 0 end) as sum_assigned_close_time_seconds,\n\n        -- age of currently open tasks\n        sum(case when resolved_at is null then open_duration_seconds else 0 end) as sum_currently_open_duration_seconds,\n        sum(case when resolved_at is null then any_assignment_duration_seconds else 0 end) as sum_currently_open_assigned_duration_seconds\n\n    from issue\n\n    group by 1\n),\n\ncalculate_avg_metrics as (\n\n    select\n        project_id,\n        count_closed_issues,\n        count_open_issues,\n        count_open_assigned_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues  as numeric(28,6) ), 0) end as avg_close_time_seconds,\n\n        case when count_closed_assigned_issues = 0 then 0 else\n        round( cast(sum_assigned_close_time_seconds * 1.0 / count_closed_assigned_issues  as numeric(28,6) ), 0) end as avg_assigned_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_currently_open_duration_seconds * 1.0 / count_open_issues as numeric(28,6) ), 0) end as avg_age_currently_open_seconds,\n\n        case when count_open_assigned_issues = 0 then 0 else\n        round( cast(sum_currently_open_assigned_duration_seconds * 1.0 / count_open_assigned_issues as numeric(28,6) ), 0) end as avg_age_currently_open_assigned_seconds\n\n    from project_issues\n),\n\n-- join medians and averages + convert to days\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n\n        -- there are 86400 seconds in a day\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_assigned_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as avg_assigned_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as avg_age_currently_open_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_assigned_seconds / 86400.0 as numeric(28,6) ), 0) as avg_age_currently_open_assigned_days,\n\n        median_metrics.median_close_time_seconds, \n        median_metrics.median_age_currently_open_seconds,\n        median_metrics.median_assigned_close_time_seconds,\n        median_metrics.median_age_currently_open_assigned_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as median_age_currently_open_days,\n        round( cast(median_metrics.median_assigned_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as median_assigned_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_assigned_seconds / 86400.0 as numeric(28,6) ), 0) as median_age_currently_open_assigned_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(project_id)\n)\n\nselect * from join_metrics\n) select project_id\nfrom __dbt__cte__int_jira__project_metrics\nwhere project_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:52.655210Z", "completed_at": "2024-01-09T11:19:52.669991Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:52.676647Z", "completed_at": "2024-01-09T11:19:52.676654Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.025925874710083008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__project_metrics_project_id.154ccc194e", "compiled": true, "compiled_code": "\n    \n    \n\nwith __dbt__cte__int_jira__project_metrics as (\nwith issue as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_1_jira\".\"jira__issue_enhanced\"\n    where project_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        project_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_age_currently_open_seconds,\n\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_assigned_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_age_currently_open_assigned_seconds\n\n    from issue\n\n     group by project_id \n),\n\n-- grouping because the medians were calculated using window functions (except in postgres)\nmedian_metrics as (\n\n    select \n        project_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds,\n        median_assigned_close_time_seconds,\n        median_age_currently_open_assigned_seconds\n\n    from calculate_medians\n    group by 1,2,3,4,5\n),\n\n\n-- get appropriate counts + sums to calculate averages\nproject_issues as (\n    select\n        project_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        -- using the below to calculate averages\n\n        -- assigned issues\n        sum(case when resolved_at is null and assignee_user_id is not null then 1 else 0 end) as count_open_assigned_issues,\n        sum(case when resolved_at is not null and assignee_user_id is not null then 1 else 0 end) as count_closed_assigned_issues,\n\n        -- close time \n        sum(case when resolved_at is not null then open_duration_seconds else 0 end) as sum_close_time_seconds,\n        sum(case when resolved_at is not null then any_assignment_duration_seconds else 0 end) as sum_assigned_close_time_seconds,\n\n        -- age of currently open tasks\n        sum(case when resolved_at is null then open_duration_seconds else 0 end) as sum_currently_open_duration_seconds,\n        sum(case when resolved_at is null then any_assignment_duration_seconds else 0 end) as sum_currently_open_assigned_duration_seconds\n\n    from issue\n\n    group by 1\n),\n\ncalculate_avg_metrics as (\n\n    select\n        project_id,\n        count_closed_issues,\n        count_open_issues,\n        count_open_assigned_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues  as numeric(28,6) ), 0) end as avg_close_time_seconds,\n\n        case when count_closed_assigned_issues = 0 then 0 else\n        round( cast(sum_assigned_close_time_seconds * 1.0 / count_closed_assigned_issues  as numeric(28,6) ), 0) end as avg_assigned_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_currently_open_duration_seconds * 1.0 / count_open_issues as numeric(28,6) ), 0) end as avg_age_currently_open_seconds,\n\n        case when count_open_assigned_issues = 0 then 0 else\n        round( cast(sum_currently_open_assigned_duration_seconds * 1.0 / count_open_assigned_issues as numeric(28,6) ), 0) end as avg_age_currently_open_assigned_seconds\n\n    from project_issues\n),\n\n-- join medians and averages + convert to days\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n\n        -- there are 86400 seconds in a day\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_assigned_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as avg_assigned_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as avg_age_currently_open_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_assigned_seconds / 86400.0 as numeric(28,6) ), 0) as avg_age_currently_open_assigned_days,\n\n        median_metrics.median_close_time_seconds, \n        median_metrics.median_age_currently_open_seconds,\n        median_metrics.median_assigned_close_time_seconds,\n        median_metrics.median_age_currently_open_assigned_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as median_age_currently_open_days,\n        round( cast(median_metrics.median_assigned_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as median_assigned_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_assigned_seconds / 86400.0 as numeric(28,6) ), 0) as median_age_currently_open_assigned_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(project_id)\n)\n\nselect * from join_metrics\n) select\n    project_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_jira__project_metrics\nwhere project_id is not null\ngroup by project_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:52.659290Z", "completed_at": "2024-01-09T11:19:52.671168Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:52.677589Z", "completed_at": "2024-01-09T11:19:52.677597Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02663707733154297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.jira__user_enhanced", "compiled": true, "compiled_code": "with  __dbt__cte__int_jira__user_metrics as (\nwith issue as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira\".\"jira__issue_enhanced\" \n    where assignee_user_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        assignee_user_id as user_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6)), 0) as median_close_time_seconds,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6)), 0) as median_age_currently_open_seconds\n\n    from issue\n\n     group by 1 \n),\n\n-- grouping because the medians were calculated using window functions (except postgres)\nmedian_metrics as (\n\n    select \n        user_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds\n\n    from calculate_medians\n    group by 1,2,3\n),\n\n\nuser_issues as (\n\n    select\n        assignee_user_id as user_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        sum(case when resolved_at is not null then last_assignment_duration_seconds end) as sum_close_time_seconds,\n        sum(case when resolved_at is null then last_assignment_duration_seconds end) as sum_current_open_seconds\n\n    from issue\n\n    group by 1\n\n),\n\ncalculate_avg_metrics as (\n\n    select \n        user_id,\n        count_closed_issues,\n        count_open_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues as numeric(28,6) ), 0) end as avg_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_current_open_seconds * 1.0 / count_open_issues as numeric(28,6) ), 0) end as avg_age_currently_open_seconds\n\n    from user_issues\n),\n\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as avg_age_currently_open_days,\n\n        median_metrics.median_close_time_seconds,\n        median_metrics.median_age_currently_open_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as median_age_currently_open_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(user_id)\n)\n\nselect * from join_metrics\n), jira_user as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira_source\".\"stg_jira__user\"\n),\n\nuser_metrics as (\n\n    select *\n    from __dbt__cte__int_jira__user_metrics\n),\n\nissue as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira\".\"jira__issue_enhanced\" \n),\n\nuser_project as (\n\n    select \n        assignee_user_id,\n        project_name\n\n    from issue\n    group by 1,2\n\n),\n\nagg_user_projects as (\n\n    select \n        assignee_user_id,\n        \n    string_agg(project_name, ', ')\n\n as projects\n\n    from user_project\n    group by 1\n),\n\nuser_join as (\n\n    select\n        jira_user.*,\n        agg_user_projects.projects, -- projects they've worked on issues for\n        coalesce(user_metrics.count_closed_issues, 0) as count_closed_issues,\n        coalesce(user_metrics.count_open_issues, 0) as count_open_issues,\n\n        -- days\n        user_metrics.avg_close_time_days,\n        user_metrics.avg_age_currently_open_days,\n        \n        user_metrics.median_close_time_days,\n        user_metrics.median_age_currently_open_days,\n\n        -- seconds\n        user_metrics.avg_close_time_seconds,\n        user_metrics.avg_age_currently_open_seconds,\n        \n        user_metrics.median_close_time_seconds,\n        user_metrics.median_age_currently_open_seconds\n\n    from jira_user \n    left join user_metrics on jira_user.user_id = user_metrics.user_id\n    left join agg_user_projects on jira_user.user_id = agg_user_projects.assignee_user_id\n)\n\nselect * from user_join", "relation_name": "\"postgres\".\"jira_integrations_tests_1_jira\".\"jira__user_enhanced\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:52.672207Z", "completed_at": "2024-01-09T11:19:52.678868Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:52.686694Z", "completed_at": "2024-01-09T11:19:52.686701Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.021888017654418945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__user_metrics_user_id.2143177b14", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_jira__user_metrics as (\nwith issue as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira\".\"jira__issue_enhanced\" \n    where assignee_user_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        assignee_user_id as user_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6)), 0) as median_close_time_seconds,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6)), 0) as median_age_currently_open_seconds\n\n    from issue\n\n     group by 1 \n),\n\n-- grouping because the medians were calculated using window functions (except postgres)\nmedian_metrics as (\n\n    select \n        user_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds\n\n    from calculate_medians\n    group by 1,2,3\n),\n\n\nuser_issues as (\n\n    select\n        assignee_user_id as user_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        sum(case when resolved_at is not null then last_assignment_duration_seconds end) as sum_close_time_seconds,\n        sum(case when resolved_at is null then last_assignment_duration_seconds end) as sum_current_open_seconds\n\n    from issue\n\n    group by 1\n\n),\n\ncalculate_avg_metrics as (\n\n    select \n        user_id,\n        count_closed_issues,\n        count_open_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues as numeric(28,6) ), 0) end as avg_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_current_open_seconds * 1.0 / count_open_issues as numeric(28,6) ), 0) end as avg_age_currently_open_seconds\n\n    from user_issues\n),\n\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as avg_age_currently_open_days,\n\n        median_metrics.median_close_time_seconds,\n        median_metrics.median_age_currently_open_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as median_age_currently_open_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(user_id)\n)\n\nselect * from join_metrics\n) select user_id\nfrom __dbt__cte__int_jira__user_metrics\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:52.680131Z", "completed_at": "2024-01-09T11:19:52.690832Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:52.702345Z", "completed_at": "2024-01-09T11:19:52.702357Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.026973962783813477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__user_metrics_user_id.c042bcdd66", "compiled": true, "compiled_code": "\n    \n    \n\nwith __dbt__cte__int_jira__user_metrics as (\nwith issue as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_1_jira\".\"jira__issue_enhanced\" \n    where assignee_user_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        assignee_user_id as user_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6)), 0) as median_close_time_seconds,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6)), 0) as median_age_currently_open_seconds\n\n    from issue\n\n     group by 1 \n),\n\n-- grouping because the medians were calculated using window functions (except postgres)\nmedian_metrics as (\n\n    select \n        user_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds\n\n    from calculate_medians\n    group by 1,2,3\n),\n\n\nuser_issues as (\n\n    select\n        assignee_user_id as user_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        sum(case when resolved_at is not null then last_assignment_duration_seconds end) as sum_close_time_seconds,\n        sum(case when resolved_at is null then last_assignment_duration_seconds end) as sum_current_open_seconds\n\n    from issue\n\n    group by 1\n\n),\n\ncalculate_avg_metrics as (\n\n    select \n        user_id,\n        count_closed_issues,\n        count_open_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues as numeric(28,6) ), 0) end as avg_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_current_open_seconds * 1.0 / count_open_issues as numeric(28,6) ), 0) end as avg_age_currently_open_seconds\n\n    from user_issues\n),\n\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as avg_age_currently_open_days,\n\n        median_metrics.median_close_time_seconds,\n        median_metrics.median_age_currently_open_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as median_age_currently_open_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(user_id)\n)\n\nselect * from join_metrics\n) select\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_jira__user_metrics\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:52.692041Z", "completed_at": "2024-01-09T11:19:52.703334Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:52.709025Z", "completed_at": "2024-01-09T11:19:52.709032Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.024543046951293945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_jira__project_enhanced_project_id.4f7c58f1d4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect project_id\nfrom \"postgres\".\"jira_integrations_tests_1_jira\".\"jira__project_enhanced\"\nwhere project_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:52.698135Z", "completed_at": "2024-01-09T11:19:52.704747Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:52.709991Z", "completed_at": "2024-01-09T11:19:52.709997Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.024959087371826172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_jira__project_enhanced_project_id.c18e39faef", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    project_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_1_jira\".\"jira__project_enhanced\"\nwhere project_id is not null\ngroup by project_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:52.705614Z", "completed_at": "2024-01-09T11:19:52.711371Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:52.716382Z", "completed_at": "2024-01-09T11:19:52.716389Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014252901077270508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_jira__user_enhanced_user_id.aecc00744a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom \"postgres\".\"jira_integrations_tests_1_jira\".\"jira__user_enhanced\"\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T11:19:52.712700Z", "completed_at": "2024-01-09T11:19:52.717461Z"}, {"name": "execute", "started_at": "2024-01-09T11:19:52.718290Z", "completed_at": "2024-01-09T11:19:52.718297Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00951075553894043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_jira__user_enhanced_user_id.c9ee73454a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_1_jira\".\"jira__user_enhanced\"\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "relation_name": null}], "elapsed_time": 10.865329027175903, "args": {"log_format_file": "debug", "favor_state": false, "write_json": true, "compile": true, "show_resource_report": false, "cache_selected_only": false, "defer": false, "log_file_max_bytes": 10485760, "enable_legacy_logger": false, "log_format": "default", "log_path": "/Users/avinash.kunnath/Documents/dbt_packages/jira/dbt_jira/integration_tests/logs", "macro_debugging": false, "version_check": true, "send_anonymous_usage_stats": true, "populate_cache": true, "use_colors_file": true, "introspect": true, "target": "postgres", "log_level_file": "debug", "log_level": "info", "print": true, "exclude": [], "quiet": false, "indirect_selection": "eager", "vars": {}, "empty_catalog": false, "partial_parse_file_diff": true, "static_parser": true, "project_dir": "/Users/avinash.kunnath/Documents/dbt_packages/jira/dbt_jira/integration_tests", "use_colors": true, "select": [], "profiles_dir": "/Users/avinash.kunnath/.dbt", "warn_error_options": {"include": [], "exclude": []}, "printer_width": 80, "strict_mode": false, "which": "generate", "invocation_command": "dbt docs generate -t postgres", "static": false, "partial_parse": true}}