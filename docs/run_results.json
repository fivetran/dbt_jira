{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.4", "generated_at": "2024-01-09T21:53:36.943490Z", "invocation_id": "0ab81f73-a559-42c8-9204-f4a5d200b4c8", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.365867Z", "completed_at": "2024-01-09T21:53:29.378468Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.380765Z", "completed_at": "2024-01-09T21:53:29.380785Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.033087968826293945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__comment_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_2\".\"comment\"", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__comment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.373489Z", "completed_at": "2024-01-09T21:53:29.378926Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.381197Z", "completed_at": "2024-01-09T21:53:29.381202Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03192496299743652, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__field_option_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_2\".\"field_option\"", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__field_option_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.369642Z", "completed_at": "2024-01-09T21:53:29.379345Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.381582Z", "completed_at": "2024-01-09T21:53:29.381588Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03346610069274902, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__component_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"jira_integrations_tests_2\".\"component\"", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__component_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.390711Z", "completed_at": "2024-01-09T21:53:29.397645Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.399421Z", "completed_at": "2024-01-09T21:53:29.399428Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.014919042587280273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue_field_history_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_2\".\"issue_field_history\"", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_field_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.394382Z", "completed_at": "2024-01-09T21:53:29.398025Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.399727Z", "completed_at": "2024-01-09T21:53:29.399731Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015166759490966797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue_link_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_2\".\"issue_link\"", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_link_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.387618Z", "completed_at": "2024-01-09T21:53:29.398332Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.400254Z", "completed_at": "2024-01-09T21:53:29.400260Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.016783952713012695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__field_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_2\".\"field\"", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__field_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.405591Z", "completed_at": "2024-01-09T21:53:29.413641Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.414596Z", "completed_at": "2024-01-09T21:53:29.414602Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011942148208618164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue_multiselect_history_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_2\".\"issue_multiselect_history\"", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_multiselect_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.408586Z", "completed_at": "2024-01-09T21:53:29.414303Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.415897Z", "completed_at": "2024-01-09T21:53:29.415900Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012797832489013672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_2\".\"issue\"", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.411020Z", "completed_at": "2024-01-09T21:53:29.415104Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.417167Z", "completed_at": "2024-01-09T21:53:29.417171Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.013810873031616211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue_type_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_2\".\"issue_type\"", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_type_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.419593Z", "completed_at": "2024-01-09T21:53:29.428243Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.429029Z", "completed_at": "2024-01-09T21:53:29.429034Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012457132339477539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__priority_tmp", "compiled": true, "compiled_code": "\n\nselect * from \"postgres\".\"jira_integrations_tests_2\".\"priority\"", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__priority_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.423724Z", "completed_at": "2024-01-09T21:53:29.428777Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.430367Z", "completed_at": "2024-01-09T21:53:29.430371Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012372016906738281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__project_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_2\".\"project\"", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__project_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.426176Z", "completed_at": "2024-01-09T21:53:29.429254Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.430884Z", "completed_at": "2024-01-09T21:53:29.430887Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008771181106567383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__resolution_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_2\".\"resolution\"", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__resolution_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.433509Z", "completed_at": "2024-01-09T21:53:29.440930Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.441549Z", "completed_at": "2024-01-09T21:53:29.441554Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011165142059326172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__sprint_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"jira_integrations_tests_2\".\"sprint\"", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__sprint_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.436967Z", "completed_at": "2024-01-09T21:53:29.442005Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.443774Z", "completed_at": "2024-01-09T21:53:29.443777Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011567115783691406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__status_category_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_2\".\"status_category\"", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__status_category_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.439029Z", "completed_at": "2024-01-09T21:53:29.442267Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.444012Z", "completed_at": "2024-01-09T21:53:29.444016Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00904083251953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__status_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_2\".\"status\"", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__status_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.446197Z", "completed_at": "2024-01-09T21:53:29.452682Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.454634Z", "completed_at": "2024-01-09T21:53:29.454640Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011239290237426758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__user_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_2\".\"user\"", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__user_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.452906Z", "completed_at": "2024-01-09T21:53:29.453888Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.455084Z", "completed_at": "2024-01-09T21:53:29.455087Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006554126739501953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.comment", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.450436Z", "completed_at": "2024-01-09T21:53:29.454856Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.456633Z", "completed_at": "2024-01-09T21:53:29.456636Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008451223373413086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__version_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"jira_integrations_tests_2\".\"version\"", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__version_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.458965Z", "completed_at": "2024-01-09T21:53:29.459981Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.462315Z", "completed_at": "2024-01-09T21:53:29.462319Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.00691986083984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.component", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.460573Z", "completed_at": "2024-01-09T21:53:29.461490Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.463625Z", "completed_at": "2024-01-09T21:53:29.463628Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006755828857421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.epic", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.462539Z", "completed_at": "2024-01-09T21:53:29.463390Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.465179Z", "completed_at": "2024-01-09T21:53:29.465182Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005878925323486328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.field", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.468209Z", "completed_at": "2024-01-09T21:53:29.469165Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.471528Z", "completed_at": "2024-01-09T21:53:29.471532Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007570981979370117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.field_option", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.469844Z", "completed_at": "2024-01-09T21:53:29.470724Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.472823Z", "completed_at": "2024-01-09T21:53:29.472826Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007414102554321289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.issue", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.471747Z", "completed_at": "2024-01-09T21:53:29.472596Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.474266Z", "completed_at": "2024-01-09T21:53:29.474269Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.005773067474365234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.issue_field_history", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.476531Z", "completed_at": "2024-01-09T21:53:29.477549Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.480103Z", "completed_at": "2024-01-09T21:53:29.480108Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008437871932983398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.issue_link", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.478107Z", "completed_at": "2024-01-09T21:53:29.478986Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.482715Z", "completed_at": "2024-01-09T21:53:29.482719Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008456945419311523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.issue_multiselect_history", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.480362Z", "completed_at": "2024-01-09T21:53:29.482362Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.484826Z", "completed_at": "2024-01-09T21:53:29.484830Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.00819087028503418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.issue_type", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.487596Z", "completed_at": "2024-01-09T21:53:29.488756Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.491075Z", "completed_at": "2024-01-09T21:53:29.491080Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0077970027923583984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.priority", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.489389Z", "completed_at": "2024-01-09T21:53:29.490266Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.492623Z", "completed_at": "2024-01-09T21:53:29.492627Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008771896362304688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.project", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.491308Z", "completed_at": "2024-01-09T21:53:29.492299Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.495885Z", "completed_at": "2024-01-09T21:53:29.495894Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008139610290527344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.project_board", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.498512Z", "completed_at": "2024-01-09T21:53:29.499489Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.501919Z", "completed_at": "2024-01-09T21:53:29.501924Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008430242538452148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.project_category", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.500119Z", "completed_at": "2024-01-09T21:53:29.501061Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.504620Z", "completed_at": "2024-01-09T21:53:29.504624Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008211135864257812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.resolution", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.502237Z", "completed_at": "2024-01-09T21:53:29.504280Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.506134Z", "completed_at": "2024-01-09T21:53:29.506137Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.007355928421020508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.sprint", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.508368Z", "completed_at": "2024-01-09T21:53:29.509505Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.511969Z", "completed_at": "2024-01-09T21:53:29.511973Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007025003433227539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.status", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.510261Z", "completed_at": "2024-01-09T21:53:29.511143Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.513250Z", "completed_at": "2024-01-09T21:53:29.513253Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006841182708740234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.status_category", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.512191Z", "completed_at": "2024-01-09T21:53:29.513027Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.514747Z", "completed_at": "2024-01-09T21:53:29.514750Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0058269500732421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.user", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.516873Z", "completed_at": "2024-01-09T21:53:29.517805Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.519973Z", "completed_at": "2024-01-09T21:53:29.519976Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011407852172851562, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.user_group", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.518358Z", "completed_at": "2024-01-09T21:53:29.519211Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:29.526222Z", "completed_at": "2024-01-09T21:53:29.526226Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011276006698608398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.version", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.520185Z", "completed_at": "2024-01-09T21:53:30.386612Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:30.388214Z", "completed_at": "2024-01-09T21:53:30.388222Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.9537279605865479, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__comment", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__comment_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    author_id\n    \n as \n    \n    author_id\n    \n, \n    \n    \n    body\n    \n as \n    \n    body\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_public\n    \n as \n    \n    is_public\n    \n, \n    \n    \n    issue_id\n    \n as \n    \n    issue_id\n    \n, \n    \n    \n    update_author_id\n    \n as \n    \n    update_author_id\n    \n, \n    \n    \n    updated\n    \n as \n    \n    updated\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        author_id as author_user_id,\n        body,\n        cast(created as timestamp) as created_at,\n        id as comment_id,\n        issue_id,\n        is_public,\n        update_author_id as last_update_user_id,\n        cast(updated as timestamp) as last_updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__comment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.533511Z", "completed_at": "2024-01-09T21:53:30.386971Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:30.388802Z", "completed_at": "2024-01-09T21:53:30.388805Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.9543700218200684, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__component", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__component_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    project_id\n    \n as \n    \n    project_id\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        description as component_description,\n        id as component_id,\n        name as component_name,\n        project_id,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__component\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:29.529545Z", "completed_at": "2024-01-09T21:53:30.387605Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:30.389385Z", "completed_at": "2024-01-09T21:53:30.389388Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.9556729793548584, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__field_option", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__field_option_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    cast(null as integer) as \n    \n    parent_id\n    \n , \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as field_id,\n        parent_id as parent_field_id,\n        name as field_option_name\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__field_option\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:30.423254Z", "completed_at": "2024-01-09T21:53:31.254411Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:31.255974Z", "completed_at": "2024-01-09T21:53:31.255987Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.9275846481323242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue_field_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_field_history_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    field_id\n    \n as \n    \n    field_id\n    \n, \n    \n    \n    issue_id\n    \n as \n    \n    issue_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n, \n    \n    \n    time\n    \n as \n    \n    time\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(field_id as TEXT) as field_id,\n        issue_id,\n        cast(time as timestamp)\n         as updated_at,\n        value as field_value,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_field_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:30.474070Z", "completed_at": "2024-01-09T21:53:31.305986Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:31.307542Z", "completed_at": "2024-01-09T21:53:31.307559Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.9253718852996826, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue_link", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_link_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    issue_id\n    \n as \n    \n    issue_id\n    \n, \n    \n    \n    related_issue_id\n    \n as \n    \n    related_issue_id\n    \n, \n    \n    \n    relationship\n    \n as \n    \n    relationship\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        issue_id,\n        related_issue_id,\n        relationship,\n        _fivetran_synced \n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_link\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:30.487002Z", "completed_at": "2024-01-09T21:53:31.350582Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:31.353556Z", "completed_at": "2024-01-09T21:53:31.353564Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.959007978439331, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__field", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__field_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_array\n    \n as \n    \n    is_array\n    \n, \n    \n    \n    is_custom\n    \n as \n    \n    is_custom\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as field_id,\n        is_array,\n        is_custom,\n        name as field_name,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__field\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:30.492325Z", "completed_at": "2024-01-09T21:53:31.351011Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:31.354014Z", "completed_at": "2024-01-09T21:53:31.354019Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.9694831371307373, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue_multiselect_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_multiselect_history_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    field_id\n    \n as \n    \n    field_id\n    \n, \n    \n    \n    issue_id\n    \n as \n    \n    issue_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n, \n    \n    \n    time\n    \n as \n    \n    time\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        cast(field_id as TEXT) as field_id,\n        issue_id,\n        \n        cast(time as timestamp)\n         as updated_at,\n        value as field_value,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_multiselect_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:31.402141Z", "completed_at": "2024-01-09T21:53:32.212193Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:32.213621Z", "completed_at": "2024-01-09T21:53:32.213626Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.900101900100708, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue_type", "compiled": true, "compiled_code": "with base as (\n\n    select * from \n    \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_type_tmp\"\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    subtask\n    \n as \n    \n    subtask\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        description,\n        id as issue_type_id,\n        name as issue_type_name,\n        subtask as is_subtask,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_type\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:31.355563Z", "completed_at": "2024-01-09T21:53:32.211279Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:32.212562Z", "completed_at": "2024-01-09T21:53:32.212576Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.9547841548919678, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue", "compiled": true, "compiled_code": "with base as (\n    \n    select * \n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_tmp\"\n    where not coalesce(_fivetran_deleted, false)\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _original_estimate\n    \n as \n    \n    _original_estimate\n    \n, \n    \n    \n    _remaining_estimate\n    \n as \n    \n    _remaining_estimate\n    \n, \n    \n    \n    _time_spent\n    \n as \n    \n    _time_spent\n    \n, \n    \n    \n    assignee\n    \n as \n    \n    assignee\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    creator\n    \n as \n    \n    creator\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    environment\n    \n as \n    \n    environment\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    issue_type\n    \n as \n    \n    issue_type\n    \n, \n    \n    \n    key\n    \n as \n    \n    key\n    \n, \n    \n    \n    original_estimate\n    \n as \n    \n    original_estimate\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n, \n    \n    \n    priority\n    \n as \n    \n    priority\n    \n, \n    \n    \n    project\n    \n as \n    \n    project\n    \n, \n    \n    \n    remaining_estimate\n    \n as \n    \n    remaining_estimate\n    \n, \n    \n    \n    reporter\n    \n as \n    \n    reporter\n    \n, \n    \n    \n    resolution\n    \n as \n    \n    resolution\n    \n, \n    \n    \n    resolved\n    \n as \n    \n    resolved\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    status_category_changed\n    \n as \n    \n    status_category_changed\n    \n, \n    \n    \n    summary\n    \n as \n    \n    summary\n    \n, \n    \n    \n    time_spent\n    \n as \n    \n    time_spent\n    \n, \n    \n    \n    updated\n    \n as \n    \n    updated\n    \n, \n    \n    \n    work_ratio\n    \n as \n    \n    work_ratio\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        coalesce(original_estimate, _original_estimate) as original_estimate_seconds,\n        coalesce(remaining_estimate, _remaining_estimate) as remaining_estimate_seconds,\n        coalesce(time_spent, _time_spent) as time_spent_seconds,\n        assignee as assignee_user_id,\n        cast(created as timestamp) as created_at,\n        cast(resolved  as timestamp) as resolved_at,\n        creator as creator_user_id,\n        description as issue_description,\n        due_date,\n        environment,\n        id as issue_id,\n        issue_type as issue_type_id,\n        key as issue_key,\n        parent_id as parent_issue_id,\n        priority as priority_id,\n        project as project_id,\n        reporter as reporter_user_id,\n        resolution as resolution_id,\n        status as status_id,\n        cast(status_category_changed as timestamp) as status_changed_at,\n        summary as issue_name,\n        cast(updated as timestamp) as updated_at,\n        work_ratio,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:31.457414Z", "completed_at": "2024-01-09T21:53:32.318806Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:32.327235Z", "completed_at": "2024-01-09T21:53:32.327243Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.9582836627960205, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__project", "compiled": true, "compiled_code": "with base as (\n    \n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__project_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    key\n    \n as \n    \n    key\n    \n, \n    \n    \n    lead_id\n    \n as \n    \n    lead_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    permission_scheme_id\n    \n as \n    \n    permission_scheme_id\n    \n, \n    \n    \n    project_category_id\n    \n as \n    \n    project_category_id\n    \n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select \n        description as project_description,\n        id as project_id,\n        key as project_key,\n        lead_id as project_lead_user_id,\n        name as project_name,\n        project_category_id,\n        permission_scheme_id,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__project\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:31.447110Z", "completed_at": "2024-01-09T21:53:32.319870Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:32.327987Z", "completed_at": "2024-01-09T21:53:32.327992Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.9751837253570557, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__priority", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__priority_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        description as priority_description,\n        id as priority_id,\n        name as priority_name,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__priority\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:32.320569Z", "completed_at": "2024-01-09T21:53:33.142548Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.143913Z", "completed_at": "2024-01-09T21:53:33.143917Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.9146690368652344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__sprint", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__sprint_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    board_id\n    \n as \n    \n    board_id\n    \n, \n    \n    \n    complete_date\n    \n as \n    \n    complete_date\n    \n, \n    \n    \n    end_date\n    \n as \n    \n    end_date\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    start_date\n    \n as \n    \n    start_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as sprint_id,\n        name as sprint_name,\n        board_id,\n        cast(complete_date as timestamp) as completed_at,\n        cast(end_date as timestamp) as ended_at,\n        cast(start_date as timestamp) as started_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__sprint\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:32.308971Z", "completed_at": "2024-01-09T21:53:33.141854Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.142854Z", "completed_at": "2024-01-09T21:53:33.142861Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.9339489936828613, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__resolution", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__resolution_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        description as resolution_description,\n        id as resolution_id,\n        name as resolution_name,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__resolution\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:32.433785Z", "completed_at": "2024-01-09T21:53:33.265920Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.267287Z", "completed_at": "2024-01-09T21:53:33.267291Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.9219388961791992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__status", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__status_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    status_category_id\n    \n as \n    \n    status_category_id\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        description as status_description,\n        id as status_id,\n        name as status_name,\n        status_category_id,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__status\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:32.421566Z", "completed_at": "2024-01-09T21:53:33.265546Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.266899Z", "completed_at": "2024-01-09T21:53:33.266907Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.9366841316223145, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__status_category", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__status_category_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as status_category_id,\n        name as status_category_name\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__status_category\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.374383Z", "completed_at": "2024-01-09T21:53:33.380823Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.382286Z", "completed_at": "2024-01-09T21:53:33.382293Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02530503273010254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__comment_comment_id.004104fac5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    comment_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__comment\"\nwhere comment_id is not null\ngroup by comment_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.359792Z", "completed_at": "2024-01-09T21:53:33.381256Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.382665Z", "completed_at": "2024-01-09T21:53:33.382671Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.026861190795898438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__comment_comment_id.5dec28a22a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect comment_id\nfrom \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__comment\"\nwhere comment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.386851Z", "completed_at": "2024-01-09T21:53:33.393962Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.395015Z", "completed_at": "2024-01-09T21:53:33.395020Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01055908203125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__component_component_id.2f017ad5ad", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect component_id\nfrom \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__component\"\nwhere component_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.390468Z", "completed_at": "2024-01-09T21:53:33.394257Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.395296Z", "completed_at": "2024-01-09T21:53:33.395299Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010512828826904297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__field_option_field_id.1b1f37b358", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect field_id\nfrom \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__field_option\"\nwhere field_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.398646Z", "completed_at": "2024-01-09T21:53:33.409083Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.410114Z", "completed_at": "2024-01-09T21:53:33.410119Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013484001159667969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__component_component_id.1773ebe913", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    component_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__component\"\nwhere component_id is not null\ngroup by component_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.401677Z", "completed_at": "2024-01-09T21:53:33.409357Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.410368Z", "completed_at": "2024-01-09T21:53:33.410371Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01351022720336914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.dbt_utils_unique_combination_of_columns_stg_jira__issue_field_history_field_id__issue_id__updated_at.c01ecbb82c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        field_id, issue_id, updated_at\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_field_history\"\n    group by field_id, issue_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.415767Z", "completed_at": "2024-01-09T21:53:33.419184Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.420236Z", "completed_at": "2024-01-09T21:53:33.420239Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008383035659790039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__field_field_id.34424f1c2b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect field_id\nfrom \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__field\"\nwhere field_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.421063Z", "completed_at": "2024-01-09T21:53:33.426639Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.427086Z", "completed_at": "2024-01-09T21:53:33.427090Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007587909698486328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__field_field_id.df7b462fff", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    field_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__field\"\nwhere field_id is not null\ngroup by field_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.429485Z", "completed_at": "2024-01-09T21:53:33.436047Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.436551Z", "completed_at": "2024-01-09T21:53:33.436556Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008985042572021484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.dbt_utils_unique_combination_of_columns_stg_jira__issue_multiselect_history__fivetran_id__updated_at.4dd2d1c5a8", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _fivetran_id, updated_at\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_multiselect_history\"\n    group by _fivetran_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.433454Z", "completed_at": "2024-01-09T21:53:33.436780Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.437983Z", "completed_at": "2024-01-09T21:53:33.437986Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005903005599975586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__issue_type_issue_type_id.57419fc343", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_type_id\nfrom \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_type\"\nwhere issue_type_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.439409Z", "completed_at": "2024-01-09T21:53:33.444808Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.445279Z", "completed_at": "2024-01-09T21:53:33.445283Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0076808929443359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__issue_type_issue_type_id.a89d34aa41", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_type_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_type\"\nwhere issue_type_id is not null\ngroup by issue_type_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.442404Z", "completed_at": "2024-01-09T21:53:33.445485Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.446621Z", "completed_at": "2024-01-09T21:53:33.446624Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005541801452636719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__issue_issue_id.13a4fbe132", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_id\nfrom \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue\"\nwhere issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.448056Z", "completed_at": "2024-01-09T21:53:33.454211Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.454669Z", "completed_at": "2024-01-09T21:53:33.454673Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008420705795288086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__issue_issue_id.7bb0ee7230", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue\"\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.451044Z", "completed_at": "2024-01-09T21:53:33.454871Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.455994Z", "completed_at": "2024-01-09T21:53:33.455997Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.006258249282836914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__project_project_id.996fe19522", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect project_id\nfrom \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__project\"\nwhere project_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.457404Z", "completed_at": "2024-01-09T21:53:33.462678Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.463148Z", "completed_at": "2024-01-09T21:53:33.463153Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007339000701904297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__project_project_id.58d321d374", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    project_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__project\"\nwhere project_id is not null\ngroup by project_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.460332Z", "completed_at": "2024-01-09T21:53:33.464020Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.465003Z", "completed_at": "2024-01-09T21:53:33.465006Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007993698120117188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__priority_priority_id.ec0c873363", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect priority_id\nfrom \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__priority\"\nwhere priority_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.465222Z", "completed_at": "2024-01-09T21:53:33.468940Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.471695Z", "completed_at": "2024-01-09T21:53:33.471698Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0078029632568359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__priority_priority_id.79b77ea5d2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    priority_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__priority\"\nwhere priority_id is not null\ngroup by priority_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.469175Z", "completed_at": "2024-01-09T21:53:33.475439Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.475889Z", "completed_at": "2024-01-09T21:53:33.475892Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00794219970703125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__sprint_sprint_id.899b4b77d7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sprint_id\nfrom \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__sprint\"\nwhere sprint_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.473102Z", "completed_at": "2024-01-09T21:53:33.476538Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.477507Z", "completed_at": "2024-01-09T21:53:33.477511Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.005510807037353516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__sprint_sprint_id.8a73555fed", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    sprint_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__sprint\"\nwhere sprint_id is not null\ngroup by sprint_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.478343Z", "completed_at": "2024-01-09T21:53:33.484595Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.485035Z", "completed_at": "2024-01-09T21:53:33.485039Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.00822591781616211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__resolution_resolution_id.1c04bac8a4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect resolution_id\nfrom \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__resolution\"\nwhere resolution_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.482277Z", "completed_at": "2024-01-09T21:53:33.485870Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.486871Z", "completed_at": "2024-01-09T21:53:33.486874Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007892847061157227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__resolution_resolution_id.b3acb37c87", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    resolution_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__resolution\"\nwhere resolution_id is not null\ngroup by resolution_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.487108Z", "completed_at": "2024-01-09T21:53:33.493041Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.493511Z", "completed_at": "2024-01-09T21:53:33.493515Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007760047912597656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__status_status_id.b32a8a0d84", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect status_id\nfrom \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__status\"\nwhere status_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.490733Z", "completed_at": "2024-01-09T21:53:33.494357Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.495342Z", "completed_at": "2024-01-09T21:53:33.495345Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007963895797729492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__status_status_id.0449241b95", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    status_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__status\"\nwhere status_id is not null\ngroup by status_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.495566Z", "completed_at": "2024-01-09T21:53:33.502407Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.502876Z", "completed_at": "2024-01-09T21:53:33.502880Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008642196655273438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__status_category_status_category_id.7a89cdfcf0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect status_category_id\nfrom \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__status_category\"\nwhere status_category_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.499319Z", "completed_at": "2024-01-09T21:53:33.503719Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.504709Z", "completed_at": "2024-01-09T21:53:33.504712Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011491060256958008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__status_category_status_category_id.99c869330a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    status_category_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__status_category\"\nwhere status_category_id is not null\ngroup by status_category_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.517669Z", "completed_at": "2024-01-09T21:53:33.522238Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.523268Z", "completed_at": "2024-01-09T21:53:33.523271Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.058226823806762695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_field_history_field_id__issue_id__updated_at.34d1b3eaa1", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    lower(fields.field_name) as field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n), validation_errors as (\n\n    select\n        field_id, issue_id, updated_at\n    from __dbt__cte__int_jira__issue_field_history\n    group by field_id, issue_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.523492Z", "completed_at": "2024-01-09T21:53:33.588565Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.589069Z", "completed_at": "2024-01-09T21:53:33.589075Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.06696891784667969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.int_jira__agg_multiselect_history", "compiled": true, "compiled_code": "\n\n-- issue_multiselect_history splits out an array-type field into multiple rows with unique individual values\n-- to combine with issue_field_history we need to aggregate the multiselect field values.\n\nwith  __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    lower(fields.field_name) as field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n), issue_multiselect_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n    \n    -- always refresh the most recent day of data\n    where cast(updated_at as date) >= \n\n    (select max(date_day) from \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__agg_multiselect_history\") + ((interval '1 day') * (-1))\n\n\n    \n\n),\n\n-- each field value has its own row, but each batch of values for that field has the same timestamp\nbatch_updates as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(field_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(issue_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(updated_at as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as batch_id\n\n    from issue_multiselect_history \n),\n\nconsolidate_batches as (\n\n    select \n        field_id,\n        field_name,\n        issue_id,\n        updated_at,\n        batch_id,\n        cast( date_trunc('day', updated_at) as date) as date_day,\n\n        -- if the field refers to an object captured in a table elsewhere (ie sprint, users, field_option for custom fields),\n        -- the value is actually a foreign key to that table. \n        \n    string_agg(batch_updates.field_value, ', ')\n\n as field_values \n\n    from batch_updates\n\n    group by 1,2,3,4,5,6\n)\n\nselect *\nfrom consolidate_batches", "relation_name": "\"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__agg_multiselect_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.590576Z", "completed_at": "2024-01-09T21:53:33.594585Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.595792Z", "completed_at": "2024-01-09T21:53:33.595795Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.006525993347167969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_multiselect_history__fivetran_id__updated_at.aad394167d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    lower(fields.field_name) as field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n), validation_errors as (\n\n    select\n        _fivetran_id, updated_at\n    from __dbt__cte__int_jira__issue_multiselect_history\n    group by _fivetran_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.597269Z", "completed_at": "2024-01-09T21:53:33.605374Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.605889Z", "completed_at": "2024-01-09T21:53:33.605895Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010464191436767578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__issue_assign_resolution_issue_id.b3af89c733", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    lower(fields.field_name) as field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_assign_resolution as (\nwith issue_field_history as (\n    \n    select *\n    from __dbt__cte__int_jira__issue_field_history\n\n), \n\nfiltered as (\n    -- we're only looking at assignments and resolutions, which are single-field values\n    select *\n    from issue_field_history\n\n    where (lower(field_id) = 'assignee'\n    or lower(field_id) = 'resolutiondate')\n\n    and field_value is not null -- remove initial null rows\n),\n\nissue_dates as (\n\n    select\n\n        issue_id,\n        min(case when field_id = 'assignee' then updated_at end) as first_assigned_at,\n        max(case when field_id = 'assignee' then updated_at end) as last_assigned_at,\n        min(case when field_id = 'resolutiondate' then updated_at end) as first_resolved_at -- in case it's been re-opened\n\n    from filtered\n    group by 1\n)\n\nselect *\nfrom issue_dates\n) select issue_id\nfrom __dbt__cte__int_jira__issue_assign_resolution\nwhere issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.600891Z", "completed_at": "2024-01-09T21:53:33.606104Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.607240Z", "completed_at": "2024-01-09T21:53:33.607243Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007712125778198242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__issue_assign_resolution_issue_id.f41f7c00ab", "compiled": true, "compiled_code": "\n    \n    \n\nwith __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    lower(fields.field_name) as field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_assign_resolution as (\nwith issue_field_history as (\n    \n    select *\n    from __dbt__cte__int_jira__issue_field_history\n\n), \n\nfiltered as (\n    -- we're only looking at assignments and resolutions, which are single-field values\n    select *\n    from issue_field_history\n\n    where (lower(field_id) = 'assignee'\n    or lower(field_id) = 'resolutiondate')\n\n    and field_value is not null -- remove initial null rows\n),\n\nissue_dates as (\n\n    select\n\n        issue_id,\n        min(case when field_id = 'assignee' then updated_at end) as first_assigned_at,\n        max(case when field_id = 'assignee' then updated_at end) as last_assigned_at,\n        min(case when field_id = 'resolutiondate' then updated_at end) as first_resolved_at -- in case it's been re-opened\n\n    from filtered\n    group by 1\n)\n\nselect *\nfrom issue_dates\n) select\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_jira__issue_assign_resolution\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.608660Z", "completed_at": "2024-01-09T21:53:33.620721Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.621138Z", "completed_at": "2024-01-09T21:53:33.621142Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014040946960449219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.int_jira__issue_type_parents", "compiled": true, "compiled_code": "\n-- needs to be a view to use the dbt_utils.star macro in int_jira__issue_users\n\nwith  __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    lower(fields.field_name) as field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_epic as (\n-- issue-epic relationships are either captured via the issue's parent_issue_id (next-gen projects)\n-- or through the 'Epic Link' field (classic projects)\nwith epic_field_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_field_history\n    where lower(field_name) like 'epic%link'\n    \n),\n\norder_epic_links as (\n\n    select\n        issue_id,\n        cast(field_value as integer ) as epic_issue_id,\n\n        row_number() over (\n                partition by issue_id order by updated_at desc\n                ) as row_num\n\n    from epic_field_history\n),\n\nlast_epic_link as (\n\n    select \n      issue_id, \n      epic_issue_id \n    \n    from order_epic_links\n    where row_num = 1\n)\n\nselect *\nfrom last_epic_link\n), issue as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue\"\n    \n),\n\nissue_type as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_type\"\n), \n-- issue-epic relationships are either captured via the issue's parent_issue_id (next-gen projects)\n-- or through the 'Epic Link' field (classic projects)\n\nissues_w_epics as (\n\n  select * \n  from __dbt__cte__int_jira__issue_epic\n\n), \n\nissue_enriched_with_epics as (\n\n  select\n  \n    issue.*,\n    coalesce(parent_issue_id, epic_issue_id) as revised_parent_issue_id\n  \n  from issue\n  \n  left join issues_w_epics on issues_w_epics.issue_id = issue.issue_id\n\n), \n\nissue_w_types as (\n\n    select \n\n        issue_enriched_with_epics.*,\n        issue_type.issue_type_name as issue_type\n        \n    from issue_enriched_with_epics \n    \n    left join issue_type on issue_type.issue_type_id = issue_enriched_with_epics.issue_type_id\n),\n\nadd_parent_info as (\n\n    select\n        issue_w_types.*,\n        parent.issue_type as parent_issue_type,\n        parent.issue_name as parent_issue_name,\n        parent.issue_key as parent_issue_key,\n        lower(coalesce(parent.issue_type, '')) = 'epic' as is_parent_epic\n\n    from\n    issue_w_types\n\n    -- do a left join so we can grab all issue types from this table in `issue_join`\n    left join issue_w_types as parent on issue_w_types.revised_parent_issue_id = parent.issue_id\n\n)\n\nselect * \nfrom add_parent_info", "relation_name": "\"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__issue_type_parents\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.616904Z", "completed_at": "2024-01-09T21:53:33.622500Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.635077Z", "completed_at": "2024-01-09T21:53:33.635082Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.019237041473388672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_epic_issue_id__epic_issue_id.9ddee9201b", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    lower(fields.field_name) as field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_epic as (\n-- issue-epic relationships are either captured via the issue's parent_issue_id (next-gen projects)\n-- or through the 'Epic Link' field (classic projects)\nwith epic_field_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_field_history\n    where lower(field_name) like 'epic%link'\n    \n),\n\norder_epic_links as (\n\n    select\n        issue_id,\n        cast(field_value as integer ) as epic_issue_id,\n\n        row_number() over (\n                partition by issue_id order by updated_at desc\n                ) as row_num\n\n    from epic_field_history\n),\n\nlast_epic_link as (\n\n    select \n      issue_id, \n      epic_issue_id \n    \n    from order_epic_links\n    where row_num = 1\n)\n\nselect *\nfrom last_epic_link\n), validation_errors as (\n\n    select\n        issue_id, epic_issue_id\n    from __dbt__cte__int_jira__issue_epic\n    group by issue_id, epic_issue_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.622841Z", "completed_at": "2024-01-09T21:53:33.640086Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.640502Z", "completed_at": "2024-01-09T21:53:33.640505Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.018856287002563477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.int_jira__combine_field_histories", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    lower(fields.field_name) as field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n), issue_field_history as (\n\n    select * from __dbt__cte__int_jira__issue_field_history\n\n    \n    where cast( updated_at as date) >= (select max(valid_starting_on) from \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__combine_field_histories\" )\n    \n),\n\nissue_multiselect_batch_history as (\n\n    select * from \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__agg_multiselect_history\"\n\n    \n    where cast( updated_at as date) >= (select max(valid_starting_on) from \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__combine_field_histories\" )\n    \n),\n\ncombine_field_history as (\n-- combining all the field histories together\n    select \n        field_id,\n        issue_id,\n        updated_at,\n        field_value,\n        field_name\n\n    from issue_field_history\n\n    union all\n\n    select \n        field_id,\n        issue_id,\n        updated_at,\n        field_values as field_value, -- this is an aggregated list but we'll just call it field_value\n        field_name\n\n    from issue_multiselect_batch_history\n),\n\nget_valid_dates as (\n\n\n    select \n        field_id,\n        issue_id,\n        field_value,\n        field_name,\n        updated_at as valid_starting_at,\n\n        -- this value is valid until the next value is updated\n        lead(updated_at, 1) over(partition by issue_id, field_id order by updated_at asc) as valid_ending_at, \n\n        cast( date_trunc('day', updated_at) as date) as valid_starting_on\n\n    from combine_field_history\n\n),\n\nsurrogate_key as (\n\n    select \n    *,\n    md5(cast(coalesce(cast(field_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(issue_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(valid_starting_at as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as combined_history_id\n\n    from get_valid_dates\n\n)\n\nselect * from surrogate_key", "relation_name": "\"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__combine_field_histories\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.636541Z", "completed_at": "2024-01-09T21:53:33.644100Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.644712Z", "completed_at": "2024-01-09T21:53:33.644716Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009099721908569336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__agg_multiselect_history_batch_id.7d6d2460a8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect batch_id\nfrom \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__agg_multiselect_history\"\nwhere batch_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.641807Z", "completed_at": "2024-01-09T21:53:33.645409Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.646449Z", "completed_at": "2024-01-09T21:53:33.646452Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005694866180419922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__agg_multiselect_history_batch_id.14b3dea579", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    batch_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__agg_multiselect_history\"\nwhere batch_id is not null\ngroup by batch_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.647290Z", "completed_at": "2024-01-09T21:53:33.654176Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.654653Z", "completed_at": "2024-01-09T21:53:33.654657Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.008934974670410156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_sprint_issue_id__current_sprint_id.aafda24567", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    lower(fields.field_name) as field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_sprint as (\n\n\nwith sprint as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__sprint\"\n\n),\n\nfield_history as (\n\n     -- sprints don't appear to be capable of multiselect in the UI...\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n),\n\nsprint_field_history as (\n\n    select \n        field_history.*,\n        sprint.*,\n        row_number() over (\n                    partition by field_history.issue_id \n                    order by field_history.updated_at desc, sprint.started_at desc         \n                    ) as row_num\n    from field_history\n    join sprint on field_history.field_value = cast(sprint.sprint_id as TEXT)\n    where lower(field_history.field_name) = 'sprint'\n),\n\n\nlast_sprint as (\n\n    select *\n    from sprint_field_history\n    \n    where row_num = 1\n\n), \n\nsprint_rollovers as (\n\n    select \n        issue_id,\n        count(distinct case when field_value is not null then field_value end) as count_sprint_changes\n    \n    from sprint_field_history\n    group by 1\n\n),\n\nissue_sprint as (\n\n    select \n        last_sprint.issue_id,\n        last_sprint.field_value as current_sprint_id,\n        last_sprint.sprint_name as current_sprint_name,\n        last_sprint.board_id,\n        last_sprint.started_at as sprint_started_at,\n        last_sprint.ended_at as sprint_ended_at,\n        last_sprint.completed_at as sprint_completed_at,\n        coalesce(sprint_rollovers.count_sprint_changes, 0) as count_sprint_changes\n\n    from \n    last_sprint \n    left join sprint_rollovers on sprint_rollovers.issue_id = last_sprint.issue_id\n    \n)\n\nselect * from issue_sprint\n), validation_errors as (\n\n    select\n        issue_id, current_sprint_id\n    from __dbt__cte__int_jira__issue_sprint\n    group by issue_id, current_sprint_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.651877Z", "completed_at": "2024-01-09T21:53:33.655545Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.656513Z", "completed_at": "2024-01-09T21:53:33.656516Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008051872253417969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__issue_type_parents_issue_id.8dd98255b0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_id\nfrom \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__issue_type_parents\"\nwhere issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.656740Z", "completed_at": "2024-01-09T21:53:33.665643Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.666140Z", "completed_at": "2024-01-09T21:53:33.666144Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0107421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__issue_type_parents_issue_id.c07f8c6af3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__issue_type_parents\"\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.660489Z", "completed_at": "2024-01-09T21:53:33.666827Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.667793Z", "completed_at": "2024-01-09T21:53:33.667796Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008402109146118164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.int_jira__daily_field_history", "compiled": true, "compiled_code": "\n\nwith combined_field_histories as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__combine_field_histories\"\n\n    \n    where valid_starting_on >= (select max(valid_starting_on) from \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__daily_field_history\" )\n    \n),\n\n\nlimit_to_relevant_fields as (\n\n-- let's remove unncessary rows moving forward and grab field names \n    select \n        combined_field_histories.*\n\n    from combined_field_histories\n\n    where lower(field_id) = 'status' \n            or lower(field_name) in ('sprint','summary','story points','components')\n    \n),\n\norder_daily_values as (\n\n    select \n        *,\n\n        -- want to grab last value for an issue's field for each day\n        row_number() over (\n            partition by valid_starting_on, issue_id, field_id\n            order by valid_starting_at desc\n            ) as row_num\n\n    from limit_to_relevant_fields\n),\n\n-- only looking at the latest value for each day\nget_latest_daily_value as (\n\n    select * \n    from order_daily_values\n\n    where row_num = 1\n), \n\nfinal as (\n\n    select\n        field_id,\n        issue_id,\n        field_name,\n\n        -- doing this to figure out what values are actually null and what needs to be backfilled in jira__daily_issue_field_history\n        case when field_value is null then 'is_null' else field_value end as field_value,\n        valid_starting_at,\n        valid_ending_at, \n        valid_starting_on,\n\n        md5(cast(coalesce(cast(field_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(issue_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(valid_starting_on as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as issue_field_day_id\n        \n    from get_latest_daily_value\n)\n\nselect * from final", "relation_name": "\"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__daily_field_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.668651Z", "completed_at": "2024-01-09T21:53:33.674204Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.674663Z", "completed_at": "2024-01-09T21:53:33.674666Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.007566213607788086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__combine_field_histories_combined_history_id.943e81a794", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect combined_history_id\nfrom \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__combine_field_histories\"\nwhere combined_history_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.671933Z", "completed_at": "2024-01-09T21:53:33.675293Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.676275Z", "completed_at": "2024-01-09T21:53:33.676278Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005569934844970703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__combine_field_histories_combined_history_id.5b6b492428", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    combined_history_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__combine_field_histories\"\nwhere combined_history_id is not null\ngroup by combined_history_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.677253Z", "completed_at": "2024-01-09T21:53:33.686285Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.686764Z", "completed_at": "2024-01-09T21:53:33.686767Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011184215545654297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.int_jira__pivot_daily_field_history", "compiled": true, "compiled_code": "\n\n-- latest value per issue field (already limited included fields to sprint, status, and var(issue_field_history_columns))\nwith daily_field_history as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__daily_field_history\"\n\n    \n    where valid_starting_on >= (select max(valid_starting_on) from \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__pivot_daily_field_history\" )\n    \n),\n\npivot_out as (\n\n    -- pivot out default columns (status and sprint) and others specified in the var(issue_field_history_columns)\n    -- only days on which a field value was actively changed will have a non-null value. the nulls will need to \n    -- be backfilled in the final jira__daily_issue_field_history model\n    select \n        valid_starting_on, \n        issue_id,\n        max(case when lower(field_id) = 'status' then field_value end) as status,\n        max(case when lower(field_name) = 'sprint' then field_value end) as sprint\n\n        ,\n            max(case when lower(field_name) = 'summary' then field_value end) as summary\n        ,\n            max(case when lower(field_name) = 'story points' then field_value end) as story_points\n        ,\n            max(case when lower(field_name) = 'components' then field_value end) as components\n        from daily_field_history\n\n    group by 1,2\n),\n\nsurrogate_key as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(valid_starting_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(issue_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as issue_day_id\n\n    from pivot_out\n)\n\nselect * from surrogate_key", "relation_name": "\"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__pivot_daily_field_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.683826Z", "completed_at": "2024-01-09T21:53:33.687429Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.688493Z", "completed_at": "2024-01-09T21:53:33.688496Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.005810976028442383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__daily_field_history_issue_field_day_id.c910c3df84", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_field_day_id\nfrom \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__daily_field_history\"\nwhere issue_field_day_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.689357Z", "completed_at": "2024-01-09T21:53:33.698083Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.698902Z", "completed_at": "2024-01-09T21:53:33.698907Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011216163635253906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__daily_field_history_issue_field_day_id.bfd34ced78", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_field_day_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__daily_field_history\"\nwhere issue_field_day_id is not null\ngroup by issue_field_day_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.700391Z", "completed_at": "2024-01-09T21:53:33.703027Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.703464Z", "completed_at": "2024-01-09T21:53:33.703468Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.003949165344238281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__pivot_daily_field_history_issue_day_id.b697c971fd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_day_id\nfrom \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__pivot_daily_field_history\"\nwhere issue_day_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.704832Z", "completed_at": "2024-01-09T21:53:33.707264Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:33.707676Z", "completed_at": "2024-01-09T21:53:33.707679Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0037071704864501953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__pivot_daily_field_history_issue_day_id.46c6f9a842", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_day_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__pivot_daily_field_history\"\nwhere issue_day_id is not null\ngroup by issue_day_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.239244Z", "completed_at": "2024-01-09T21:53:34.111173Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:34.112525Z", "completed_at": "2024-01-09T21:53:34.112539Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.962637186050415, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__user", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__user_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    locale\n    \n as \n    \n    locale\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    time_zone\n    \n as \n    \n    time_zone\n    \n, \n    \n    \n    username\n    \n as \n    \n    username\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select \n        email,\n        id as user_id,\n        locale,\n        name as user_display_name,\n        time_zone,\n        username,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__user\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.247049Z", "completed_at": "2024-01-09T21:53:34.113667Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:34.114611Z", "completed_at": "2024-01-09T21:53:34.114618Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.9691920280456543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__version", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__version_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    archived\n    \n as \n    \n    archived\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    overdue\n    \n as \n    \n    overdue\n    \n, \n    \n    \n    project_id\n    \n as \n    \n    project_id\n    \n, \n    \n    \n    release_date\n    \n as \n    \n    release_date\n    \n, \n    \n    \n    released\n    \n as \n    \n    released\n    \n, \n    \n    \n    start_date\n    \n as \n    \n    start_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        archived as is_archived,\n        description,\n        id as version_id,\n        name as version_name,\n        overdue as is_overdue,\n        project_id,\n        cast(release_date as timestamp) as release_date,\n        released as is_released,\n        cast(start_date as timestamp) as start_date\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__version\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:34.222106Z", "completed_at": "2024-01-09T21:53:34.233199Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:34.235730Z", "completed_at": "2024-01-09T21:53:34.235738Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.030024290084838867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__user_user_id.b2153f97d2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__user\"\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:34.228088Z", "completed_at": "2024-01-09T21:53:34.235179Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:34.238241Z", "completed_at": "2024-01-09T21:53:34.238246Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.037461042404174805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__user_user_id.a397e1a23f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__user\"\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:34.262123Z", "completed_at": "2024-01-09T21:53:34.268377Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:34.268886Z", "completed_at": "2024-01-09T21:53:34.268891Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010177135467529297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__version_version_id.03877ce324", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect version_id\nfrom \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__version\"\nwhere version_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:34.265447Z", "completed_at": "2024-01-09T21:53:34.269899Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:34.270939Z", "completed_at": "2024-01-09T21:53:34.270942Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.020900726318359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__version_version_id.08231bd017", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    version_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__version\"\nwhere version_id is not null\ngroup by version_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:34.283445Z", "completed_at": "2024-01-09T21:53:34.291249Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:34.291735Z", "completed_at": "2024-01-09T21:53:34.291739Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009841203689575195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__issue_comments_issue_id.9f16878e45", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_jira__issue_comments as (\n\n\nwith comment as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__comment\"\n\n    order by issue_id, created_at asc\n\n),\n\n-- user is a reserved keyword in AWS \njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__user\"\n),\n\nagg_comments as (\n\n    select \n    comment.issue_id,\n    \n    string_agg(comment.created_at || '  -  ' || jira_user.user_display_name || ':  ' || comment.body, '\\n')\n\n as conversation,\n    count(comment.comment_id) as count_comments\n\n    from\n    comment \n    join jira_user on comment.author_user_id = jira_user.user_id\n\n    group by 1\n)\n\nselect * from agg_comments\n) select issue_id\nfrom __dbt__cte__int_jira__issue_comments\nwhere issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:34.287142Z", "completed_at": "2024-01-09T21:53:34.292584Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:34.293548Z", "completed_at": "2024-01-09T21:53:34.293551Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010135889053344727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__issue_comments_issue_id.26e3f11046", "compiled": true, "compiled_code": "\n    \n    \n\nwith __dbt__cte__int_jira__issue_comments as (\n\n\nwith comment as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__comment\"\n\n    order by issue_id, created_at asc\n\n),\n\n-- user is a reserved keyword in AWS \njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__user\"\n),\n\nagg_comments as (\n\n    select \n    comment.issue_id,\n    \n    string_agg(comment.created_at || '  -  ' || jira_user.user_display_name || ':  ' || comment.body, '\\n')\n\n as conversation,\n    count(comment.comment_id) as count_comments\n\n    from\n    comment \n    join jira_user on comment.author_user_id = jira_user.user_id\n\n    group by 1\n)\n\nselect * from agg_comments\n) select\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_jira__issue_comments\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:34.293763Z", "completed_at": "2024-01-09T21:53:34.297828Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:34.301521Z", "completed_at": "2024-01-09T21:53:34.301525Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009078025817871094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__issue_versions_issue_id.54c4cd445e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    lower(fields.field_name) as field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_versions as (\n\n\nwith version as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__version\"\n),\n\nversion_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n    where field_id = 'versions'\n        or field_id = 'fixVersions'\n),\n\norder_versions as (\n\n    select\n        *,\n        -- using rank so batches stick together\n        rank() over (\n            partition by field_id, issue_id\n            order by updated_at desc\n            ) as row_num\n\n    from version_history\n),\n\nlatest_versions as (\n\n    select \n        field_id,\n        issue_id,\t\n        updated_at,\n        cast(field_value as integer) as version_id\n    from order_versions\n    where row_num = 1\n),\n\nversion_info as (\n\n    select \n        latest_versions.field_id,\n        latest_versions.issue_id,\n        \n    string_agg(version.version_name, ', ')\n\n as versions\n\n    from latest_versions\n    join version on latest_versions.version_id = version.version_id\n\n    group by 1,2\n),\n\nsplit_versions as (\n\n    select \n        issue_id,\n        case when field_id = 'versions' then versions else null end as affects_versions,\n        case when field_id = 'fixVersions' then versions else null end as fixes_versions\n    from version_info\n),\n\nfinal as (\n\n    select \n        issue_id,\n        max(affects_versions) as affects_versions,\n        max(fixes_versions) as fixes_versions\n    from split_versions\n    group by 1\n)\n\nselect *\nfrom final\n) select issue_id\nfrom __dbt__cte__int_jira__issue_versions\nwhere issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:34.298050Z", "completed_at": "2024-01-09T21:53:34.302235Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:34.302655Z", "completed_at": "2024-01-09T21:53:34.302658Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0057048797607421875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__issue_versions_issue_id.e2a88132de", "compiled": true, "compiled_code": "\n    \n    \n\nwith __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    lower(fields.field_name) as field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_versions as (\n\n\nwith version as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__version\"\n),\n\nversion_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n    where field_id = 'versions'\n        or field_id = 'fixVersions'\n),\n\norder_versions as (\n\n    select\n        *,\n        -- using rank so batches stick together\n        rank() over (\n            partition by field_id, issue_id\n            order by updated_at desc\n            ) as row_num\n\n    from version_history\n),\n\nlatest_versions as (\n\n    select \n        field_id,\n        issue_id,\t\n        updated_at,\n        cast(field_value as integer) as version_id\n    from order_versions\n    where row_num = 1\n),\n\nversion_info as (\n\n    select \n        latest_versions.field_id,\n        latest_versions.issue_id,\n        \n    string_agg(version.version_name, ', ')\n\n as versions\n\n    from latest_versions\n    join version on latest_versions.version_id = version.version_id\n\n    group by 1,2\n),\n\nsplit_versions as (\n\n    select \n        issue_id,\n        case when field_id = 'versions' then versions else null end as affects_versions,\n        case when field_id = 'fixVersions' then versions else null end as fixes_versions\n    from version_info\n),\n\nfinal as (\n\n    select \n        issue_id,\n        max(affects_versions) as affects_versions,\n        max(fixes_versions) as fixes_versions\n    from split_versions\n    group by 1\n)\n\nselect *\nfrom final\n) select\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_jira__issue_versions\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:33.693223Z", "completed_at": "2024-01-09T21:53:34.509636Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:34.511009Z", "completed_at": "2024-01-09T21:53:34.511026Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.9158480167388916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.int_jira__field_history_scd", "compiled": true, "compiled_code": "with issue as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue\"\n),   \n    \nchange_data as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__pivot_daily_field_history\"\n), \n\nset_values as (\n\n    select \n        valid_starting_on, \n        issue_id,\n        issue_day_id,\n        status as status_id,\n        sum( case when status is null then 0 else 1 end) over ( partition by issue_id \n            order by valid_starting_on rows unbounded preceding) as status_id_field_partition\n\n         \n        , status\n        -- create a batch/partition once a new value is provided\n        , sum( case when status is null then 0 else 1 end) over ( partition by issue_id \n            order by valid_starting_on rows unbounded preceding) as status_field_partition\n\n         \n        , sprint\n        -- create a batch/partition once a new value is provided\n        , sum( case when sprint is null then 0 else 1 end) over ( partition by issue_id \n            order by valid_starting_on rows unbounded preceding) as sprint_field_partition\n\n         \n        , summary\n        -- create a batch/partition once a new value is provided\n        , sum( case when summary is null then 0 else 1 end) over ( partition by issue_id \n            order by valid_starting_on rows unbounded preceding) as summary_field_partition\n\n         \n        , story_points\n        -- create a batch/partition once a new value is provided\n        , sum( case when story_points is null then 0 else 1 end) over ( partition by issue_id \n            order by valid_starting_on rows unbounded preceding) as story_points_field_partition\n\n         \n        , components\n        -- create a batch/partition once a new value is provided\n        , sum( case when components is null then 0 else 1 end) over ( partition by issue_id \n            order by valid_starting_on rows unbounded preceding) as components_field_partition\n\n        \n    \n    from change_data\n\n), \n\nfill_values as (\n\n-- each row of the pivoted table includes field values if that field was updated on that day\n-- we need to backfill to persist values that have been previously updated and are still valid \n    select \n        valid_starting_on, \n        issue_id,\n        issue_day_id,\n        first_value( status ) over (\n            partition by issue_id, status_id_field_partition \n            order by valid_starting_on asc rows between unbounded preceding and current row) as status_id\n        \n         \n\n        -- grab the value that started this batch/partition\n        , first_value( status ) over (\n            partition by issue_id, status_field_partition \n            order by valid_starting_on asc rows between unbounded preceding and current row) as status\n\n         \n\n        -- grab the value that started this batch/partition\n        , first_value( sprint ) over (\n            partition by issue_id, sprint_field_partition \n            order by valid_starting_on asc rows between unbounded preceding and current row) as sprint\n\n         \n\n        -- grab the value that started this batch/partition\n        , first_value( summary ) over (\n            partition by issue_id, summary_field_partition \n            order by valid_starting_on asc rows between unbounded preceding and current row) as summary\n\n         \n\n        -- grab the value that started this batch/partition\n        , first_value( story_points ) over (\n            partition by issue_id, story_points_field_partition \n            order by valid_starting_on asc rows between unbounded preceding and current row) as story_points\n\n         \n\n        -- grab the value that started this batch/partition\n        , first_value( components ) over (\n            partition by issue_id, components_field_partition \n            order by valid_starting_on asc rows between unbounded preceding and current row) as components\n\n        \n\n    from set_values\n\n),\n\nissue_dates as (\n\n    select\n        fill_values.*,\n        cast( date_trunc('day', issue.created_at) as date) as created_on,\n        -- resolved_at will become null if an issue is marked as un-resolved. if this sorta thing happens often, you may want to run full-refreshes of the field_history models often\n        -- if it's not resolved include everything up to today. if it is, look at the last time it was updated \n        cast(date_trunc('day', case when issue.resolved_at is null then \n    (current_timestamp at time zone 'utc')::timestamp\n else cast(fill_values.valid_starting_on as timestamp) end) as date) as open_until\n    from fill_values\n    left join issue\n        on fill_values.issue_id = issue.issue_id\n)\n\nselect *\nfrom issue_dates", "relation_name": "\"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__field_history_scd\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:34.616282Z", "completed_at": "2024-01-09T21:53:34.659985Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:34.660859Z", "completed_at": "2024-01-09T21:53:34.660868Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.048270225524902344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.int_jira__issue_calendar_spine", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_jira__calendar_spine as (\nwith spine as (\n\n    \n    \n    \n    \n    \n\n\n    select * \n    from (\n        \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1385\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2020-04-01' as date) + ((interval '1 day') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= \n\n    \n    (current_timestamp at time zone 'utc')::timestamp\n + ((interval '1 week') * (1))\n\n\n\n)\n\nselect * from filtered\n\n \n    ) as date_spine\n\n),\n\nrecast as (\n\n    select cast(date_day as date) as date_day\n    from spine\n)\n\nselect *\nfrom recast\n), spine as (\n\n    select *\n    from __dbt__cte__int_jira__calendar_spine \n\n    \n),\n\nissue_dates as (\n    \n    select *\n    from \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__field_history_scd\"  \n), \n\nissue_spine as (\n\n    select \n        cast(spine.date_day as date) as date_day,\n        issue_dates.issue_id,\n        -- will take the table-wide min of this in the incremental block at the top of this model\n        min(issue_dates.open_until) as earliest_open_until_date\n    from spine \n    join issue_dates on\n        issue_dates.created_on <= spine.date_day\n        and \n\n    issue_dates.open_until + ((interval '1 month') * (1))\n\n >= spine.date_day\n        -- if we cut off issues, we're going to have to do a full refresh to catch issues that have been un-resolved\n    \n    where spine.date_day >= (select max(this.earliest_open_until_date) from \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__issue_calendar_spine\" as this where issue_dates.issue_id = this.issue_id )\n    \n    group by 1,2\n),\n\nsurrogate_key as (\n\n    select \n        date_day,\n        issue_id,\n        md5(cast(coalesce(cast(date_day as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(issue_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as issue_day_id,\n        earliest_open_until_date\n    from issue_spine\n    where date_day <= cast( date_trunc('day', \n    (current_timestamp at time zone 'utc')::timestamp\n) as date)\n)\n\nselect * from surrogate_key", "relation_name": "\"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__issue_calendar_spine\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:34.649547Z", "completed_at": "2024-01-09T21:53:34.662546Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:34.664529Z", "completed_at": "2024-01-09T21:53:34.664534Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.035735130310058594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__field_history_scd_issue_day_id.327ac0856c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_day_id\nfrom \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__field_history_scd\"\nwhere issue_day_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:34.654291Z", "completed_at": "2024-01-09T21:53:34.662882Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:34.664877Z", "completed_at": "2024-01-09T21:53:34.664881Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03558802604675293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__field_history_scd_issue_day_id.21b932e949", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_day_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__field_history_scd\"\nwhere issue_day_id is not null\ngroup by issue_day_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:34.689024Z", "completed_at": "2024-01-09T21:53:34.692252Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:34.693130Z", "completed_at": "2024-01-09T21:53:34.693135Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.008337020874023438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__issue_calendar_spine_issue_day_id.c49483d2e5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_day_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__issue_calendar_spine\"\nwhere issue_day_id is not null\ngroup by issue_day_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:34.686320Z", "completed_at": "2024-01-09T21:53:34.692493Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:34.693359Z", "completed_at": "2024-01-09T21:53:34.693361Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009377002716064453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__issue_calendar_spine_issue_day_id.a9512b8e8a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_day_id\nfrom \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__issue_calendar_spine\"\nwhere issue_day_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:35.199614Z", "completed_at": "2024-01-09T21:53:35.239146Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:35.256159Z", "completed_at": "2024-01-09T21:53:35.256167Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.059816837310791016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__issue_users_issue_id.480b7b6beb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_jira__issue_users as (\n-- just grabs user attributes for issue assignees and reporters \n\nwith issue as (\n\n    -- including issue_id in here because snowflake for some reason ignores issue_id,\n    -- so we'll just always pull it out and explicitly select it\n    \n\n    select\n        issue_id,\n        coalesce(revised_parent_issue_id, parent_issue_id) as parent_issue_id,\n\n        \"original_estimate_seconds\",\n  \"remaining_estimate_seconds\",\n  \"time_spent_seconds\",\n  \"assignee_user_id\",\n  \"created_at\",\n  \"resolved_at\",\n  \"creator_user_id\",\n  \"issue_description\",\n  \"due_date\",\n  \"environment\",\n  \"issue_type_id\",\n  \"issue_key\",\n  \"priority_id\",\n  \"project_id\",\n  \"reporter_user_id\",\n  \"resolution_id\",\n  \"status_id\",\n  \"status_changed_at\",\n  \"issue_name\",\n  \"updated_at\",\n  \"work_ratio\",\n  \"_fivetran_synced\",\n  \"issue_type\",\n  \"parent_issue_type\",\n  \"parent_issue_name\",\n  \"parent_issue_key\",\n  \"is_parent_epic\"\n\n\n    \n    from \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__issue_type_parents\"\n\n),\n\n-- user is a reserved keyword in AWS\njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__user\"\n),\n\nissue_user_join as (\n\n    select\n        issue.*,\n        assignee.user_display_name as assignee_name,\n        assignee.time_zone as assignee_timezone,\n        assignee.email as assignee_email,\n        reporter.email as reporter_email,\n        reporter.user_display_name as reporter_name,\n        reporter.time_zone as reporter_timezone\n        \n        \n    from issue\n    left join jira_user as assignee on issue.assignee_user_id = assignee.user_id \n    left join jira_user as reporter on issue.reporter_user_id = reporter.user_id\n\n)\n\nselect * \nfrom issue_user_join\n) select issue_id\nfrom __dbt__cte__int_jira__issue_users\nwhere issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:35.227381Z", "completed_at": "2024-01-09T21:53:35.256470Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:35.258261Z", "completed_at": "2024-01-09T21:53:35.258265Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.044754743576049805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__issue_users_issue_id.e3a5962431", "compiled": true, "compiled_code": "\n    \n    \n\nwith __dbt__cte__int_jira__issue_users as (\n-- just grabs user attributes for issue assignees and reporters \n\nwith issue as (\n\n    -- including issue_id in here because snowflake for some reason ignores issue_id,\n    -- so we'll just always pull it out and explicitly select it\n    \n\n    select\n        issue_id,\n        coalesce(revised_parent_issue_id, parent_issue_id) as parent_issue_id,\n\n        \"original_estimate_seconds\",\n  \"remaining_estimate_seconds\",\n  \"time_spent_seconds\",\n  \"assignee_user_id\",\n  \"created_at\",\n  \"resolved_at\",\n  \"creator_user_id\",\n  \"issue_description\",\n  \"due_date\",\n  \"environment\",\n  \"issue_type_id\",\n  \"issue_key\",\n  \"priority_id\",\n  \"project_id\",\n  \"reporter_user_id\",\n  \"resolution_id\",\n  \"status_id\",\n  \"status_changed_at\",\n  \"issue_name\",\n  \"updated_at\",\n  \"work_ratio\",\n  \"_fivetran_synced\",\n  \"issue_type\",\n  \"parent_issue_type\",\n  \"parent_issue_name\",\n  \"parent_issue_key\",\n  \"is_parent_epic\"\n\n\n    \n    from \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__issue_type_parents\"\n\n),\n\n-- user is a reserved keyword in AWS\njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__user\"\n),\n\nissue_user_join as (\n\n    select\n        issue.*,\n        assignee.user_display_name as assignee_name,\n        assignee.time_zone as assignee_timezone,\n        assignee.email as assignee_email,\n        reporter.email as reporter_email,\n        reporter.user_display_name as reporter_name,\n        reporter.time_zone as reporter_timezone\n        \n        \n    from issue\n    left join jira_user as assignee on issue.assignee_user_id = assignee.user_id \n    left join jira_user as reporter on issue.reporter_user_id = reporter.user_id\n\n)\n\nselect * \nfrom issue_user_join\n) select\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_jira__issue_users\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:35.215483Z", "completed_at": "2024-01-09T21:53:35.257394Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:35.258542Z", "completed_at": "2024-01-09T21:53:35.258545Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.06763410568237305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.int_jira__issue_join", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_jira__issue_users as (\n-- just grabs user attributes for issue assignees and reporters \n\nwith issue as (\n\n    -- including issue_id in here because snowflake for some reason ignores issue_id,\n    -- so we'll just always pull it out and explicitly select it\n    \n\n    select\n        issue_id,\n        coalesce(revised_parent_issue_id, parent_issue_id) as parent_issue_id,\n\n        \"original_estimate_seconds\",\n  \"remaining_estimate_seconds\",\n  \"time_spent_seconds\",\n  \"assignee_user_id\",\n  \"created_at\",\n  \"resolved_at\",\n  \"creator_user_id\",\n  \"issue_description\",\n  \"due_date\",\n  \"environment\",\n  \"issue_type_id\",\n  \"issue_key\",\n  \"priority_id\",\n  \"project_id\",\n  \"reporter_user_id\",\n  \"resolution_id\",\n  \"status_id\",\n  \"status_changed_at\",\n  \"issue_name\",\n  \"updated_at\",\n  \"work_ratio\",\n  \"_fivetran_synced\",\n  \"issue_type\",\n  \"parent_issue_type\",\n  \"parent_issue_name\",\n  \"parent_issue_key\",\n  \"is_parent_epic\"\n\n\n    \n    from \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__issue_type_parents\"\n\n),\n\n-- user is a reserved keyword in AWS\njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__user\"\n),\n\nissue_user_join as (\n\n    select\n        issue.*,\n        assignee.user_display_name as assignee_name,\n        assignee.time_zone as assignee_timezone,\n        assignee.email as assignee_email,\n        reporter.email as reporter_email,\n        reporter.user_display_name as reporter_name,\n        reporter.time_zone as reporter_timezone\n        \n        \n    from issue\n    left join jira_user as assignee on issue.assignee_user_id = assignee.user_id \n    left join jira_user as reporter on issue.reporter_user_id = reporter.user_id\n\n)\n\nselect * \nfrom issue_user_join\n),  __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    lower(fields.field_name) as field_name\n\n  from issue_multiselect_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_sprint as (\n\n\nwith sprint as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__sprint\"\n\n),\n\nfield_history as (\n\n     -- sprints don't appear to be capable of multiselect in the UI...\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n),\n\nsprint_field_history as (\n\n    select \n        field_history.*,\n        sprint.*,\n        row_number() over (\n                    partition by field_history.issue_id \n                    order by field_history.updated_at desc, sprint.started_at desc         \n                    ) as row_num\n    from field_history\n    join sprint on field_history.field_value = cast(sprint.sprint_id as TEXT)\n    where lower(field_history.field_name) = 'sprint'\n),\n\n\nlast_sprint as (\n\n    select *\n    from sprint_field_history\n    \n    where row_num = 1\n\n), \n\nsprint_rollovers as (\n\n    select \n        issue_id,\n        count(distinct case when field_value is not null then field_value end) as count_sprint_changes\n    \n    from sprint_field_history\n    group by 1\n\n),\n\nissue_sprint as (\n\n    select \n        last_sprint.issue_id,\n        last_sprint.field_value as current_sprint_id,\n        last_sprint.sprint_name as current_sprint_name,\n        last_sprint.board_id,\n        last_sprint.started_at as sprint_started_at,\n        last_sprint.ended_at as sprint_ended_at,\n        last_sprint.completed_at as sprint_completed_at,\n        coalesce(sprint_rollovers.count_sprint_changes, 0) as count_sprint_changes\n\n    from \n    last_sprint \n    left join sprint_rollovers on sprint_rollovers.issue_id = last_sprint.issue_id\n    \n)\n\nselect * from issue_sprint\n),  __dbt__cte__int_jira__issue_comments as (\n\n\nwith comment as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__comment\"\n\n    order by issue_id, created_at asc\n\n),\n\n-- user is a reserved keyword in AWS \njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__user\"\n),\n\nagg_comments as (\n\n    select \n    comment.issue_id,\n    \n    string_agg(comment.created_at || '  -  ' || jira_user.user_display_name || ':  ' || comment.body, '\\n')\n\n as conversation,\n    count(comment.comment_id) as count_comments\n\n    from\n    comment \n    join jira_user on comment.author_user_id = jira_user.user_id\n\n    group by 1\n)\n\nselect * from agg_comments\n),  __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    lower(fields.field_name) as field_name\n\n  from field_history\n  join fields using (field_id)\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_assign_resolution as (\nwith issue_field_history as (\n    \n    select *\n    from __dbt__cte__int_jira__issue_field_history\n\n), \n\nfiltered as (\n    -- we're only looking at assignments and resolutions, which are single-field values\n    select *\n    from issue_field_history\n\n    where (lower(field_id) = 'assignee'\n    or lower(field_id) = 'resolutiondate')\n\n    and field_value is not null -- remove initial null rows\n),\n\nissue_dates as (\n\n    select\n\n        issue_id,\n        min(case when field_id = 'assignee' then updated_at end) as first_assigned_at,\n        max(case when field_id = 'assignee' then updated_at end) as last_assigned_at,\n        min(case when field_id = 'resolutiondate' then updated_at end) as first_resolved_at -- in case it's been re-opened\n\n    from filtered\n    group by 1\n)\n\nselect *\nfrom issue_dates\n),  __dbt__cte__int_jira__issue_versions as (\n\n\nwith version as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__version\"\n),\n\nversion_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n    where field_id = 'versions'\n        or field_id = 'fixVersions'\n),\n\norder_versions as (\n\n    select\n        *,\n        -- using rank so batches stick together\n        rank() over (\n            partition by field_id, issue_id\n            order by updated_at desc\n            ) as row_num\n\n    from version_history\n),\n\nlatest_versions as (\n\n    select \n        field_id,\n        issue_id,\t\n        updated_at,\n        cast(field_value as integer) as version_id\n    from order_versions\n    where row_num = 1\n),\n\nversion_info as (\n\n    select \n        latest_versions.field_id,\n        latest_versions.issue_id,\n        \n    string_agg(version.version_name, ', ')\n\n as versions\n\n    from latest_versions\n    join version on latest_versions.version_id = version.version_id\n\n    group by 1,2\n),\n\nsplit_versions as (\n\n    select \n        issue_id,\n        case when field_id = 'versions' then versions else null end as affects_versions,\n        case when field_id = 'fixVersions' then versions else null end as fixes_versions\n    from version_info\n),\n\nfinal as (\n\n    select \n        issue_id,\n        max(affects_versions) as affects_versions,\n        max(fixes_versions) as fixes_versions\n    from split_versions\n    group by 1\n)\n\nselect *\nfrom final\n), issue as (\n\n    select *\n    from __dbt__cte__int_jira__issue_users\n\n),\n\nproject as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__project\"\n),\n\nstatus as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__status\"\n),\n\nstatus_category as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__status_category\"\n),\n\nresolution as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__resolution\"\n),\n\n\npriority as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__priority\"\n),\n\n\n\nissue_sprint as (\n\n    select *\n    from __dbt__cte__int_jira__issue_sprint\n),\n\n\n\nissue_comments as (\n\n    select * \n    from __dbt__cte__int_jira__issue_comments\n),\n\n\nissue_assignments_and_resolutions as (\n  \n  select *\n  from __dbt__cte__int_jira__issue_assign_resolution\n\n),\n\n\nissue_versions as (\n\n    select *\n    from __dbt__cte__int_jira__issue_versions\n),\n\n\njoin_issue as (\n\n    select\n        issue.* \n\n        ,project.project_name as project_name\n\n        ,status.status_name as current_status\n        ,status_category.status_category_name as current_status_category   \n        ,resolution.resolution_name as resolution_type\n        \n        ,priority.priority_name as current_priority\n\t\n\n        \n        ,issue_sprint.current_sprint_id\n        ,issue_sprint.current_sprint_name\n        ,coalesce(issue_sprint.count_sprint_changes, 0) as count_sprint_changes\n        ,issue_sprint.sprint_started_at\n        ,issue_sprint.sprint_ended_at\n        ,issue_sprint.sprint_completed_at\n        ,coalesce(issue_sprint.sprint_started_at <= \n    current_timestamp::timestamp\n\n          and coalesce(issue_sprint.sprint_completed_at, \n    current_timestamp::timestamp\n) >= \n    current_timestamp::timestamp\n  \n          , false) as is_active_sprint -- If sprint doesn't have a start date, default to false. If it does have a start date, but no completed date, this means that the sprint is active. The ended_at timestamp is irrelevant here.\n        \n\n        ,issue_assignments_and_resolutions.first_assigned_at\n        ,issue_assignments_and_resolutions.last_assigned_at\n        ,issue_assignments_and_resolutions.first_resolved_at\n\n        \n        ,issue_versions.fixes_versions\n        ,issue_versions.affects_versions\n        \n\n        \n        ,issue_comments.conversation\n        ,coalesce(issue_comments.count_comments, 0) as count_comments\n        \n    \n    from issue\n    left join project on project.project_id = issue.project_id\n    left join status on status.status_id = issue.status_id\n    left join status_category on status.status_category_id = status_category.status_category_id\n    left join resolution on resolution.resolution_id = issue.resolution_id\n\t\n    left join priority on priority.priority_id = issue.priority_id\n\t\n    left join issue_assignments_and_resolutions on issue_assignments_and_resolutions.issue_id = issue.issue_id\n\n    \n    left join issue_versions on issue_versions.issue_id = issue.issue_id\n    \n    \n    \n    left join issue_sprint on issue_sprint.issue_id = issue.issue_id\n    \n\n    \n    left join issue_comments on issue_comments.issue_id = issue.issue_id\n    \n)\n\nselect * \nfrom join_issue", "relation_name": "\"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__issue_join\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:35.266294Z", "completed_at": "2024-01-09T21:53:35.269214Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:35.270180Z", "completed_at": "2024-01-09T21:53:35.270185Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.009685993194580078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__issue_join_issue_id.0bd360ec4b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__issue_join\"\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:35.262076Z", "completed_at": "2024-01-09T21:53:35.269497Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:35.270434Z", "completed_at": "2024-01-09T21:53:35.270437Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010560989379882812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__issue_join_issue_id.53391b21a6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_id\nfrom \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__issue_join\"\nwhere issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:34.665188Z", "completed_at": "2024-01-09T21:53:35.627601Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:35.628713Z", "completed_at": "2024-01-09T21:53:35.628729Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.050428867340088, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.jira__daily_issue_field_history", "compiled": true, "compiled_code": "\n\n-- grab column names that were pivoted out-- in intermediate/field_history/\nwith pivoted_daily_history as (\n\n    select \"valid_starting_on\",\n  \"issue_id\",\n  \"issue_day_id\",\n  \"status_id\",\n  \"status\",\n  \"sprint\",\n  \"summary\",\n  \"story_points\",\n  \"components\" \n    from \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__field_history_scd\" as scd\n\n    \n    \n    where scd.valid_starting_on >= (select max(this.date_day) from \"postgres\".\"jira_integrations_tests_2_jira\".\"jira__daily_issue_field_history\" as this where this.issue_id = scd.issue_id )\n\n-- If no issue fields have been updated since the last incremental run, the pivoted_daily_history CTE will return no record/rows.\n-- When this is the case, we need to grab the most recent day's records from the previously built table so that we can persist \n-- those values into the future.\n\n), most_recent_data as ( \n    select \n        *\n    from \"postgres\".\"jira_integrations_tests_2_jira\".\"jira__daily_issue_field_history\" as recent\n    where recent.date_day = (select max(this.date_day) from \"postgres\".\"jira_integrations_tests_2_jira\".\"jira__daily_issue_field_history\" as this where this.issue_id = recent.issue_id )\n\n\n\n), field_option as (\n    \n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__field_option\"\n),\n\nstatuses as (\n    \n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__status\"\n),\n\nissue_types as (\n    \n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__issue_type\"\n),\n\n\ncomponents as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__component\"\n),\n\n\n-- in intermediate/field_history/\ncalendar as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__issue_calendar_spine\" as spine\n\n    \n    where spine.date_day >= (select max(this.date_day) from \"postgres\".\"jira_integrations_tests_2_jira\".\"jira__daily_issue_field_history\" as this where this.issue_id = spine.issue_id )\n    \n),\n\njoined as (\n\n    select\n        calendar.date_day,\n        calendar.issue_id\n\n            \n            \n                \n            \n                \n            \n                \n            \n                 \n                , coalesce(pivoted_daily_history.status_id, most_recent_data.status_id) as status_id\n\n                \n            \n                 \n                , coalesce(pivoted_daily_history.status, most_recent_data.status) as status\n\n                \n            \n                 \n                , coalesce(pivoted_daily_history.sprint, most_recent_data.sprint) as sprint\n\n                \n            \n                 \n                , coalesce(pivoted_daily_history.summary, most_recent_data.summary) as summary\n\n                \n            \n                 \n                , coalesce(pivoted_daily_history.story_points, most_recent_data.story_points) as story_points\n\n                \n            \n                \n                , coalesce(pivoted_daily_history.components, most_recent_data.components) as components\n\n                \n            \n                \n            \n                \n             \n\n        \n    \n    from calendar\n    left join pivoted_daily_history \n        on calendar.issue_id = pivoted_daily_history.issue_id\n        and calendar.date_day = pivoted_daily_history.valid_starting_on\n    \n    \n    left join most_recent_data\n        on calendar.issue_id = most_recent_data.issue_id\n        and calendar.date_day = most_recent_data.date_day\n    \n),\n\nset_values as (\n    select\n        date_day,\n        issue_id,\n        joined.status_id,\n        sum( case when joined.status_id is null then 0 else 1 end) over ( partition by issue_id\n            order by date_day rows unbounded preceding) as status_id_field_partition\n\n        -- list of exception columns\n        \n\n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n            , coalesce(field_option_sprint.field_option_name, joined.sprint) as sprint\n            -- create a batch/partition once a new value is provided\n            , sum( case when joined.sprint is null then 0 else 1 end) over ( partition by issue_id\n                order by date_day rows unbounded preceding) as sprint_field_partition\n\n            \n        \n            \n            , coalesce(field_option_summary.field_option_name, joined.summary) as summary\n            -- create a batch/partition once a new value is provided\n            , sum( case when joined.summary is null then 0 else 1 end) over ( partition by issue_id\n                order by date_day rows unbounded preceding) as summary_field_partition\n\n            \n        \n            \n            , coalesce(field_option_story_points.field_option_name, joined.story_points) as story_points\n            -- create a batch/partition once a new value is provided\n            , sum( case when joined.story_points is null then 0 else 1 end) over ( partition by issue_id\n                order by date_day rows unbounded preceding) as story_points_field_partition\n\n            \n        \n            \n            , coalesce(components.component_name, joined.components) as components\n            , sum(case when joined.components is null then 0 else 1 end) over (partition by issue_id order by date_day rows unbounded preceding) as component_field_partition\n\n            \n        \n            \n        \n            \n        \n\n    from joined\n\n    \n        \n    \n        \n    \n        \n    \n        \n    \n        \n    \n        \n        left join field_option as field_option_sprint\n            on cast(field_option_sprint.field_id as TEXT) = joined.sprint\n\n        \n    \n        \n        left join field_option as field_option_summary\n            on cast(field_option_summary.field_id as TEXT) = joined.summary\n\n        \n    \n        \n        left join field_option as field_option_story_points\n            on cast(field_option_story_points.field_id as TEXT) = joined.story_points\n\n        \n    \n        \n        left join components   \n            on cast(components.component_id as TEXT) = joined.components\n        \n        \n    \n        \n    \n        \n    \n),\n\nfill_values as (\n\n    select  \n        date_day,\n        issue_id,\n        first_value( status_id ) over (\n            partition by issue_id, status_id_field_partition \n            order by date_day asc rows between unbounded preceding and current row) as status_id\n\n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n            -- grab the value that started this batch/partition\n            , first_value( sprint ) over (\n                partition by issue_id, sprint_field_partition \n                order by date_day asc rows between unbounded preceding and current row) as sprint\n\n            \n        \n            \n            -- grab the value that started this batch/partition\n            , first_value( summary ) over (\n                partition by issue_id, summary_field_partition \n                order by date_day asc rows between unbounded preceding and current row) as summary\n\n            \n        \n            \n            -- grab the value that started this batch/partition\n            , first_value( story_points ) over (\n                partition by issue_id, story_points_field_partition \n                order by date_day asc rows between unbounded preceding and current row) as story_points\n\n            \n        \n            \n            , first_value(components) over (\n                partition by issue_id, component_field_partition \n                order by date_day asc rows between unbounded preceding and current row) as components\n\n            \n        \n            \n        \n            \n        \n\n    from set_values\n),\n\nfix_null_values as (\n\n    select  \n        date_day,\n        issue_id\n\n        \n            \n        \n            \n        \n            \n        \n            \n            -- we de-nulled the true null values earlier in order to differentiate them from nulls that just needed to be backfilled\n            , case when status_id = 'is_null' then null else status_id end as status_id\n\n            \n        \n            \n        \n            \n            -- we de-nulled the true null values earlier in order to differentiate them from nulls that just needed to be backfilled\n            , case when sprint = 'is_null' then null else sprint end as sprint\n\n            \n        \n            \n            -- we de-nulled the true null values earlier in order to differentiate them from nulls that just needed to be backfilled\n            , case when summary = 'is_null' then null else summary end as summary\n\n            \n        \n            \n            -- we de-nulled the true null values earlier in order to differentiate them from nulls that just needed to be backfilled\n            , case when story_points = 'is_null' then null else story_points end as story_points\n\n            \n        \n            \n            , case when components = 'is_null' then null else components end as components\n\n            \n        \n            \n        \n            \n        \n\n    from fill_values\n\n),\n\nsurrogate_key as (\n\n    select\n        fix_null_values.date_day,\n        fix_null_values.issue_id,\n        statuses.status_name as status\n\n        \n            \n        \n            \n        \n            \n        \n             \n            , fix_null_values.status_id as status_id\n\n            \n        \n            \n        \n             \n            , fix_null_values.sprint as sprint\n\n            \n        \n             \n            , fix_null_values.summary as summary\n\n            \n        \n             \n            , fix_null_values.story_points as story_points\n\n            \n        \n            \n            , fix_null_values.components as components\n\n            \n        \n            \n        \n            \n        \n\n        , md5(cast(coalesce(cast(date_day as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(issue_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as issue_day_id\n\n    from fix_null_values\n\n    left join statuses\n        on cast(statuses.status_id as TEXT) = fix_null_values.status_id\n)\n\nselect *\nfrom surrogate_key", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira\".\"jira__daily_issue_field_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:35.752256Z", "completed_at": "2024-01-09T21:53:35.757815Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:35.759124Z", "completed_at": "2024-01-09T21:53:35.759133Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03417229652404785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_jira__daily_issue_field_history_issue_day_id.75c24d3154", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_day_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_2_jira\".\"jira__daily_issue_field_history\"\nwhere issue_day_id is not null\ngroup by issue_day_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:35.747056Z", "completed_at": "2024-01-09T21:53:35.758709Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:35.760712Z", "completed_at": "2024-01-09T21:53:35.760717Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03686809539794922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_jira__daily_issue_field_history_issue_day_id.d13b058bcd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_day_id\nfrom \"postgres\".\"jira_integrations_tests_2_jira\".\"jira__daily_issue_field_history\"\nwhere issue_day_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:35.729329Z", "completed_at": "2024-01-09T21:53:36.717923Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:36.719349Z", "completed_at": "2024-01-09T21:53:36.719365Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.083726167678833, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.jira__issue_enhanced", "compiled": true, "compiled_code": "with issue as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_int_jira\".\"int_jira__issue_join\"\n),daily_issue_field_history as (\n    \n    select\n        *,\n        row_number() over (partition by issue_id order by date_day desc) = 1 as latest_record\n    from \"postgres\".\"jira_integrations_tests_2_jira\".\"jira__daily_issue_field_history\"\n\n),\n\nlatest_issue_field_history as (\n    \n    select\n        *\n    from daily_issue_field_history\n    where latest_record\n),\n\nfinal as (\n\n    select \n    \n        issue.*,\n\n        \n        (\n        (\n        (\n        ((coalesce(resolved_at, \n    current_timestamp::timestamp\n))::date - (created_at)::date)\n     * 24 + date_part('hour', (coalesce(resolved_at, \n    current_timestamp::timestamp\n))::timestamp) - date_part('hour', (created_at)::timestamp))\n     * 60 + date_part('minute', (coalesce(resolved_at, \n    current_timestamp::timestamp\n))::timestamp) - date_part('minute', (created_at)::timestamp))\n     * 60 + floor(date_part('second', (coalesce(resolved_at, \n    current_timestamp::timestamp\n))::timestamp)) - floor(date_part('second', (created_at)::timestamp)))\n     open_duration_seconds,\n\n        -- this will be null if no one has been assigned\n        \n        (\n        (\n        (\n        ((coalesce(resolved_at, \n    current_timestamp::timestamp\n))::date - (first_assigned_at)::date)\n     * 24 + date_part('hour', (coalesce(resolved_at, \n    current_timestamp::timestamp\n))::timestamp) - date_part('hour', (first_assigned_at)::timestamp))\n     * 60 + date_part('minute', (coalesce(resolved_at, \n    current_timestamp::timestamp\n))::timestamp) - date_part('minute', (first_assigned_at)::timestamp))\n     * 60 + floor(date_part('second', (coalesce(resolved_at, \n    current_timestamp::timestamp\n))::timestamp)) - floor(date_part('second', (first_assigned_at)::timestamp)))\n     any_assignment_duration_seconds,\n\n        -- if an issue is not currently assigned this will not be null\n        \n        (\n        (\n        (\n        ((coalesce(resolved_at, \n    current_timestamp::timestamp\n))::date - (last_assigned_at)::date)\n     * 24 + date_part('hour', (coalesce(resolved_at, \n    current_timestamp::timestamp\n))::timestamp) - date_part('hour', (last_assigned_at)::timestamp))\n     * 60 + date_part('minute', (coalesce(resolved_at, \n    current_timestamp::timestamp\n))::timestamp) - date_part('minute', (last_assigned_at)::timestamp))\n     * 60 + floor(date_part('second', (coalesce(resolved_at, \n    current_timestamp::timestamp\n))::timestamp)) - floor(date_part('second', (last_assigned_at)::timestamp)))\n     last_assignment_duration_seconds \n\n        , status, sprint, summary, story_points, components\n\n    from issue\n    \n    left join latest_issue_field_history \n        on issue.issue_id = latest_issue_field_history.issue_id\n        \n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira\".\"jira__issue_enhanced\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:36.861895Z", "completed_at": "2024-01-09T21:53:36.870900Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:36.873812Z", "completed_at": "2024-01-09T21:53:36.873816Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02681899070739746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_jira__issue_enhanced_issue_id.6b18e0db38", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_id\nfrom \"postgres\".\"jira_integrations_tests_2_jira\".\"jira__issue_enhanced\"\nwhere issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:36.865919Z", "completed_at": "2024-01-09T21:53:36.872096Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:36.874870Z", "completed_at": "2024-01-09T21:53:36.874874Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0427699089050293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_jira__issue_enhanced_issue_id.fec6e723ee", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_2_jira\".\"jira__issue_enhanced\"\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:36.875964Z", "completed_at": "2024-01-09T21:53:36.897886Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:36.910362Z", "completed_at": "2024-01-09T21:53:36.910368Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03810310363769531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.jira__project_enhanced", "compiled": true, "compiled_code": "with  __dbt__cte__int_jira__project_metrics as (\nwith issue as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_jira\".\"jira__issue_enhanced\"\n    where project_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        project_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_age_currently_open_seconds,\n\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_assigned_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_age_currently_open_assigned_seconds\n\n    from issue\n\n     group by project_id \n),\n\n-- grouping because the medians were calculated using window functions (except in postgres)\nmedian_metrics as (\n\n    select \n        project_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds,\n        median_assigned_close_time_seconds,\n        median_age_currently_open_assigned_seconds\n\n    from calculate_medians\n    group by 1,2,3,4,5\n),\n\n\n-- get appropriate counts + sums to calculate averages\nproject_issues as (\n    select\n        project_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        -- using the below to calculate averages\n\n        -- assigned issues\n        sum(case when resolved_at is null and assignee_user_id is not null then 1 else 0 end) as count_open_assigned_issues,\n        sum(case when resolved_at is not null and assignee_user_id is not null then 1 else 0 end) as count_closed_assigned_issues,\n\n        -- close time \n        sum(case when resolved_at is not null then open_duration_seconds else 0 end) as sum_close_time_seconds,\n        sum(case when resolved_at is not null then any_assignment_duration_seconds else 0 end) as sum_assigned_close_time_seconds,\n\n        -- age of currently open tasks\n        sum(case when resolved_at is null then open_duration_seconds else 0 end) as sum_currently_open_duration_seconds,\n        sum(case when resolved_at is null then any_assignment_duration_seconds else 0 end) as sum_currently_open_assigned_duration_seconds\n\n    from issue\n\n    group by 1\n),\n\ncalculate_avg_metrics as (\n\n    select\n        project_id,\n        count_closed_issues,\n        count_open_issues,\n        count_open_assigned_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues  as numeric(28,6) ), 0) end as avg_close_time_seconds,\n\n        case when count_closed_assigned_issues = 0 then 0 else\n        round( cast(sum_assigned_close_time_seconds * 1.0 / count_closed_assigned_issues  as numeric(28,6) ), 0) end as avg_assigned_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_currently_open_duration_seconds * 1.0 / count_open_issues as numeric(28,6) ), 0) end as avg_age_currently_open_seconds,\n\n        case when count_open_assigned_issues = 0 then 0 else\n        round( cast(sum_currently_open_assigned_duration_seconds * 1.0 / count_open_assigned_issues as numeric(28,6) ), 0) end as avg_age_currently_open_assigned_seconds\n\n    from project_issues\n),\n\n-- join medians and averages + convert to days\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n\n        -- there are 86400 seconds in a day\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_assigned_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as avg_assigned_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as avg_age_currently_open_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_assigned_seconds / 86400.0 as numeric(28,6) ), 0) as avg_age_currently_open_assigned_days,\n\n        median_metrics.median_close_time_seconds, \n        median_metrics.median_age_currently_open_seconds,\n        median_metrics.median_assigned_close_time_seconds,\n        median_metrics.median_age_currently_open_assigned_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as median_age_currently_open_days,\n        round( cast(median_metrics.median_assigned_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as median_assigned_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_assigned_seconds / 86400.0 as numeric(28,6) ), 0) as median_age_currently_open_assigned_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(project_id)\n)\n\nselect * from join_metrics\n), project as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__project\"\n),\n\nproject_metrics as (\n\n    select * \n    from __dbt__cte__int_jira__project_metrics\n),\n\n-- user is reserved in AWS\njira_user as (\n-- to grab the project lead\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__user\"\n),\n\nagg_epics as (\n\n    select \n        project_id,\n        \n    string_agg(issue_name, ', ')\n\n as epics\n\n    from \"postgres\".\"jira_integrations_tests_2_jira\".\"jira__issue_enhanced\"\n    where lower(issue_type) = 'epic'\n    -- should we limit to active epics?\n    group by 1\n\n),\n\n\n\nagg_components as (\n    -- i'm just aggregating the components here, but perhaps pivoting out components (and epics) \n    -- into columns where the values are the number of issues completed and/or open would be more valuable\n    select \n        project_id,\n        \n    string_agg(component_name, ', ')\n\n as components\n\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__component\"\n\n    group by 1\n),\n\n\n\nproject_join as (\n\n    select\n        project.*,\n        jira_user.user_display_name as project_lead_user_name,\n        jira_user.email as project_lead_email,\n        agg_epics.epics,\n        \n        \n        agg_components.components,\n        \n\n        coalesce(project_metrics.count_closed_issues, 0) as count_closed_issues,\n        coalesce(project_metrics.count_open_issues, 0) as count_open_issues,\n        coalesce(project_metrics.count_open_assigned_issues, 0) as count_open_assigned_issues,\n\n        -- days\n        project_metrics.avg_close_time_days,\n        project_metrics.avg_assigned_close_time_days,\n\n        project_metrics.avg_age_currently_open_days,\n        project_metrics.avg_age_currently_open_assigned_days,\n\n        project_metrics.median_close_time_days, \n        project_metrics.median_age_currently_open_days,\n        project_metrics.median_assigned_close_time_days,\n        project_metrics.median_age_currently_open_assigned_days,\n\n        -- seconds\n        project_metrics.avg_close_time_seconds,\n        project_metrics.avg_assigned_close_time_seconds,\n\n        project_metrics.avg_age_currently_open_seconds,\n        project_metrics.avg_age_currently_open_assigned_seconds,\n\n        project_metrics.median_close_time_seconds, \n        project_metrics.median_age_currently_open_seconds,\n        project_metrics.median_assigned_close_time_seconds,\n        project_metrics.median_age_currently_open_assigned_seconds\n\n    from project\n    left join project_metrics on project.project_id = project_metrics.project_id\n    left join jira_user on project.project_lead_user_id = jira_user.user_id\n    left join agg_epics on project.project_id = agg_epics.project_id \n    \n    \n    left join agg_components on project.project_id = agg_components.project_id \n    \n\n)\n\nselect * from project_join", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira\".\"jira__project_enhanced\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:36.892687Z", "completed_at": "2024-01-09T21:53:36.898547Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:36.910684Z", "completed_at": "2024-01-09T21:53:36.910687Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03746986389160156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__project_metrics_project_id.1542338148", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_jira__project_metrics as (\nwith issue as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_jira\".\"jira__issue_enhanced\"\n    where project_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        project_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_age_currently_open_seconds,\n\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_assigned_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_age_currently_open_assigned_seconds\n\n    from issue\n\n     group by project_id \n),\n\n-- grouping because the medians were calculated using window functions (except in postgres)\nmedian_metrics as (\n\n    select \n        project_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds,\n        median_assigned_close_time_seconds,\n        median_age_currently_open_assigned_seconds\n\n    from calculate_medians\n    group by 1,2,3,4,5\n),\n\n\n-- get appropriate counts + sums to calculate averages\nproject_issues as (\n    select\n        project_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        -- using the below to calculate averages\n\n        -- assigned issues\n        sum(case when resolved_at is null and assignee_user_id is not null then 1 else 0 end) as count_open_assigned_issues,\n        sum(case when resolved_at is not null and assignee_user_id is not null then 1 else 0 end) as count_closed_assigned_issues,\n\n        -- close time \n        sum(case when resolved_at is not null then open_duration_seconds else 0 end) as sum_close_time_seconds,\n        sum(case when resolved_at is not null then any_assignment_duration_seconds else 0 end) as sum_assigned_close_time_seconds,\n\n        -- age of currently open tasks\n        sum(case when resolved_at is null then open_duration_seconds else 0 end) as sum_currently_open_duration_seconds,\n        sum(case when resolved_at is null then any_assignment_duration_seconds else 0 end) as sum_currently_open_assigned_duration_seconds\n\n    from issue\n\n    group by 1\n),\n\ncalculate_avg_metrics as (\n\n    select\n        project_id,\n        count_closed_issues,\n        count_open_issues,\n        count_open_assigned_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues  as numeric(28,6) ), 0) end as avg_close_time_seconds,\n\n        case when count_closed_assigned_issues = 0 then 0 else\n        round( cast(sum_assigned_close_time_seconds * 1.0 / count_closed_assigned_issues  as numeric(28,6) ), 0) end as avg_assigned_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_currently_open_duration_seconds * 1.0 / count_open_issues as numeric(28,6) ), 0) end as avg_age_currently_open_seconds,\n\n        case when count_open_assigned_issues = 0 then 0 else\n        round( cast(sum_currently_open_assigned_duration_seconds * 1.0 / count_open_assigned_issues as numeric(28,6) ), 0) end as avg_age_currently_open_assigned_seconds\n\n    from project_issues\n),\n\n-- join medians and averages + convert to days\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n\n        -- there are 86400 seconds in a day\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_assigned_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as avg_assigned_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as avg_age_currently_open_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_assigned_seconds / 86400.0 as numeric(28,6) ), 0) as avg_age_currently_open_assigned_days,\n\n        median_metrics.median_close_time_seconds, \n        median_metrics.median_age_currently_open_seconds,\n        median_metrics.median_assigned_close_time_seconds,\n        median_metrics.median_age_currently_open_assigned_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as median_age_currently_open_days,\n        round( cast(median_metrics.median_assigned_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as median_assigned_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_assigned_seconds / 86400.0 as numeric(28,6) ), 0) as median_age_currently_open_assigned_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(project_id)\n)\n\nselect * from join_metrics\n) select project_id\nfrom __dbt__cte__int_jira__project_metrics\nwhere project_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:36.902345Z", "completed_at": "2024-01-09T21:53:36.911889Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:36.913935Z", "completed_at": "2024-01-09T21:53:36.913939Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017377138137817383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.jira__user_enhanced", "compiled": true, "compiled_code": "with  __dbt__cte__int_jira__user_metrics as (\nwith issue as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira\".\"jira__issue_enhanced\" \n    where assignee_user_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        assignee_user_id as user_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6)), 0) as median_close_time_seconds,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6)), 0) as median_age_currently_open_seconds\n\n    from issue\n\n     group by 1 \n),\n\n-- grouping because the medians were calculated using window functions (except postgres)\nmedian_metrics as (\n\n    select \n        user_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds\n\n    from calculate_medians\n    group by 1,2,3\n),\n\n\nuser_issues as (\n\n    select\n        assignee_user_id as user_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        sum(case when resolved_at is not null then last_assignment_duration_seconds end) as sum_close_time_seconds,\n        sum(case when resolved_at is null then last_assignment_duration_seconds end) as sum_current_open_seconds\n\n    from issue\n\n    group by 1\n\n),\n\ncalculate_avg_metrics as (\n\n    select \n        user_id,\n        count_closed_issues,\n        count_open_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues as numeric(28,6) ), 0) end as avg_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_current_open_seconds * 1.0 / count_open_issues as numeric(28,6) ), 0) end as avg_age_currently_open_seconds\n\n    from user_issues\n),\n\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as avg_age_currently_open_days,\n\n        median_metrics.median_close_time_seconds,\n        median_metrics.median_age_currently_open_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as median_age_currently_open_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(user_id)\n)\n\nselect * from join_metrics\n), jira_user as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira_source\".\"stg_jira__user\"\n),\n\nuser_metrics as (\n\n    select *\n    from __dbt__cte__int_jira__user_metrics\n),\n\nissue as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira\".\"jira__issue_enhanced\" \n),\n\nuser_project as (\n\n    select \n        assignee_user_id,\n        project_name\n\n    from issue\n    group by 1,2\n\n),\n\nagg_user_projects as (\n\n    select \n        assignee_user_id,\n        \n    string_agg(project_name, ', ')\n\n as projects\n\n    from user_project\n    group by 1\n),\n\nuser_join as (\n\n    select\n        jira_user.*,\n        agg_user_projects.projects, -- projects they've worked on issues for\n        coalesce(user_metrics.count_closed_issues, 0) as count_closed_issues,\n        coalesce(user_metrics.count_open_issues, 0) as count_open_issues,\n\n        -- days\n        user_metrics.avg_close_time_days,\n        user_metrics.avg_age_currently_open_days,\n        \n        user_metrics.median_close_time_days,\n        user_metrics.median_age_currently_open_days,\n\n        -- seconds\n        user_metrics.avg_close_time_seconds,\n        user_metrics.avg_age_currently_open_seconds,\n        \n        user_metrics.median_close_time_seconds,\n        user_metrics.median_age_currently_open_seconds\n\n    from jira_user \n    left join user_metrics on jira_user.user_id = user_metrics.user_id\n    left join agg_user_projects on jira_user.user_id = agg_user_projects.assignee_user_id\n)\n\nselect * from user_join", "relation_name": "\"postgres\".\"jira_integrations_tests_2_jira\".\"jira__user_enhanced\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:36.898974Z", "completed_at": "2024-01-09T21:53:36.912109Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:36.914171Z", "completed_at": "2024-01-09T21:53:36.914175Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.018237829208374023, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__project_metrics_project_id.154ccc194e", "compiled": true, "compiled_code": "\n    \n    \n\nwith __dbt__cte__int_jira__project_metrics as (\nwith issue as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_2_jira\".\"jira__issue_enhanced\"\n    where project_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        project_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_age_currently_open_seconds,\n\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_assigned_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_age_currently_open_assigned_seconds\n\n    from issue\n\n     group by project_id \n),\n\n-- grouping because the medians were calculated using window functions (except in postgres)\nmedian_metrics as (\n\n    select \n        project_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds,\n        median_assigned_close_time_seconds,\n        median_age_currently_open_assigned_seconds\n\n    from calculate_medians\n    group by 1,2,3,4,5\n),\n\n\n-- get appropriate counts + sums to calculate averages\nproject_issues as (\n    select\n        project_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        -- using the below to calculate averages\n\n        -- assigned issues\n        sum(case when resolved_at is null and assignee_user_id is not null then 1 else 0 end) as count_open_assigned_issues,\n        sum(case when resolved_at is not null and assignee_user_id is not null then 1 else 0 end) as count_closed_assigned_issues,\n\n        -- close time \n        sum(case when resolved_at is not null then open_duration_seconds else 0 end) as sum_close_time_seconds,\n        sum(case when resolved_at is not null then any_assignment_duration_seconds else 0 end) as sum_assigned_close_time_seconds,\n\n        -- age of currently open tasks\n        sum(case when resolved_at is null then open_duration_seconds else 0 end) as sum_currently_open_duration_seconds,\n        sum(case when resolved_at is null then any_assignment_duration_seconds else 0 end) as sum_currently_open_assigned_duration_seconds\n\n    from issue\n\n    group by 1\n),\n\ncalculate_avg_metrics as (\n\n    select\n        project_id,\n        count_closed_issues,\n        count_open_issues,\n        count_open_assigned_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues  as numeric(28,6) ), 0) end as avg_close_time_seconds,\n\n        case when count_closed_assigned_issues = 0 then 0 else\n        round( cast(sum_assigned_close_time_seconds * 1.0 / count_closed_assigned_issues  as numeric(28,6) ), 0) end as avg_assigned_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_currently_open_duration_seconds * 1.0 / count_open_issues as numeric(28,6) ), 0) end as avg_age_currently_open_seconds,\n\n        case when count_open_assigned_issues = 0 then 0 else\n        round( cast(sum_currently_open_assigned_duration_seconds * 1.0 / count_open_assigned_issues as numeric(28,6) ), 0) end as avg_age_currently_open_assigned_seconds\n\n    from project_issues\n),\n\n-- join medians and averages + convert to days\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n\n        -- there are 86400 seconds in a day\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_assigned_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as avg_assigned_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as avg_age_currently_open_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_assigned_seconds / 86400.0 as numeric(28,6) ), 0) as avg_age_currently_open_assigned_days,\n\n        median_metrics.median_close_time_seconds, \n        median_metrics.median_age_currently_open_seconds,\n        median_metrics.median_assigned_close_time_seconds,\n        median_metrics.median_age_currently_open_assigned_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as median_age_currently_open_days,\n        round( cast(median_metrics.median_assigned_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as median_assigned_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_assigned_seconds / 86400.0 as numeric(28,6) ), 0) as median_age_currently_open_assigned_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(project_id)\n)\n\nselect * from join_metrics\n) select\n    project_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_jira__project_metrics\nwhere project_id is not null\ngroup by project_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:36.915619Z", "completed_at": "2024-01-09T21:53:36.924226Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:36.929961Z", "completed_at": "2024-01-09T21:53:36.929966Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01763010025024414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__user_metrics_user_id.2143177b14", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_jira__user_metrics as (\nwith issue as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira\".\"jira__issue_enhanced\" \n    where assignee_user_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        assignee_user_id as user_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6)), 0) as median_close_time_seconds,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6)), 0) as median_age_currently_open_seconds\n\n    from issue\n\n     group by 1 \n),\n\n-- grouping because the medians were calculated using window functions (except postgres)\nmedian_metrics as (\n\n    select \n        user_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds\n\n    from calculate_medians\n    group by 1,2,3\n),\n\n\nuser_issues as (\n\n    select\n        assignee_user_id as user_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        sum(case when resolved_at is not null then last_assignment_duration_seconds end) as sum_close_time_seconds,\n        sum(case when resolved_at is null then last_assignment_duration_seconds end) as sum_current_open_seconds\n\n    from issue\n\n    group by 1\n\n),\n\ncalculate_avg_metrics as (\n\n    select \n        user_id,\n        count_closed_issues,\n        count_open_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues as numeric(28,6) ), 0) end as avg_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_current_open_seconds * 1.0 / count_open_issues as numeric(28,6) ), 0) end as avg_age_currently_open_seconds\n\n    from user_issues\n),\n\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as avg_age_currently_open_days,\n\n        median_metrics.median_close_time_seconds,\n        median_metrics.median_age_currently_open_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as median_age_currently_open_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(user_id)\n)\n\nselect * from join_metrics\n) select user_id\nfrom __dbt__cte__int_jira__user_metrics\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:36.918533Z", "completed_at": "2024-01-09T21:53:36.924434Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:36.930221Z", "completed_at": "2024-01-09T21:53:36.930225Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017713069915771484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__user_metrics_user_id.c042bcdd66", "compiled": true, "compiled_code": "\n    \n    \n\nwith __dbt__cte__int_jira__user_metrics as (\nwith issue as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_2_jira\".\"jira__issue_enhanced\" \n    where assignee_user_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        assignee_user_id as user_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6)), 0) as median_close_time_seconds,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6)), 0) as median_age_currently_open_seconds\n\n    from issue\n\n     group by 1 \n),\n\n-- grouping because the medians were calculated using window functions (except postgres)\nmedian_metrics as (\n\n    select \n        user_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds\n\n    from calculate_medians\n    group by 1,2,3\n),\n\n\nuser_issues as (\n\n    select\n        assignee_user_id as user_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        sum(case when resolved_at is not null then last_assignment_duration_seconds end) as sum_close_time_seconds,\n        sum(case when resolved_at is null then last_assignment_duration_seconds end) as sum_current_open_seconds\n\n    from issue\n\n    group by 1\n\n),\n\ncalculate_avg_metrics as (\n\n    select \n        user_id,\n        count_closed_issues,\n        count_open_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues as numeric(28,6) ), 0) end as avg_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_current_open_seconds * 1.0 / count_open_issues as numeric(28,6) ), 0) end as avg_age_currently_open_seconds\n\n    from user_issues\n),\n\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as avg_age_currently_open_days,\n\n        median_metrics.median_close_time_seconds,\n        median_metrics.median_age_currently_open_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as median_age_currently_open_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(user_id)\n)\n\nselect * from join_metrics\n) select\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_jira__user_metrics\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:36.924844Z", "completed_at": "2024-01-09T21:53:36.930486Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:36.932505Z", "completed_at": "2024-01-09T21:53:36.932508Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.010445833206176758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_jira__project_enhanced_project_id.4f7c58f1d4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect project_id\nfrom \"postgres\".\"jira_integrations_tests_2_jira\".\"jira__project_enhanced\"\nwhere project_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:36.927611Z", "completed_at": "2024-01-09T21:53:36.931822Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:36.933943Z", "completed_at": "2024-01-09T21:53:36.933946Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011082172393798828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_jira__project_enhanced_project_id.c18e39faef", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    project_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_2_jira\".\"jira__project_enhanced\"\nwhere project_id is not null\ngroup by project_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:36.935027Z", "completed_at": "2024-01-09T21:53:36.940113Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:36.940983Z", "completed_at": "2024-01-09T21:53:36.940987Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.008684158325195312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_jira__user_enhanced_user_id.aecc00744a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom \"postgres\".\"jira_integrations_tests_2_jira\".\"jira__user_enhanced\"\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-01-09T21:53:36.937568Z", "completed_at": "2024-01-09T21:53:36.940343Z"}, {"name": "execute", "started_at": "2024-01-09T21:53:36.941208Z", "completed_at": "2024-01-09T21:53:36.941211Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008786916732788086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_jira__user_enhanced_user_id.c9ee73454a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_2_jira\".\"jira__user_enhanced\"\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "relation_name": null}], "elapsed_time": 10.257622003555298, "args": {"warn_error_options": {"include": [], "exclude": []}, "log_path": "/Users/avinash.kunnath/Documents/dbt_packages/jira/dbt_jira/integration_tests/logs", "show_resource_report": false, "macro_debugging": false, "vars": {}, "log_file_max_bytes": 10485760, "use_colors_file": true, "static": false, "strict_mode": false, "cache_selected_only": false, "version_check": true, "compile": true, "exclude": [], "print": true, "quiet": false, "enable_legacy_logger": false, "indirect_selection": "eager", "defer": false, "log_level_file": "debug", "invocation_command": "dbt docs generate -t postgres", "log_format_file": "debug", "populate_cache": true, "target": "postgres", "favor_state": false, "profiles_dir": "/Users/avinash.kunnath/.dbt", "send_anonymous_usage_stats": true, "partial_parse": true, "introspect": true, "partial_parse_file_diff": true, "log_level": "info", "log_format": "default", "empty_catalog": false, "project_dir": "/Users/avinash.kunnath/Documents/dbt_packages/jira/dbt_jira/integration_tests", "printer_width": 80, "select": [], "use_colors": true, "which": "generate", "write_json": true, "static_parser": true}}