{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.9", "generated_at": "2024-04-16T00:22:08.544044Z", "invocation_id": "3c27d455-bcad-4c01-87e3-40b93144975a", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.500890Z", "completed_at": "2024-04-16T00:22:04.526224Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.535096Z", "completed_at": "2024-04-16T00:22:04.535103Z"}], "thread_id": "Thread-1", "execution_time": 0.044463157653808594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__comment_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_241\".\"comment\"", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__comment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.510114Z", "completed_at": "2024-04-16T00:22:04.530058Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.536934Z", "completed_at": "2024-04-16T00:22:04.536938Z"}], "thread_id": "Thread-2", "execution_time": 0.045040130615234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__component_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"jira_integrations_tests_241\".\"component\"", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__component_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.514958Z", "completed_at": "2024-04-16T00:22:04.533608Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.538035Z", "completed_at": "2024-04-16T00:22:04.538039Z"}], "thread_id": "Thread-3", "execution_time": 0.04357099533081055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__field_option_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_241\".\"field_option\"", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__field_option_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.520745Z", "completed_at": "2024-04-16T00:22:04.533929Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.538314Z", "completed_at": "2024-04-16T00:22:04.538318Z"}], "thread_id": "Thread-5", "execution_time": 0.0423281192779541, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue_field_history_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_241\".\"issue_field_history\"", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_field_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.517863Z", "completed_at": "2024-04-16T00:22:04.534213Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.538825Z", "completed_at": "2024-04-16T00:22:04.538828Z"}], "thread_id": "Thread-4", "execution_time": 0.04417014122009277, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__field_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_241\".\"field\"", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__field_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.523536Z", "completed_at": "2024-04-16T00:22:04.534473Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.539098Z", "completed_at": "2024-04-16T00:22:04.539101Z"}], "thread_id": "Thread-6", "execution_time": 0.042983055114746094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue_link_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_241\".\"issue_link\"", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_link_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.526569Z", "completed_at": "2024-04-16T00:22:04.535378Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.540276Z", "completed_at": "2024-04-16T00:22:04.540279Z"}], "thread_id": "Thread-7", "execution_time": 0.043544769287109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue_multiselect_history_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_241\".\"issue_multiselect_history\"", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_multiselect_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.530403Z", "completed_at": "2024-04-16T00:22:04.536200Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.541634Z", "completed_at": "2024-04-16T00:22:04.541637Z"}], "thread_id": "Thread-8", "execution_time": 0.036099910736083984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_241\".\"issue\"", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.548745Z", "completed_at": "2024-04-16T00:22:04.560447Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.572141Z", "completed_at": "2024-04-16T00:22:04.572147Z"}], "thread_id": "Thread-1", "execution_time": 0.031111955642700195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue_type_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_241\".\"issue_type\"", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_type_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.552897Z", "completed_at": "2024-04-16T00:22:04.570572Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.573896Z", "completed_at": "2024-04-16T00:22:04.573899Z"}], "thread_id": "Thread-2", "execution_time": 0.030474185943603516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__priority_tmp", "compiled": true, "compiled_code": "\n\nselect * from \"postgres\".\"jira_integrations_tests_241\".\"priority\"", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__priority_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.555699Z", "completed_at": "2024-04-16T00:22:04.571172Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.575397Z", "completed_at": "2024-04-16T00:22:04.575400Z"}], "thread_id": "Thread-3", "execution_time": 0.031161069869995117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__project_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_241\".\"project\"", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__project_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.558034Z", "completed_at": "2024-04-16T00:22:04.571483Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.575862Z", "completed_at": "2024-04-16T00:22:04.575865Z"}], "thread_id": "Thread-5", "execution_time": 0.031510114669799805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__resolution_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_241\".\"resolution\"", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__resolution_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.563829Z", "completed_at": "2024-04-16T00:22:04.572424Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.576877Z", "completed_at": "2024-04-16T00:22:04.576880Z"}], "thread_id": "Thread-6", "execution_time": 0.0316159725189209, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__status_category_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_241\".\"status_category\"", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__status_category_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.566043Z", "completed_at": "2024-04-16T00:22:04.572700Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.577167Z", "completed_at": "2024-04-16T00:22:04.577170Z"}], "thread_id": "Thread-7", "execution_time": 0.0289306640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__status_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_241\".\"status\"", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__status_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.560709Z", "completed_at": "2024-04-16T00:22:04.572953Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.577433Z", "completed_at": "2024-04-16T00:22:04.577436Z"}], "thread_id": "Thread-4", "execution_time": 0.03296518325805664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__sprint_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"jira_integrations_tests_241\".\"sprint\"", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__sprint_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.568351Z", "completed_at": "2024-04-16T00:22:04.573396Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.578175Z", "completed_at": "2024-04-16T00:22:04.578178Z"}], "thread_id": "Thread-8", "execution_time": 0.029361963272094727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__user_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"jira_integrations_tests_241\".\"user\"", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__user_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.589160Z", "completed_at": "2024-04-16T00:22:04.590899Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.601602Z", "completed_at": "2024-04-16T00:22:04.601608Z"}], "thread_id": "Thread-2", "execution_time": 0.02165389060974121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.comment", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.591928Z", "completed_at": "2024-04-16T00:22:04.592951Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.602507Z", "completed_at": "2024-04-16T00:22:04.602510Z"}], "thread_id": "Thread-3", "execution_time": 0.02159404754638672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.component", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.584723Z", "completed_at": "2024-04-16T00:22:04.593421Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.602971Z", "completed_at": "2024-04-16T00:22:04.602974Z"}], "thread_id": "Thread-1", "execution_time": 0.026594877243041992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__version_tmp", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"jira_integrations_tests_241\".\"version\"", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__version_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.593667Z", "completed_at": "2024-04-16T00:22:04.594656Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.603221Z", "completed_at": "2024-04-16T00:22:04.603225Z"}], "thread_id": "Thread-5", "execution_time": 0.022111892700195312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.epic", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.595134Z", "completed_at": "2024-04-16T00:22:04.596123Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.604066Z", "completed_at": "2024-04-16T00:22:04.604070Z"}], "thread_id": "Thread-6", "execution_time": 0.019650936126708984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.field", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.596375Z", "completed_at": "2024-04-16T00:22:04.597363Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.604349Z", "completed_at": "2024-04-16T00:22:04.604352Z"}], "thread_id": "Thread-7", "execution_time": 0.01977396011352539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.field_option", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.597630Z", "completed_at": "2024-04-16T00:22:04.598634Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.604616Z", "completed_at": "2024-04-16T00:22:04.604619Z"}], "thread_id": "Thread-4", "execution_time": 0.019882917404174805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.issue", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.599125Z", "completed_at": "2024-04-16T00:22:04.600839Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.605376Z", "completed_at": "2024-04-16T00:22:04.605379Z"}], "thread_id": "Thread-8", "execution_time": 0.020016908645629883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.issue_field_history", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.614093Z", "completed_at": "2024-04-16T00:22:04.615309Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.626530Z", "completed_at": "2024-04-16T00:22:04.626534Z"}], "thread_id": "Thread-2", "execution_time": 0.019025802612304688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.issue_link", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.616196Z", "completed_at": "2024-04-16T00:22:04.617188Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.627384Z", "completed_at": "2024-04-16T00:22:04.627387Z"}], "thread_id": "Thread-3", "execution_time": 0.01917290687561035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.issue_multiselect_history", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.617654Z", "completed_at": "2024-04-16T00:22:04.618631Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.627838Z", "completed_at": "2024-04-16T00:22:04.627841Z"}], "thread_id": "Thread-1", "execution_time": 0.019268035888671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.issue_type", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.618880Z", "completed_at": "2024-04-16T00:22:04.619849Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.628086Z", "completed_at": "2024-04-16T00:22:04.628089Z"}], "thread_id": "Thread-5", "execution_time": 0.019353866577148438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.priority", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.620311Z", "completed_at": "2024-04-16T00:22:04.621278Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.628812Z", "completed_at": "2024-04-16T00:22:04.628815Z"}], "thread_id": "Thread-6", "execution_time": 0.019488811492919922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.project", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.621526Z", "completed_at": "2024-04-16T00:22:04.623180Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.629054Z", "completed_at": "2024-04-16T00:22:04.629057Z"}], "thread_id": "Thread-7", "execution_time": 0.019623756408691406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.project_board", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.623442Z", "completed_at": "2024-04-16T00:22:04.624414Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.629295Z", "completed_at": "2024-04-16T00:22:04.629297Z"}], "thread_id": "Thread-4", "execution_time": 0.01973700523376465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.project_category", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.624888Z", "completed_at": "2024-04-16T00:22:04.625864Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.630067Z", "completed_at": "2024-04-16T00:22:04.630070Z"}], "thread_id": "Thread-8", "execution_time": 0.01988506317138672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.resolution", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.638586Z", "completed_at": "2024-04-16T00:22:04.639734Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.685476Z", "completed_at": "2024-04-16T00:22:04.685482Z"}], "thread_id": "Thread-2", "execution_time": 0.05344080924987793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.sprint", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.640619Z", "completed_at": "2024-04-16T00:22:04.641600Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.686363Z", "completed_at": "2024-04-16T00:22:04.686366Z"}], "thread_id": "Thread-3", "execution_time": 0.05350518226623535, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.status", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.642069Z", "completed_at": "2024-04-16T00:22:04.643696Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.686805Z", "completed_at": "2024-04-16T00:22:04.686807Z"}], "thread_id": "Thread-1", "execution_time": 0.0535581111907959, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.status_category", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.643957Z", "completed_at": "2024-04-16T00:22:04.644932Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.687047Z", "completed_at": "2024-04-16T00:22:04.687050Z"}], "thread_id": "Thread-5", "execution_time": 0.0536501407623291, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.user", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.645395Z", "completed_at": "2024-04-16T00:22:04.646362Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.687777Z", "completed_at": "2024-04-16T00:22:04.687779Z"}], "thread_id": "Thread-6", "execution_time": 0.05380415916442871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.user_group", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.646614Z", "completed_at": "2024-04-16T00:22:04.647579Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:04.688014Z", "completed_at": "2024-04-16T00:22:04.688017Z"}], "thread_id": "Thread-7", "execution_time": 0.053938865661621094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.jira_integration_tests.version", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.654188Z", "completed_at": "2024-04-16T00:22:05.164675Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.165599Z", "completed_at": "2024-04-16T00:22:05.165608Z"}], "thread_id": "Thread-8", "execution_time": 0.5776619911193848, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__component", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__component_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    project_id\n    \n as \n    \n    project_id\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        description as component_description,\n        id as component_id,\n        name as component_name,\n        project_id,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__component\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.699965Z", "completed_at": "2024-04-16T00:22:05.202213Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.202901Z", "completed_at": "2024-04-16T00:22:05.202908Z"}], "thread_id": "Thread-3", "execution_time": 0.5524258613586426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue_field_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_field_history_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    field_id\n    \n as \n    \n    field_id\n    \n, \n    \n    \n    issue_id\n    \n as \n    \n    issue_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n, \n    \n    \n    time\n    \n as \n    \n    time\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(field_id as TEXT) as field_id,\n        issue_id,\n        cast(time as timestamp)\n         as updated_at,\n        value as field_value,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_field_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.647830Z", "completed_at": "2024-04-16T00:22:05.215938Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.221505Z", "completed_at": "2024-04-16T00:22:05.221510Z"}], "thread_id": "Thread-4", "execution_time": 0.6359469890594482, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__comment", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__comment_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    author_id\n    \n as \n    \n    author_id\n    \n, \n    \n    \n    body\n    \n as \n    \n    body\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_public\n    \n as \n    \n    is_public\n    \n, \n    \n    \n    issue_id\n    \n as \n    \n    issue_id\n    \n, \n    \n    \n    update_author_id\n    \n as \n    \n    update_author_id\n    \n, \n    \n    \n    updated\n    \n as \n    \n    updated\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        author_id as author_user_id,\n        body,\n        cast(created as timestamp) as created_at,\n        id as comment_id,\n        issue_id,\n        is_public,\n        update_author_id as last_update_user_id,\n        cast(updated as timestamp) as last_updated_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__comment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.695727Z", "completed_at": "2024-04-16T00:22:05.232084Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.233167Z", "completed_at": "2024-04-16T00:22:05.233170Z"}], "thread_id": "Thread-2", "execution_time": 0.5888750553131104, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__field_option", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__field_option_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    cast(null as integer) as \n    \n    parent_id\n    \n , \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as field_id,\n        parent_id as parent_field_id,\n        name as field_option_name\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__field_option\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.708369Z", "completed_at": "2024-04-16T00:22:05.231321Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.232423Z", "completed_at": "2024-04-16T00:22:05.232428Z"}], "thread_id": "Thread-5", "execution_time": 0.5878190994262695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue_link", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_link_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    issue_id\n    \n as \n    \n    issue_id\n    \n, \n    \n    \n    related_issue_id\n    \n as \n    \n    related_issue_id\n    \n, \n    \n    \n    relationship\n    \n as \n    \n    relationship\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        issue_id,\n        related_issue_id,\n        relationship,\n        _fivetran_synced \n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_link\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.712143Z", "completed_at": "2024-04-16T00:22:05.244241Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.245020Z", "completed_at": "2024-04-16T00:22:05.245024Z"}], "thread_id": "Thread-6", "execution_time": 0.5985720157623291, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue_multiselect_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_multiselect_history_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    field_id\n    \n as \n    \n    field_id\n    \n, \n    \n    \n    issue_id\n    \n as \n    \n    issue_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n, \n    \n    \n    time\n    \n as \n    \n    time\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        cast(field_id as TEXT) as field_id,\n        issue_id,\n        \n        cast(time as timestamp)\n         as updated_at,\n        value as field_value,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_multiselect_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.704701Z", "completed_at": "2024-04-16T00:22:05.272464Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.273599Z", "completed_at": "2024-04-16T00:22:05.273603Z"}], "thread_id": "Thread-1", "execution_time": 0.6296498775482178, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__field", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__field_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_array\n    \n as \n    \n    is_array\n    \n, \n    \n    \n    is_custom\n    \n as \n    \n    is_custom\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as field_id,\n        is_array,\n        is_custom,\n        name as field_name,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__field\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:04.716820Z", "completed_at": "2024-04-16T00:22:05.273881Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.275384Z", "completed_at": "2024-04-16T00:22:05.275388Z"}], "thread_id": "Thread-7", "execution_time": 0.6357913017272949, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue", "compiled": true, "compiled_code": "with base as (\n    \n    select * \n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_tmp\"\n    where not coalesce(_fivetran_deleted, false)\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    _original_estimate\n    \n as \n    \n    _original_estimate\n    \n, \n    \n    \n    _remaining_estimate\n    \n as \n    \n    _remaining_estimate\n    \n, \n    \n    \n    _time_spent\n    \n as \n    \n    _time_spent\n    \n, \n    \n    \n    assignee\n    \n as \n    \n    assignee\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    creator\n    \n as \n    \n    creator\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    environment\n    \n as \n    \n    environment\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    issue_type\n    \n as \n    \n    issue_type\n    \n, \n    \n    \n    key\n    \n as \n    \n    key\n    \n, \n    \n    \n    original_estimate\n    \n as \n    \n    original_estimate\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n, \n    \n    \n    priority\n    \n as \n    \n    priority\n    \n, \n    \n    \n    project\n    \n as \n    \n    project\n    \n, \n    \n    \n    remaining_estimate\n    \n as \n    \n    remaining_estimate\n    \n, \n    \n    \n    reporter\n    \n as \n    \n    reporter\n    \n, \n    \n    \n    resolution\n    \n as \n    \n    resolution\n    \n, \n    \n    \n    resolved\n    \n as \n    \n    resolved\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    status_category_changed\n    \n as \n    \n    status_category_changed\n    \n, \n    \n    \n    summary\n    \n as \n    \n    summary\n    \n, \n    \n    \n    time_spent\n    \n as \n    \n    time_spent\n    \n, \n    \n    \n    updated\n    \n as \n    \n    updated\n    \n, \n    \n    \n    work_ratio\n    \n as \n    \n    work_ratio\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        coalesce(original_estimate, _original_estimate) as original_estimate_seconds,\n        coalesce(remaining_estimate, _remaining_estimate) as remaining_estimate_seconds,\n        coalesce(time_spent, _time_spent) as time_spent_seconds,\n        assignee as assignee_user_id,\n        cast(created as timestamp) as created_at,\n        cast(resolved  as timestamp) as resolved_at,\n        creator as creator_user_id,\n        description as issue_description,\n        due_date,\n        environment,\n        id as issue_id,\n        issue_type as issue_type_id,\n        key as issue_key,\n        parent_id as parent_issue_id,\n        priority as priority_id,\n        project as project_id,\n        reporter as reporter_user_id,\n        resolution as resolution_id,\n        status as status_id,\n        cast(status_category_changed as timestamp) as status_changed_at,\n        summary as issue_name,\n        cast(updated as timestamp) as updated_at,\n        work_ratio,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.226806Z", "completed_at": "2024-04-16T00:22:05.687952Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.688719Z", "completed_at": "2024-04-16T00:22:05.688735Z"}], "thread_id": "Thread-8", "execution_time": 0.5179519653320312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__issue_type", "compiled": true, "compiled_code": "with base as (\n\n    select * from \n    \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_type_tmp\"\n),\n\nfields as (\n\n    select \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    subtask\n    \n as \n    \n    subtask\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        description,\n        id as issue_type_id,\n        name as issue_type_name,\n        subtask as is_subtask,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_type\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.276105Z", "completed_at": "2024-04-16T00:22:05.733758Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.734620Z", "completed_at": "2024-04-16T00:22:05.734627Z"}], "thread_id": "Thread-4", "execution_time": 0.511387825012207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__project", "compiled": true, "compiled_code": "with base as (\n    \n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__project_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    key\n    \n as \n    \n    key\n    \n, \n    \n    \n    lead_id\n    \n as \n    \n    lead_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    permission_scheme_id\n    \n as \n    \n    permission_scheme_id\n    \n, \n    \n    \n    project_category_id\n    \n as \n    \n    project_category_id\n    \n\n\n\n    from base\n\n),\n\nfinal as (\n\n    select \n        description as project_description,\n        id as project_id,\n        key as project_key,\n        lead_id as project_lead_user_id,\n        name as project_name,\n        project_category_id,\n        permission_scheme_id,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__project\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.294754Z", "completed_at": "2024-04-16T00:22:05.736212Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.738321Z", "completed_at": "2024-04-16T00:22:05.738326Z"}], "thread_id": "Thread-6", "execution_time": 0.4928760528564453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__status", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__status_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    status_category_id\n    \n as \n    \n    status_category_id\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select\n        description as status_description,\n        id as status_id,\n        name as status_name,\n        status_category_id,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__status\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.247036Z", "completed_at": "2024-04-16T00:22:05.735896Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.738008Z", "completed_at": "2024-04-16T00:22:05.738013Z"}], "thread_id": "Thread-3", "execution_time": 0.5510928630828857, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__priority", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__priority_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        description as priority_description,\n        id as priority_id,\n        name as priority_name,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__priority\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.331959Z", "completed_at": "2024-04-16T00:22:05.769818Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.770412Z", "completed_at": "2024-04-16T00:22:05.770418Z"}], "thread_id": "Thread-7", "execution_time": 0.48209214210510254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__user", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__user_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    locale\n    \n as \n    \n    locale\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    time_zone\n    \n as \n    \n    time_zone\n    \n, \n    \n    \n    username\n    \n as \n    \n    username\n    \n\n\n\n    from base\n),\n\nfinal as (\n\n    select \n        email,\n        id as user_id,\n        locale,\n        name as user_display_name,\n        time_zone,\n        username,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__user\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.798123Z", "completed_at": "2024-04-16T00:22:05.812638Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.822830Z", "completed_at": "2024-04-16T00:22:05.822834Z"}], "thread_id": "Thread-4", "execution_time": 0.036393165588378906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__component_component_id.2f017ad5ad", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect component_id\nfrom \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__component\"\nwhere component_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.806468Z", "completed_at": "2024-04-16T00:22:05.813670Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.823750Z", "completed_at": "2024-04-16T00:22:05.823753Z"}], "thread_id": "Thread-6", "execution_time": 0.03563380241394043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__component_component_id.1773ebe913", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    component_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__component\"\nwhere component_id is not null\ngroup by component_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.815697Z", "completed_at": "2024-04-16T00:22:05.828768Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.830921Z", "completed_at": "2024-04-16T00:22:05.830926Z"}], "thread_id": "Thread-3", "execution_time": 0.02258610725402832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.dbt_utils_unique_combination_of_columns_stg_jira__issue_field_history_field_id__issue_id__updated_at.c01ecbb82c", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        field_id, issue_id, updated_at\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_field_history\"\n    group by field_id, issue_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.825956Z", "completed_at": "2024-04-16T00:22:05.830666Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.837736Z", "completed_at": "2024-04-16T00:22:05.837741Z"}], "thread_id": "Thread-7", "execution_time": 0.015517950057983398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__comment_comment_id.5dec28a22a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect comment_id\nfrom \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__comment\"\nwhere comment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.831411Z", "completed_at": "2024-04-16T00:22:05.838405Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.840601Z", "completed_at": "2024-04-16T00:22:05.840605Z"}], "thread_id": "Thread-4", "execution_time": 0.015427827835083008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__comment_comment_id.004104fac5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    comment_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__comment\"\nwhere comment_id is not null\ngroup by comment_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.834985Z", "completed_at": "2024-04-16T00:22:05.839841Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.845127Z", "completed_at": "2024-04-16T00:22:05.845130Z"}], "thread_id": "Thread-6", "execution_time": 0.016051292419433594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__field_option_field_id.1b1f37b358", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect field_id\nfrom \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__field_option\"\nwhere field_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.841439Z", "completed_at": "2024-04-16T00:22:05.850038Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.852422Z", "completed_at": "2024-04-16T00:22:05.852426Z"}], "thread_id": "Thread-3", "execution_time": 0.017308950424194336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.dbt_utils_unique_combination_of_columns_stg_jira__issue_multiselect_history__fivetran_id__updated_at.4dd2d1c5a8", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _fivetran_id, updated_at\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_multiselect_history\"\n    group by _fivetran_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.324443Z", "completed_at": "2024-04-16T00:22:05.788490Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.804414Z", "completed_at": "2024-04-16T00:22:05.804421Z"}], "thread_id": "Thread-1", "execution_time": 0.5333061218261719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__sprint", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__sprint_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    board_id\n    \n as \n    \n    board_id\n    \n, \n    \n    \n    complete_date\n    \n as \n    \n    complete_date\n    \n, \n    \n    \n    end_date\n    \n as \n    \n    end_date\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    start_date\n    \n as \n    \n    start_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as sprint_id,\n        name as sprint_name,\n        board_id,\n        cast(complete_date as timestamp) as completed_at,\n        cast(end_date as timestamp) as ended_at,\n        cast(start_date as timestamp) as started_at,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__sprint\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.288481Z", "completed_at": "2024-04-16T00:22:05.811413Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.814574Z", "completed_at": "2024-04-16T00:22:05.814578Z"}], "thread_id": "Thread-5", "execution_time": 0.5925390720367432, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__status_category", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__status_category_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as status_category_id,\n        name as status_category_name\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__status_category\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.857364Z", "completed_at": "2024-04-16T00:22:05.863074Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.874256Z", "completed_at": "2024-04-16T00:22:05.874262Z"}], "thread_id": "Thread-6", "execution_time": 0.024817943572998047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__field_field_id.34424f1c2b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect field_id\nfrom \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__field\"\nwhere field_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.283840Z", "completed_at": "2024-04-16T00:22:05.811762Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.815423Z", "completed_at": "2024-04-16T00:22:05.815426Z"}], "thread_id": "Thread-2", "execution_time": 0.5970859527587891, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__resolution", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__resolution_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        description as resolution_description,\n        id as resolution_id,\n        name as resolution_name,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__resolution\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.864592Z", "completed_at": "2024-04-16T00:22:05.875016Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.881740Z", "completed_at": "2024-04-16T00:22:05.881743Z"}], "thread_id": "Thread-7", "execution_time": 0.022562026977539062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__field_field_id.df7b462fff", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    field_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__field\"\nwhere field_id is not null\ngroup by field_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.867338Z", "completed_at": "2024-04-16T00:22:05.875877Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.882868Z", "completed_at": "2024-04-16T00:22:05.882872Z"}], "thread_id": "Thread-3", "execution_time": 0.02335810661315918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__issue_issue_id.13a4fbe132", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_id\nfrom \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue\"\nwhere issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.870667Z", "completed_at": "2024-04-16T00:22:05.880261Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.884335Z", "completed_at": "2024-04-16T00:22:05.884339Z"}], "thread_id": "Thread-1", "execution_time": 0.023700952529907227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__issue_issue_id.7bb0ee7230", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue\"\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.876691Z", "completed_at": "2024-04-16T00:22:05.882233Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.886732Z", "completed_at": "2024-04-16T00:22:05.886735Z"}], "thread_id": "Thread-4", "execution_time": 0.025957822799682617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__issue_type_issue_type_id.57419fc343", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_type_id\nfrom \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_type\"\nwhere issue_type_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.887001Z", "completed_at": "2024-04-16T00:22:05.897798Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.943727Z", "completed_at": "2024-04-16T00:22:05.943735Z"}], "thread_id": "Thread-5", "execution_time": 0.06283068656921387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__issue_type_issue_type_id.a89d34aa41", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_type_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_type\"\nwhere issue_type_id is not null\ngroup by issue_type_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.892819Z", "completed_at": "2024-04-16T00:22:05.898084Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.944017Z", "completed_at": "2024-04-16T00:22:05.944021Z"}], "thread_id": "Thread-2", "execution_time": 0.0623927116394043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__status_status_id.b32a8a0d84", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect status_id\nfrom \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__status\"\nwhere status_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.890171Z", "completed_at": "2024-04-16T00:22:05.898323Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.944304Z", "completed_at": "2024-04-16T00:22:05.944308Z"}], "thread_id": "Thread-6", "execution_time": 0.06325292587280273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__project_project_id.996fe19522", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect project_id\nfrom \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__project\"\nwhere project_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.899067Z", "completed_at": "2024-04-16T00:22:05.944789Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.951491Z", "completed_at": "2024-04-16T00:22:05.951496Z"}], "thread_id": "Thread-7", "execution_time": 0.05841708183288574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__project_project_id.58d321d374", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    project_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__project\"\nwhere project_id is not null\ngroup by project_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.903942Z", "completed_at": "2024-04-16T00:22:05.946689Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.953153Z", "completed_at": "2024-04-16T00:22:05.953157Z"}], "thread_id": "Thread-3", "execution_time": 0.05857515335083008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__status_status_id.0449241b95", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    status_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__status\"\nwhere status_id is not null\ngroup by status_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.941009Z", "completed_at": "2024-04-16T00:22:05.946949Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.953422Z", "completed_at": "2024-04-16T00:22:05.953425Z"}], "thread_id": "Thread-1", "execution_time": 0.05825519561767578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__priority_priority_id.ec0c873363", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect priority_id\nfrom \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__priority\"\nwhere priority_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.947184Z", "completed_at": "2024-04-16T00:22:05.952899Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.966887Z", "completed_at": "2024-04-16T00:22:05.966892Z"}], "thread_id": "Thread-4", "execution_time": 0.06566500663757324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__priority_priority_id.79b77ea5d2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    priority_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__priority\"\nwhere priority_id is not null\ngroup by priority_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.960806Z", "completed_at": "2024-04-16T00:22:05.968794Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.978368Z", "completed_at": "2024-04-16T00:22:05.978373Z"}], "thread_id": "Thread-2", "execution_time": 0.03686189651489258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__user_user_id.b2153f97d2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__user\"\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.963595Z", "completed_at": "2024-04-16T00:22:05.969395Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:05.983899Z", "completed_at": "2024-04-16T00:22:05.983904Z"}], "thread_id": "Thread-6", "execution_time": 0.037138938903808594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__user_user_id.a397e1a23f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__user\"\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.984447Z", "completed_at": "2024-04-16T00:22:05.994585Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.001871Z", "completed_at": "2024-04-16T00:22:06.001876Z"}], "thread_id": "Thread-1", "execution_time": 0.05069303512573242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_field_history_field_id__issue_id__updated_at.34d1b3eaa1", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    lower(fields.field_name) as field_name\n\n  from field_history\n  join fields\n    on fields.field_id = field_history.field_id\n\n)\n\nselect *\nfrom joined\n), validation_errors as (\n\n    select\n        field_id, issue_id, updated_at\n    from __dbt__cte__int_jira__issue_field_history\n    group by field_id, issue_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.990970Z", "completed_at": "2024-04-16T00:22:06.000470Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.032993Z", "completed_at": "2024-04-16T00:22:06.033000Z"}], "thread_id": "Thread-4", "execution_time": 0.08068680763244629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__sprint_sprint_id.899b4b77d7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sprint_id\nfrom \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__sprint\"\nwhere sprint_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.996623Z", "completed_at": "2024-04-16T00:22:06.003145Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.066139Z", "completed_at": "2024-04-16T00:22:06.066144Z"}], "thread_id": "Thread-5", "execution_time": 0.078369140625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__sprint_sprint_id.8a73555fed", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    sprint_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__sprint\"\nwhere sprint_id is not null\ngroup by sprint_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.014116Z", "completed_at": "2024-04-16T00:22:06.066426Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.070981Z", "completed_at": "2024-04-16T00:22:06.070984Z"}], "thread_id": "Thread-6", "execution_time": 0.0795600414276123, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.int_jira__pivot_daily_field_history", "compiled": true, "compiled_code": "\n\n-- issue_multiselect_history splits out an array-type field into multiple rows with unique individual values\n-- to combine with issue_field_history we need to aggregate the multiselect field values.\n\nwith  __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    lower(fields.field_name) as field_name\n\n  from field_history\n  join fields\n    on fields.field_id = field_history.field_id\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    lower(fields.field_name) as field_name\n\n  from issue_multiselect_history\n  join fields \n    on fields.field_id = issue_multiselect_history.field_id\n\n)\n\nselect *\nfrom joined\n), issue_field_history as (\n\n    select *\n\n    from __dbt__cte__int_jira__issue_field_history\n\n    \n    \n    where cast(updated_at as date) >= \n\n\n\n    coalesce(\n        (select \n\n    max(valid_starting_on) + ((interval '1 day') * (-3))\n\n \n            from \"postgres\".\"jira_integrations_tests_241_jira\".\"int_jira__pivot_daily_field_history\"), \n        '2010-01-01'\n        )\n\n\n    \n),\n\nissue_multiselect_history as (\n\n    select *\n\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n    \n    where cast(updated_at as date) >= \n\n\n\n    coalesce(\n        (select \n\n    max(valid_starting_on) + ((interval '1 day') * (-3))\n\n \n            from \"postgres\".\"jira_integrations_tests_241_jira\".\"int_jira__pivot_daily_field_history\"), \n        '2010-01-01'\n        )\n\n\n    \n),\n\nissue_multiselect_batch_history as (\n\n    select \n        field_id,\n        field_name,\n        issue_id,\n        updated_at,\n        cast( date_trunc('day', updated_at) as date) as date_day,\n\n        -- if the field refers to an object captured in a table elsewhere (ie sprint, users, field_option for custom fields),\n        -- the value is actually a foreign key to that table. \n        \n    string_agg(field_value, ', ')\n\n as field_values \n\n    from issue_multiselect_history\n\n    group by 1,2,3,4,5\n),\n\ncombine_field_history as (\n-- combining all the field histories together\n    select \n        field_id,\n        issue_id,\n        updated_at,\n        field_value,\n        field_name\n\n    from issue_field_history\n\n    union all\n\n    select \n        field_id,\n        issue_id,\n        updated_at,\n        field_values as field_value, -- this is an aggregated list but we'll just call it field_value\n        field_name\n\n    from issue_multiselect_batch_history\n),\n\nget_valid_dates as (\n\n    select \n        field_id,\n        issue_id,\n        field_value,\n        field_name,\n        updated_at as valid_starting_at,\n\n        -- this value is valid until the next value is updated\n        lead(updated_at, 1) over(partition by issue_id, field_id order by updated_at asc) as valid_ending_at, \n        cast( date_trunc('day', updated_at) as date) as valid_starting_on\n\n    from combine_field_history\n),\n\nlimit_to_relevant_fields as (\n    -- let's remove unncessary rows moving forward and grab field names \n    select \n        get_valid_dates.*\n\n    from get_valid_dates\n\n    where lower(field_id) = 'status' \n        or lower(field_name) in ('sprint')\n),\n\norder_daily_values as (\n\n    select \n        *,\n        -- want to grab last value for an issue's field for each day\n        row_number() over (\n            partition by valid_starting_on, issue_id, field_id\n            order by valid_starting_at desc\n            ) as row_num\n\n    from limit_to_relevant_fields\n),\n\n-- only looking at the latest value for each day\nget_latest_daily_value as (\n\n    select * \n\n    from order_daily_values\n    where row_num = 1\n), \n\nint_jira__daily_field_history as (\n\n    select\n        field_id,\n        issue_id,\n        field_name,\n\n        -- doing this to figure out what values are actually null and what needs to be backfilled in jira__daily_issue_field_history\n        case when field_value is null then 'is_null' else field_value end as field_value,\n        valid_starting_at,\n        valid_ending_at, \n        valid_starting_on\n\n    from get_latest_daily_value\n),\n\npivot_out as (\n\n    -- pivot out default columns (status and sprint) and others specified in the var(issue_field_history_columns)\n    -- only days on which a field value was actively changed will have a non-null value. the nulls will need to \n    -- be backfilled in the final jira__daily_issue_field_history model\n    select \n        valid_starting_on, \n        issue_id,\n        max(case when lower(field_id) = 'status' then field_value end) as status,\n        max(case when lower(field_name) = 'sprint' then field_value end) as sprint\n\n        from int_jira__daily_field_history\n\n    group by 1,2\n),\n\nfinal as (\n    select \n        *,\n        md5(cast(coalesce(cast(valid_starting_on as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(issue_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as issue_day_id\n\n    from pivot_out\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira\".\"int_jira__pivot_daily_field_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.059019Z", "completed_at": "2024-04-16T00:22:06.069240Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.076125Z", "completed_at": "2024-04-16T00:22:06.076129Z"}], "thread_id": "Thread-7", "execution_time": 0.07828521728515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_multiselect_history__fivetran_id__updated_at.aad394167d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    lower(fields.field_name) as field_name\n\n  from issue_multiselect_history\n  join fields \n    on fields.field_id = issue_multiselect_history.field_id\n\n)\n\nselect *\nfrom joined\n), validation_errors as (\n\n    select\n        _fivetran_id, updated_at\n    from __dbt__cte__int_jira__issue_multiselect_history\n    group by _fivetran_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.063096Z", "completed_at": "2024-04-16T00:22:06.069511Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.076400Z", "completed_at": "2024-04-16T00:22:06.076404Z"}], "thread_id": "Thread-3", "execution_time": 0.0784449577331543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__status_category_status_category_id.7a89cdfcf0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect status_category_id\nfrom \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__status_category\"\nwhere status_category_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.071762Z", "completed_at": "2024-04-16T00:22:06.080236Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.090308Z", "completed_at": "2024-04-16T00:22:06.090312Z"}], "thread_id": "Thread-1", "execution_time": 0.02914881706237793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__status_category_status_category_id.99c869330a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    status_category_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__status_category\"\nwhere status_category_id is not null\ngroup by status_category_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.076698Z", "completed_at": "2024-04-16T00:22:06.088688Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.095630Z", "completed_at": "2024-04-16T00:22:06.095634Z"}], "thread_id": "Thread-4", "execution_time": 0.02748894691467285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__resolution_resolution_id.1c04bac8a4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect resolution_id\nfrom \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__resolution\"\nwhere resolution_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.081609Z", "completed_at": "2024-04-16T00:22:06.090587Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.098135Z", "completed_at": "2024-04-16T00:22:06.098138Z"}], "thread_id": "Thread-2", "execution_time": 0.03197193145751953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__resolution_resolution_id.b3acb37c87", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    resolution_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__resolution\"\nwhere resolution_id is not null\ngroup by resolution_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.085109Z", "completed_at": "2024-04-16T00:22:06.090830Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.098407Z", "completed_at": "2024-04-16T00:22:06.098410Z"}], "thread_id": "Thread-5", "execution_time": 0.03209185600280762, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__issue_comments_issue_id.9f16878e45", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_jira__issue_comments as (\n\n\nwith comment as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__comment\"\n\n    order by issue_id, created_at asc\n\n),\n\n-- user is a reserved keyword in AWS \njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__user\"\n),\n\nagg_comments as (\n\n    select \n    comment.issue_id,\n    \n    string_agg(comment.created_at || '  -  ' || jira_user.user_display_name || ':  ' || comment.body, '\\n')\n\n as conversation,\n    count(comment.comment_id) as count_comments\n\n    from\n    comment \n    join jira_user on comment.author_user_id = jira_user.user_id\n\n    group by 1\n)\n\nselect * from agg_comments\n) select issue_id\nfrom __dbt__cte__int_jira__issue_comments\nwhere issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.091819Z", "completed_at": "2024-04-16T00:22:06.098679Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.109671Z", "completed_at": "2024-04-16T00:22:06.109675Z"}], "thread_id": "Thread-6", "execution_time": 0.03488898277282715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__issue_comments_issue_id.26e3f11046", "compiled": true, "compiled_code": "\n    \n    \n\nwith __dbt__cte__int_jira__issue_comments as (\n\n\nwith comment as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__comment\"\n\n    order by issue_id, created_at asc\n\n),\n\n-- user is a reserved keyword in AWS \njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__user\"\n),\n\nagg_comments as (\n\n    select \n    comment.issue_id,\n    \n    string_agg(comment.created_at || '  -  ' || jira_user.user_display_name || ':  ' || comment.body, '\\n')\n\n as conversation,\n    count(comment.comment_id) as count_comments\n\n    from\n    comment \n    join jira_user on comment.author_user_id = jira_user.user_id\n\n    group by 1\n)\n\nselect * from agg_comments\n) select\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_jira__issue_comments\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.098924Z", "completed_at": "2024-04-16T00:22:06.108828Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.133335Z", "completed_at": "2024-04-16T00:22:06.133340Z"}], "thread_id": "Thread-7", "execution_time": 0.0480809211730957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__issue_assign_resolution_issue_id.b3af89c733", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    lower(fields.field_name) as field_name\n\n  from field_history\n  join fields\n    on fields.field_id = field_history.field_id\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_assign_resolution as (\nwith issue_field_history as (\n    \n    select *\n    from __dbt__cte__int_jira__issue_field_history\n\n), \n\nfiltered as (\n    -- we're only looking at assignments and resolutions, which are single-field values\n    select *\n    from issue_field_history\n\n    where (lower(field_id) = 'assignee'\n    or lower(field_id) = 'resolutiondate')\n\n    and field_value is not null -- remove initial null rows\n),\n\nissue_dates as (\n\n    select\n\n        issue_id,\n        min(case when field_id = 'assignee' then updated_at end) as first_assigned_at,\n        max(case when field_id = 'assignee' then updated_at end) as last_assigned_at,\n        min(case when field_id = 'resolutiondate' then updated_at end) as first_resolved_at -- in case it's been re-opened\n\n    from filtered\n    group by 1\n)\n\nselect *\nfrom issue_dates\n) select issue_id\nfrom __dbt__cte__int_jira__issue_assign_resolution\nwhere issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.102118Z", "completed_at": "2024-04-16T00:22:06.109117Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.133640Z", "completed_at": "2024-04-16T00:22:06.133644Z"}], "thread_id": "Thread-3", "execution_time": 0.04825019836425781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__issue_assign_resolution_issue_id.f41f7c00ab", "compiled": true, "compiled_code": "\n    \n    \n\nwith __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    lower(fields.field_name) as field_name\n\n  from field_history\n  join fields\n    on fields.field_id = field_history.field_id\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_assign_resolution as (\nwith issue_field_history as (\n    \n    select *\n    from __dbt__cte__int_jira__issue_field_history\n\n), \n\nfiltered as (\n    -- we're only looking at assignments and resolutions, which are single-field values\n    select *\n    from issue_field_history\n\n    where (lower(field_id) = 'assignee'\n    or lower(field_id) = 'resolutiondate')\n\n    and field_value is not null -- remove initial null rows\n),\n\nissue_dates as (\n\n    select\n\n        issue_id,\n        min(case when field_id = 'assignee' then updated_at end) as first_assigned_at,\n        max(case when field_id = 'assignee' then updated_at end) as last_assigned_at,\n        min(case when field_id = 'resolutiondate' then updated_at end) as first_resolved_at -- in case it's been re-opened\n\n    from filtered\n    group by 1\n)\n\nselect *\nfrom issue_dates\n) select\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_jira__issue_assign_resolution\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.110201Z", "completed_at": "2024-04-16T00:22:06.134128Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.148525Z", "completed_at": "2024-04-16T00:22:06.148530Z"}], "thread_id": "Thread-1", "execution_time": 0.044384002685546875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.int_jira__issue_type_parents", "compiled": true, "compiled_code": "\n-- needs to be a view to use the dbt_utils.star macro in int_jira__issue_users\n\nwith  __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    lower(fields.field_name) as field_name\n\n  from field_history\n  join fields\n    on fields.field_id = field_history.field_id\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_epic as (\n-- issue-epic relationships are either captured via the issue's parent_issue_id (next-gen projects)\n-- or through the 'Epic Link' field (classic projects)\nwith epic_field_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_field_history\n    where lower(field_name) like 'epic%link'\n    \n),\n\norder_epic_links as (\n\n    select\n        issue_id,\n        cast(field_value as TEXT ) as epic_issue_id,\n\n        row_number() over (\n                partition by issue_id order by updated_at desc\n                ) as row_num\n\n    from epic_field_history\n),\n\nlast_epic_link as (\n\n    select \n      issue_id, \n      epic_issue_id \n    \n    from order_epic_links\n    where row_num = 1\n)\n\nselect *\nfrom last_epic_link\n), issue as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue\"\n    \n),\n\nissue_type as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_type\"\n), \n-- issue-epic relationships are either captured via the issue's parent_issue_id (next-gen projects)\n-- or through the 'Epic Link' field (classic projects)\n\nissues_w_epics as (\n\n    select * \n    from __dbt__cte__int_jira__issue_epic\n\n), \n\nissue_enriched_with_epics as (\n\n    select\n        issue.*,\n        coalesce(cast(parent_issue_id as TEXT), cast(epic_issue_id as TEXT)) as revised_parent_issue_id\n\n    from issue\n    left join issues_w_epics on issues_w_epics.issue_id = issue.issue_id\n\n), \n\nissue_w_types as (\n\n    select \n        issue_enriched_with_epics.*,\n        issue_type.issue_type_name as issue_type\n        \n    from issue_enriched_with_epics \n    left join issue_type on issue_type.issue_type_id = issue_enriched_with_epics.issue_type_id\n),\n\nadd_parent_info as (\n\n    select\n        issue_w_types.*,\n        parent.issue_type as parent_issue_type,\n        parent.issue_name as parent_issue_name,\n        parent.issue_key as parent_issue_key,\n        lower(coalesce(parent.issue_type, '')) = 'epic' as is_parent_epic\n\n    from issue_w_types\n    -- do a left join so we can grab all issue types from this table in `issue_join`\n    left join issue_w_types as parent \n        on cast(issue_w_types.revised_parent_issue_id as TEXT) = cast(parent.issue_id as TEXT)\n\n)\n\nselect * \nfrom add_parent_info", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira\".\"int_jira__issue_type_parents\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.123513Z", "completed_at": "2024-04-16T00:22:06.146108Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.149909Z", "completed_at": "2024-04-16T00:22:06.149912Z"}], "thread_id": "Thread-4", "execution_time": 0.04663515090942383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_epic_issue_id__epic_issue_id.9ddee9201b", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    lower(fields.field_name) as field_name\n\n  from field_history\n  join fields\n    on fields.field_id = field_history.field_id\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_epic as (\n-- issue-epic relationships are either captured via the issue's parent_issue_id (next-gen projects)\n-- or through the 'Epic Link' field (classic projects)\nwith epic_field_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_field_history\n    where lower(field_name) like 'epic%link'\n    \n),\n\norder_epic_links as (\n\n    select\n        issue_id,\n        cast(field_value as TEXT ) as epic_issue_id,\n\n        row_number() over (\n                partition by issue_id order by updated_at desc\n                ) as row_num\n\n    from epic_field_history\n),\n\nlast_epic_link as (\n\n    select \n      issue_id, \n      epic_issue_id \n    \n    from order_epic_links\n    where row_num = 1\n)\n\nselect *\nfrom last_epic_link\n), validation_errors as (\n\n    select\n        issue_id, epic_issue_id\n    from __dbt__cte__int_jira__issue_epic\n    group by issue_id, epic_issue_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.134711Z", "completed_at": "2024-04-16T00:22:06.148232Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.154842Z", "completed_at": "2024-04-16T00:22:06.154846Z"}], "thread_id": "Thread-2", "execution_time": 0.03773903846740723, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.dbt_utils_unique_combination_of_columns_int_jira__issue_sprint_issue_id__current_sprint_id.aafda24567", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith  __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    lower(fields.field_name) as field_name\n\n  from issue_multiselect_history\n  join fields \n    on fields.field_id = issue_multiselect_history.field_id\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_sprint as (\n\n\nwith sprint as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__sprint\"\n\n),\n\nfield_history as (\n\n     -- sprints don't appear to be capable of multiselect in the UI...\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n),\n\nsprint_field_history as (\n\n    select \n        field_history.*,\n        sprint.*,\n        row_number() over (\n                    partition by field_history.issue_id \n                    order by field_history.updated_at desc, sprint.started_at desc         \n                    ) as row_num\n    from field_history\n    join sprint on field_history.field_value = cast(sprint.sprint_id as TEXT)\n    where lower(field_history.field_name) = 'sprint'\n),\n\n\nlast_sprint as (\n\n    select *\n    from sprint_field_history\n    \n    where row_num = 1\n\n), \n\nsprint_rollovers as (\n\n    select \n        issue_id,\n        count(distinct case when field_value is not null then field_value end) as count_sprint_changes\n    \n    from sprint_field_history\n    group by 1\n\n),\n\nissue_sprint as (\n\n    select \n        last_sprint.issue_id,\n        last_sprint.field_value as current_sprint_id,\n        last_sprint.sprint_name as current_sprint_name,\n        last_sprint.board_id,\n        last_sprint.started_at as sprint_started_at,\n        last_sprint.ended_at as sprint_ended_at,\n        last_sprint.completed_at as sprint_completed_at,\n        coalesce(sprint_rollovers.count_sprint_changes, 0) as count_sprint_changes\n\n    from \n    last_sprint \n    left join sprint_rollovers on sprint_rollovers.issue_id = last_sprint.issue_id\n    \n)\n\nselect * from issue_sprint\n), validation_errors as (\n\n    select\n        issue_id, current_sprint_id\n    from __dbt__cte__int_jira__issue_sprint\n    group by issue_id, current_sprint_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.150897Z", "completed_at": "2024-04-16T00:22:06.158862Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.162065Z", "completed_at": "2024-04-16T00:22:06.162069Z"}], "thread_id": "Thread-6", "execution_time": 0.03773021697998047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__pivot_daily_field_history_issue_day_id.b697c971fd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_day_id\nfrom \"postgres\".\"jira_integrations_tests_241_jira\".\"int_jira__pivot_daily_field_history\"\nwhere issue_day_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.155751Z", "completed_at": "2024-04-16T00:22:06.161353Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.184925Z", "completed_at": "2024-04-16T00:22:06.184932Z"}], "thread_id": "Thread-7", "execution_time": 0.03680706024169922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__pivot_daily_field_history_issue_day_id.46c6f9a842", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_day_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_241_jira\".\"int_jira__pivot_daily_field_history\"\nwhere issue_day_id is not null\ngroup by issue_day_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.178332Z", "completed_at": "2024-04-16T00:22:06.186358Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.186840Z", "completed_at": "2024-04-16T00:22:06.186843Z"}], "thread_id": "Thread-1", "execution_time": 0.027530431747436523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__issue_type_parents_issue_id.8dd98255b0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_id\nfrom \"postgres\".\"jira_integrations_tests_241_jira\".\"int_jira__issue_type_parents\"\nwhere issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.181655Z", "completed_at": "2024-04-16T00:22:06.187088Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.188154Z", "completed_at": "2024-04-16T00:22:06.188157Z"}], "thread_id": "Thread-4", "execution_time": 0.028154850006103516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__issue_type_parents_issue_id.c07f8c6af3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_241_jira\".\"int_jira__issue_type_parents\"\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:05.739474Z", "completed_at": "2024-04-16T00:22:06.145845Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.149644Z", "completed_at": "2024-04-16T00:22:06.149647Z"}], "thread_id": "Thread-8", "execution_time": 0.4660930633544922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira_source.stg_jira__version", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__version_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    archived\n    \n as \n    \n    archived\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    overdue\n    \n as \n    \n    overdue\n    \n, \n    \n    \n    project_id\n    \n as \n    \n    project_id\n    \n, \n    \n    \n    release_date\n    \n as \n    \n    release_date\n    \n, \n    \n    \n    released\n    \n as \n    \n    released\n    \n, \n    \n    \n    start_date\n    \n as \n    \n    start_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        archived as is_archived,\n        description,\n        id as version_id,\n        name as version_name,\n        overdue as is_overdue,\n        project_id,\n        cast(release_date as timestamp) as release_date,\n        released as is_released,\n        cast(start_date as timestamp) as start_date\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__version\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.206350Z", "completed_at": "2024-04-16T00:22:06.223850Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.225192Z", "completed_at": "2024-04-16T00:22:06.225199Z"}], "thread_id": "Thread-2", "execution_time": 0.021908998489379883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.not_null_stg_jira__version_version_id.03877ce324", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect version_id\nfrom \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__version\"\nwhere version_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.209675Z", "completed_at": "2024-04-16T00:22:06.224165Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.225509Z", "completed_at": "2024-04-16T00:22:06.225512Z"}], "thread_id": "Thread-6", "execution_time": 0.021799087524414062, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira_source.unique_stg_jira__version_version_id.08231bd017", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    version_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__version\"\nwhere version_id is not null\ngroup by version_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.233386Z", "completed_at": "2024-04-16T00:22:06.237338Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.238306Z", "completed_at": "2024-04-16T00:22:06.238312Z"}], "thread_id": "Thread-4", "execution_time": 0.010618925094604492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__issue_versions_issue_id.e2a88132de", "compiled": true, "compiled_code": "\n    \n    \n\nwith __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    lower(fields.field_name) as field_name\n\n  from issue_multiselect_history\n  join fields \n    on fields.field_id = issue_multiselect_history.field_id\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_versions as (\n\n\nwith version as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__version\"\n),\n\nversion_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n    where field_id = 'versions'\n        or field_id = 'fixVersions'\n),\n\norder_versions as (\n\n    select\n        *,\n        -- using rank so batches stick together\n        rank() over (\n            partition by field_id, issue_id\n            order by updated_at desc\n            ) as row_num\n\n    from version_history\n),\n\nlatest_versions as (\n\n    select \n        field_id,\n        issue_id,\t\n        updated_at,\n        cast(field_value as integer) as version_id\n    from order_versions\n    where row_num = 1\n),\n\nversion_info as (\n\n    select \n        latest_versions.field_id,\n        latest_versions.issue_id,\n        \n    string_agg(version.version_name, ', ')\n\n as versions\n\n    from latest_versions\n    join version on latest_versions.version_id = version.version_id\n\n    group by 1,2\n),\n\nsplit_versions as (\n\n    select \n        issue_id,\n        case when field_id = 'versions' then versions else null end as affects_versions,\n        case when field_id = 'fixVersions' then versions else null end as fixes_versions\n    from version_info\n),\n\nfinal as (\n\n    select \n        issue_id,\n        max(affects_versions) as affects_versions,\n        max(fixes_versions) as fixes_versions\n    from split_versions\n    group by 1\n)\n\nselect *\nfrom final\n) select\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_jira__issue_versions\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.229196Z", "completed_at": "2024-04-16T00:22:06.237601Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.238565Z", "completed_at": "2024-04-16T00:22:06.238568Z"}], "thread_id": "Thread-2", "execution_time": 0.011491060256958008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__issue_versions_issue_id.54c4cd445e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    lower(fields.field_name) as field_name\n\n  from issue_multiselect_history\n  join fields \n    on fields.field_id = issue_multiselect_history.field_id\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_versions as (\n\n\nwith version as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__version\"\n),\n\nversion_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n    where field_id = 'versions'\n        or field_id = 'fixVersions'\n),\n\norder_versions as (\n\n    select\n        *,\n        -- using rank so batches stick together\n        rank() over (\n            partition by field_id, issue_id\n            order by updated_at desc\n            ) as row_num\n\n    from version_history\n),\n\nlatest_versions as (\n\n    select \n        field_id,\n        issue_id,\t\n        updated_at,\n        cast(field_value as integer) as version_id\n    from order_versions\n    where row_num = 1\n),\n\nversion_info as (\n\n    select \n        latest_versions.field_id,\n        latest_versions.issue_id,\n        \n    string_agg(version.version_name, ', ')\n\n as versions\n\n    from latest_versions\n    join version on latest_versions.version_id = version.version_id\n\n    group by 1,2\n),\n\nsplit_versions as (\n\n    select \n        issue_id,\n        case when field_id = 'versions' then versions else null end as affects_versions,\n        case when field_id = 'fixVersions' then versions else null end as fixes_versions\n    from version_info\n),\n\nfinal as (\n\n    select \n        issue_id,\n        max(affects_versions) as affects_versions,\n        max(fixes_versions) as fixes_versions\n    from split_versions\n    group by 1\n)\n\nselect *\nfrom final\n) select issue_id\nfrom __dbt__cte__int_jira__issue_versions\nwhere issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.140042Z", "completed_at": "2024-04-16T00:22:06.609568Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.610822Z", "completed_at": "2024-04-16T00:22:06.610835Z"}], "thread_id": "Thread-5", "execution_time": 0.5289549827575684, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.int_jira__field_history_scd", "compiled": true, "compiled_code": "with change_data as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira\".\"int_jira__pivot_daily_field_history\"\n\n), set_values as (\n\n    select \n        valid_starting_on, \n        issue_id,\n        issue_day_id,\n        status as status_id,\n        sum( case when status is null then 0 else 1 end) over ( partition by issue_id \n            order by valid_starting_on rows unbounded preceding) as status_id_field_partition\n\n         \n        , status\n        -- create a batch/partition once a new value is provided\n        , sum( case when status is null then 0 else 1 end) over ( partition by issue_id \n            order by valid_starting_on rows unbounded preceding) as status_field_partition\n\n         \n        , sprint\n        -- create a batch/partition once a new value is provided\n        , sum( case when sprint is null then 0 else 1 end) over ( partition by issue_id \n            order by valid_starting_on rows unbounded preceding) as sprint_field_partition\n\n        \n    \n    from change_data\n\n), fill_values as (\n\n-- each row of the pivoted table includes field values if that field was updated on that day\n-- we need to backfill to persist values that have been previously updated and are still valid \n    select \n        valid_starting_on, \n        issue_id,\n        issue_day_id,\n        first_value( status ) over (\n            partition by issue_id, status_id_field_partition \n            order by valid_starting_on asc rows between unbounded preceding and current row) as status_id\n        \n         \n\n        -- grab the value that started this batch/partition\n        , first_value( status ) over (\n            partition by issue_id, status_field_partition \n            order by valid_starting_on asc rows between unbounded preceding and current row) as status\n\n         \n\n        -- grab the value that started this batch/partition\n        , first_value( sprint ) over (\n            partition by issue_id, sprint_field_partition \n            order by valid_starting_on asc rows between unbounded preceding and current row) as sprint\n\n        \n\n    from set_values\n\n)\n\nselect *\nfrom fill_values", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira\".\"int_jira__field_history_scd\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.693364Z", "completed_at": "2024-04-16T00:22:06.701629Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.718330Z", "completed_at": "2024-04-16T00:22:06.718338Z"}], "thread_id": "Thread-8", "execution_time": 0.06988692283630371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__issue_users_issue_id.e3a5962431", "compiled": true, "compiled_code": "\n    \n    \n\nwith __dbt__cte__int_jira__issue_users as (\n-- just grabs user attributes for issue assignees and reporters \n\nwith issue as (\n\n    -- including issue_id in here because snowflake for some reason ignores issue_id,\n    -- so we'll just always pull it out and explicitly select it\n    \n\n    select\n        issue_id,\n        coalesce(cast(revised_parent_issue_id as TEXT), cast(parent_issue_id as TEXT)) as parent_issue_id,\n\n        \"original_estimate_seconds\",\n  \"remaining_estimate_seconds\",\n  \"time_spent_seconds\",\n  \"assignee_user_id\",\n  \"created_at\",\n  \"resolved_at\",\n  \"creator_user_id\",\n  \"issue_description\",\n  \"due_date\",\n  \"environment\",\n  \"issue_type_id\",\n  \"issue_key\",\n  \"priority_id\",\n  \"project_id\",\n  \"reporter_user_id\",\n  \"resolution_id\",\n  \"status_id\",\n  \"status_changed_at\",\n  \"issue_name\",\n  \"updated_at\",\n  \"work_ratio\",\n  \"_fivetran_synced\",\n  \"issue_type\",\n  \"parent_issue_type\",\n  \"parent_issue_name\",\n  \"parent_issue_key\",\n  \"is_parent_epic\"\n\n    from \"postgres\".\"jira_integrations_tests_241_jira\".\"int_jira__issue_type_parents\"\n\n),\n\n-- user is a reserved keyword in AWS\njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__user\"\n),\n\nissue_user_join as (\n\n    select\n        issue.*,\n        assignee.user_display_name as assignee_name,\n        assignee.time_zone as assignee_timezone,\n        assignee.email as assignee_email,\n        reporter.email as reporter_email,\n        reporter.user_display_name as reporter_name,\n        reporter.time_zone as reporter_timezone\n\n    from issue\n    left join jira_user as assignee on issue.assignee_user_id = assignee.user_id \n    left join jira_user as reporter on issue.reporter_user_id = reporter.user_id\n\n)\n\nselect * \nfrom issue_user_join\n) select\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_jira__issue_users\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.652242Z", "completed_at": "2024-04-16T00:22:06.701935Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.718869Z", "completed_at": "2024-04-16T00:22:06.718872Z"}], "thread_id": "Thread-1", "execution_time": 0.07431292533874512, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.int_jira__issue_join", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_jira__issue_users as (\n-- just grabs user attributes for issue assignees and reporters \n\nwith issue as (\n\n    -- including issue_id in here because snowflake for some reason ignores issue_id,\n    -- so we'll just always pull it out and explicitly select it\n    \n\n    select\n        issue_id,\n        coalesce(cast(revised_parent_issue_id as TEXT), cast(parent_issue_id as TEXT)) as parent_issue_id,\n\n        \"original_estimate_seconds\",\n  \"remaining_estimate_seconds\",\n  \"time_spent_seconds\",\n  \"assignee_user_id\",\n  \"created_at\",\n  \"resolved_at\",\n  \"creator_user_id\",\n  \"issue_description\",\n  \"due_date\",\n  \"environment\",\n  \"issue_type_id\",\n  \"issue_key\",\n  \"priority_id\",\n  \"project_id\",\n  \"reporter_user_id\",\n  \"resolution_id\",\n  \"status_id\",\n  \"status_changed_at\",\n  \"issue_name\",\n  \"updated_at\",\n  \"work_ratio\",\n  \"_fivetran_synced\",\n  \"issue_type\",\n  \"parent_issue_type\",\n  \"parent_issue_name\",\n  \"parent_issue_key\",\n  \"is_parent_epic\"\n\n    from \"postgres\".\"jira_integrations_tests_241_jira\".\"int_jira__issue_type_parents\"\n\n),\n\n-- user is a reserved keyword in AWS\njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__user\"\n),\n\nissue_user_join as (\n\n    select\n        issue.*,\n        assignee.user_display_name as assignee_name,\n        assignee.time_zone as assignee_timezone,\n        assignee.email as assignee_email,\n        reporter.email as reporter_email,\n        reporter.user_display_name as reporter_name,\n        reporter.time_zone as reporter_timezone\n\n    from issue\n    left join jira_user as assignee on issue.assignee_user_id = assignee.user_id \n    left join jira_user as reporter on issue.reporter_user_id = reporter.user_id\n\n)\n\nselect * \nfrom issue_user_join\n),  __dbt__cte__int_jira__issue_multiselect_history as (\nwith issue_multiselect_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_multiselect_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    issue_multiselect_history.*,\n    lower(fields.field_name) as field_name\n\n  from issue_multiselect_history\n  join fields \n    on fields.field_id = issue_multiselect_history.field_id\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_sprint as (\n\n\nwith sprint as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__sprint\"\n\n),\n\nfield_history as (\n\n     -- sprints don't appear to be capable of multiselect in the UI...\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n),\n\nsprint_field_history as (\n\n    select \n        field_history.*,\n        sprint.*,\n        row_number() over (\n                    partition by field_history.issue_id \n                    order by field_history.updated_at desc, sprint.started_at desc         \n                    ) as row_num\n    from field_history\n    join sprint on field_history.field_value = cast(sprint.sprint_id as TEXT)\n    where lower(field_history.field_name) = 'sprint'\n),\n\n\nlast_sprint as (\n\n    select *\n    from sprint_field_history\n    \n    where row_num = 1\n\n), \n\nsprint_rollovers as (\n\n    select \n        issue_id,\n        count(distinct case when field_value is not null then field_value end) as count_sprint_changes\n    \n    from sprint_field_history\n    group by 1\n\n),\n\nissue_sprint as (\n\n    select \n        last_sprint.issue_id,\n        last_sprint.field_value as current_sprint_id,\n        last_sprint.sprint_name as current_sprint_name,\n        last_sprint.board_id,\n        last_sprint.started_at as sprint_started_at,\n        last_sprint.ended_at as sprint_ended_at,\n        last_sprint.completed_at as sprint_completed_at,\n        coalesce(sprint_rollovers.count_sprint_changes, 0) as count_sprint_changes\n\n    from \n    last_sprint \n    left join sprint_rollovers on sprint_rollovers.issue_id = last_sprint.issue_id\n    \n)\n\nselect * from issue_sprint\n),  __dbt__cte__int_jira__issue_comments as (\n\n\nwith comment as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__comment\"\n\n    order by issue_id, created_at asc\n\n),\n\n-- user is a reserved keyword in AWS \njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__user\"\n),\n\nagg_comments as (\n\n    select \n    comment.issue_id,\n    \n    string_agg(comment.created_at || '  -  ' || jira_user.user_display_name || ':  ' || comment.body, '\\n')\n\n as conversation,\n    count(comment.comment_id) as count_comments\n\n    from\n    comment \n    join jira_user on comment.author_user_id = jira_user.user_id\n\n    group by 1\n)\n\nselect * from agg_comments\n),  __dbt__cte__int_jira__issue_field_history as (\nwith field_history as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_field_history\"\n    \n), \n\nfields as (\n      \n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__field\"\n\n), \n\njoined as (\n  \n  select\n    field_history.*,\n    lower(fields.field_name) as field_name\n\n  from field_history\n  join fields\n    on fields.field_id = field_history.field_id\n\n)\n\nselect *\nfrom joined\n),  __dbt__cte__int_jira__issue_assign_resolution as (\nwith issue_field_history as (\n    \n    select *\n    from __dbt__cte__int_jira__issue_field_history\n\n), \n\nfiltered as (\n    -- we're only looking at assignments and resolutions, which are single-field values\n    select *\n    from issue_field_history\n\n    where (lower(field_id) = 'assignee'\n    or lower(field_id) = 'resolutiondate')\n\n    and field_value is not null -- remove initial null rows\n),\n\nissue_dates as (\n\n    select\n\n        issue_id,\n        min(case when field_id = 'assignee' then updated_at end) as first_assigned_at,\n        max(case when field_id = 'assignee' then updated_at end) as last_assigned_at,\n        min(case when field_id = 'resolutiondate' then updated_at end) as first_resolved_at -- in case it's been re-opened\n\n    from filtered\n    group by 1\n)\n\nselect *\nfrom issue_dates\n),  __dbt__cte__int_jira__issue_versions as (\n\n\nwith version as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__version\"\n),\n\nversion_history as (\n\n    select *\n    from __dbt__cte__int_jira__issue_multiselect_history\n\n    where field_id = 'versions'\n        or field_id = 'fixVersions'\n),\n\norder_versions as (\n\n    select\n        *,\n        -- using rank so batches stick together\n        rank() over (\n            partition by field_id, issue_id\n            order by updated_at desc\n            ) as row_num\n\n    from version_history\n),\n\nlatest_versions as (\n\n    select \n        field_id,\n        issue_id,\t\n        updated_at,\n        cast(field_value as integer) as version_id\n    from order_versions\n    where row_num = 1\n),\n\nversion_info as (\n\n    select \n        latest_versions.field_id,\n        latest_versions.issue_id,\n        \n    string_agg(version.version_name, ', ')\n\n as versions\n\n    from latest_versions\n    join version on latest_versions.version_id = version.version_id\n\n    group by 1,2\n),\n\nsplit_versions as (\n\n    select \n        issue_id,\n        case when field_id = 'versions' then versions else null end as affects_versions,\n        case when field_id = 'fixVersions' then versions else null end as fixes_versions\n    from version_info\n),\n\nfinal as (\n\n    select \n        issue_id,\n        max(affects_versions) as affects_versions,\n        max(fixes_versions) as fixes_versions\n    from split_versions\n    group by 1\n)\n\nselect *\nfrom final\n), issue as (\n\n    select *\n    from __dbt__cte__int_jira__issue_users\n\n),\n\nproject as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__project\"\n),\n\nstatus as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__status\"\n),\n\nstatus_category as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__status_category\"\n),\n\nresolution as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__resolution\"\n),\n\n\npriority as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__priority\"\n),\n\n\n\nissue_sprint as (\n\n    select *\n    from __dbt__cte__int_jira__issue_sprint\n),\n\n\n\nissue_comments as (\n\n    select * \n    from __dbt__cte__int_jira__issue_comments\n),\n\n\nissue_assignments_and_resolutions as (\n  \n  select *\n  from __dbt__cte__int_jira__issue_assign_resolution\n\n),\n\n\nissue_versions as (\n\n    select *\n    from __dbt__cte__int_jira__issue_versions\n),\n\n\njoin_issue as (\n\n    select\n        issue.* \n\n        ,project.project_name as project_name\n\n        ,status.status_name as current_status\n        ,status_category.status_category_name as current_status_category   \n        ,resolution.resolution_name as resolution_type\n        \n        ,priority.priority_name as current_priority\n\t\n\n        \n        ,issue_sprint.current_sprint_id\n        ,issue_sprint.current_sprint_name\n        ,coalesce(issue_sprint.count_sprint_changes, 0) as count_sprint_changes\n        ,issue_sprint.sprint_started_at\n        ,issue_sprint.sprint_ended_at\n        ,issue_sprint.sprint_completed_at\n        ,coalesce(issue_sprint.sprint_started_at <= \n    current_timestamp::timestamp\n\n          and coalesce(issue_sprint.sprint_completed_at, \n    current_timestamp::timestamp\n) >= \n    current_timestamp::timestamp\n  \n          , false) as is_active_sprint -- If sprint doesn't have a start date, default to false. If it does have a start date, but no completed date, this means that the sprint is active. The ended_at timestamp is irrelevant here.\n        \n\n        ,issue_assignments_and_resolutions.first_assigned_at\n        ,issue_assignments_and_resolutions.last_assigned_at\n        ,issue_assignments_and_resolutions.first_resolved_at\n\n        \n        ,issue_versions.fixes_versions\n        ,issue_versions.affects_versions\n        \n\n        \n        ,issue_comments.conversation\n        ,coalesce(issue_comments.count_comments, 0) as count_comments\n        \n    \n    from issue\n    left join project on project.project_id = issue.project_id\n    left join status on status.status_id = issue.status_id\n    left join status_category on status.status_category_id = status_category.status_category_id\n    left join resolution on resolution.resolution_id = issue.resolution_id\n\t\n    left join priority on priority.priority_id = issue.priority_id\n\t\n    left join issue_assignments_and_resolutions on issue_assignments_and_resolutions.issue_id = issue.issue_id\n\n    \n    left join issue_versions on issue_versions.issue_id = issue.issue_id\n    \n    \n    \n    left join issue_sprint on issue_sprint.issue_id = issue.issue_id\n    \n\n    \n    left join issue_comments on issue_comments.issue_id = issue.issue_id\n    \n)\n\nselect * \nfrom join_issue", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira\".\"int_jira__issue_join\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.676394Z", "completed_at": "2024-04-16T00:22:06.702455Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.719180Z", "completed_at": "2024-04-16T00:22:06.719184Z"}], "thread_id": "Thread-7", "execution_time": 0.07314896583557129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__issue_users_issue_id.480b7b6beb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_jira__issue_users as (\n-- just grabs user attributes for issue assignees and reporters \n\nwith issue as (\n\n    -- including issue_id in here because snowflake for some reason ignores issue_id,\n    -- so we'll just always pull it out and explicitly select it\n    \n\n    select\n        issue_id,\n        coalesce(cast(revised_parent_issue_id as TEXT), cast(parent_issue_id as TEXT)) as parent_issue_id,\n\n        \"original_estimate_seconds\",\n  \"remaining_estimate_seconds\",\n  \"time_spent_seconds\",\n  \"assignee_user_id\",\n  \"created_at\",\n  \"resolved_at\",\n  \"creator_user_id\",\n  \"issue_description\",\n  \"due_date\",\n  \"environment\",\n  \"issue_type_id\",\n  \"issue_key\",\n  \"priority_id\",\n  \"project_id\",\n  \"reporter_user_id\",\n  \"resolution_id\",\n  \"status_id\",\n  \"status_changed_at\",\n  \"issue_name\",\n  \"updated_at\",\n  \"work_ratio\",\n  \"_fivetran_synced\",\n  \"issue_type\",\n  \"parent_issue_type\",\n  \"parent_issue_name\",\n  \"parent_issue_key\",\n  \"is_parent_epic\"\n\n    from \"postgres\".\"jira_integrations_tests_241_jira\".\"int_jira__issue_type_parents\"\n\n),\n\n-- user is a reserved keyword in AWS\njira_user as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__user\"\n),\n\nissue_user_join as (\n\n    select\n        issue.*,\n        assignee.user_display_name as assignee_name,\n        assignee.time_zone as assignee_timezone,\n        assignee.email as assignee_email,\n        reporter.email as reporter_email,\n        reporter.user_display_name as reporter_name,\n        reporter.time_zone as reporter_timezone\n\n    from issue\n    left join jira_user as assignee on issue.assignee_user_id = assignee.user_id \n    left join jira_user as reporter on issue.reporter_user_id = reporter.user_id\n\n)\n\nselect * \nfrom issue_user_join\n) select issue_id\nfrom __dbt__cte__int_jira__issue_users\nwhere issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.712521Z", "completed_at": "2024-04-16T00:22:06.720069Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.723097Z", "completed_at": "2024-04-16T00:22:06.723100Z"}], "thread_id": "Thread-2", "execution_time": 0.024121761322021484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__field_history_scd_issue_day_id.327ac0856c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_day_id\nfrom \"postgres\".\"jira_integrations_tests_241_jira\".\"int_jira__field_history_scd\"\nwhere issue_day_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.715610Z", "completed_at": "2024-04-16T00:22:06.721092Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.723362Z", "completed_at": "2024-04-16T00:22:06.723365Z"}], "thread_id": "Thread-3", "execution_time": 0.02412700653076172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__field_history_scd_issue_day_id.21b932e949", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_day_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_241_jira\".\"int_jira__field_history_scd\"\nwhere issue_day_id is not null\ngroup by issue_day_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.725866Z", "completed_at": "2024-04-16T00:22:06.732536Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.733488Z", "completed_at": "2024-04-16T00:22:06.733492Z"}], "thread_id": "Thread-7", "execution_time": 0.01054072380065918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__issue_join_issue_id.53391b21a6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_id\nfrom \"postgres\".\"jira_integrations_tests_241_jira\".\"int_jira__issue_join\"\nwhere issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.729422Z", "completed_at": "2024-04-16T00:22:06.732804Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:06.733742Z", "completed_at": "2024-04-16T00:22:06.733745Z"}], "thread_id": "Thread-5", "execution_time": 0.010643959045410156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__issue_join_issue_id.0bd360ec4b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_241_jira\".\"int_jira__issue_join\"\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:06.702960Z", "completed_at": "2024-04-16T00:22:07.218733Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:07.219555Z", "completed_at": "2024-04-16T00:22:07.219562Z"}], "thread_id": "Thread-4", "execution_time": 0.5629370212554932, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.int_jira__issue_calendar_spine", "compiled": true, "compiled_code": "\n\nwith spine as (\n\n    \n    \n    \n    \n    \n\n    select * \n    from (\n        \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1483\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    cast('2020-04-01' as date) + ((interval '1 day') * (row_number() over (order by 1) - 1))\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= \n\n    \n    (current_timestamp at time zone 'utc')::timestamp\n + ((interval '1 week') * (1))\n\n\n\n)\n\nselect * from filtered\n\n \n    ) as date_spine\n\n    \n    -- compare to the earliest possible open_until date so that if a resolved issue is updated after a long period of inactivity, we don't need a full refresh\n    -- essentially we need to be able to backfill\n    where cast( date_day as date) >= (select min(earliest_open_until_date) from \"postgres\".\"jira_integrations_tests_241_jira\".\"int_jira__issue_calendar_spine\" )\n    \n),\n\nissue_history_scd as (\n    \n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira\".\"int_jira__field_history_scd\"\n),\n\nissue_dates as (\n\n    select\n        issue_history_scd.issue_id,\n        cast( date_trunc('day', issue.created_at) as date) as created_on,\n        -- resolved_at will become null if an issue is marked as un-resolved. if this sorta thing happens often, you may want to run full-refreshes of the field_history models often\n        -- if it's not resolved include everything up to today. if it is, look at the last time it was updated \n        cast(date_trunc('day', case when issue.resolved_at is null then \n    (current_timestamp at time zone 'utc')::timestamp\n else cast(issue_history_scd.valid_starting_on as timestamp) end) as date) as open_until\n    from issue_history_scd\n    left join \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue\" as issue\n        on issue_history_scd.issue_id = issue.issue_id\n),\n\nissue_spine as (\n\n    select \n        cast(spine.date_day as date) as date_day,\n        issue_dates.issue_id,\n        -- will take the table-wide min of this in the incremental block at the top of this model\n        min(issue_dates.open_until) as earliest_open_until_date\n\n    from spine \n    join issue_dates on\n        issue_dates.created_on <= spine.date_day\n        and \n\n    issue_dates.open_until + ((interval '1 month') * (1))\n\n >= spine.date_day\n        -- if we cut off issues, we're going to have to do a full refresh to catch issues that have been un-resolved\n\n    \n    -- This is necessary to insert only new rows during an incremental run. The above operations require more rows for backfilling purposes.\n    where spine.date_day >= \n        \n\n\n\n    coalesce(\n        (select \n\n    max(date_day) + ((interval '1 day') * (-3))\n\n \n            from \"postgres\".\"jira_integrations_tests_241_jira\".\"int_jira__issue_calendar_spine\"), \n        '2010-01-01'\n        )\n\n\n    \n\n    group by 1,2\n),\n\nsurrogate_key as (\n\n    select \n        date_day,\n        issue_id,\n        md5(cast(coalesce(cast(date_day as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(issue_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as issue_day_id,\n        earliest_open_until_date\n\n    from issue_spine\n\n    where date_day <= cast( date_trunc('day', \n    (current_timestamp at time zone 'utc')::timestamp\n) as date)\n)\n\nselect *\nfrom surrogate_key", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira\".\"int_jira__issue_calendar_spine\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:07.292112Z", "completed_at": "2024-04-16T00:22:07.300049Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:07.300916Z", "completed_at": "2024-04-16T00:22:07.300922Z"}], "thread_id": "Thread-1", "execution_time": 0.03599691390991211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__issue_calendar_spine_issue_day_id.a9512b8e8a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_day_id\nfrom \"postgres\".\"jira_integrations_tests_241_jira\".\"int_jira__issue_calendar_spine\"\nwhere issue_day_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:07.296124Z", "completed_at": "2024-04-16T00:22:07.300609Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:07.302064Z", "completed_at": "2024-04-16T00:22:07.302068Z"}], "thread_id": "Thread-6", "execution_time": 0.03591489791870117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__issue_calendar_spine_issue_day_id.c49483d2e5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_day_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_241_jira\".\"int_jira__issue_calendar_spine\"\nwhere issue_day_id is not null\ngroup by issue_day_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:07.267704Z", "completed_at": "2024-04-16T00:22:07.756333Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:07.757077Z", "completed_at": "2024-04-16T00:22:07.757088Z"}], "thread_id": "Thread-8", "execution_time": 0.5329759120941162, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.jira__daily_issue_field_history", "compiled": true, "compiled_code": "\n\n-- grab column names that were pivoted out-- in intermediate/field_history/\nwith pivoted_daily_history as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_241_jira\".\"int_jira__field_history_scd\"\n\n    \n\n    \n    where valid_starting_on >= \n\n\n\n    coalesce(\n        (select \n\n    max(date_day) + ((interval '1 day') * (-3))\n\n \n            from \"postgres\".\"jira_integrations_tests_241_jira\".\"jira__daily_issue_field_history\"), \n        '2010-01-01'\n        )\n\n\n\n-- If no issue fields have been updated since the last incremental run, the pivoted_daily_history CTE will return no record/rows.\n-- When this is the case, we need to grab the most recent day's records from the previously built table so that we can persist \n-- those values into the future.\n\n), most_recent_data as ( \n    select \n        *\n    from \"postgres\".\"jira_integrations_tests_241_jira\".\"jira__daily_issue_field_history\"\n    where date_day >= \n\n\n\n    coalesce(\n        (select \n\n    max(date_day) + ((interval '1 day') * (-3))\n\n \n            from \"postgres\".\"jira_integrations_tests_241_jira\".\"jira__daily_issue_field_history\"), \n        '2010-01-01'\n        )\n\n\n\n\n\n), field_option as (\n    \n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__field_option\"\n),\n\nstatuses as (\n    \n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__status\"\n),\n\nissue_types as (\n    \n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__issue_type\"\n),\n\n\ncomponents as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__component\"\n),\n\n\n-- in intermediate/field_history/\ncalendar as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira\".\"int_jira__issue_calendar_spine\"\n\n    \n    where date_day >= \n\n\n\n    coalesce(\n        (select \n\n    max(date_day) + ((interval '1 day') * (-3))\n\n \n            from \"postgres\".\"jira_integrations_tests_241_jira\".\"jira__daily_issue_field_history\"), \n        '2010-01-01'\n        )\n\n\n    \n),\n\njoined as (\n\n    select\n        calendar.date_day,\n        calendar.issue_id\n\n            \n            \n                \n            \n                \n            \n                \n            \n                 \n                , coalesce(pivoted_daily_history.status_id, most_recent_data.status_id) as status_id\n\n                \n            \n                 \n                , coalesce(pivoted_daily_history.status, most_recent_data.status) as status\n\n                \n            \n                 \n                , coalesce(pivoted_daily_history.sprint, most_recent_data.sprint) as sprint\n\n                \n             \n\n        \n    \n    from calendar\n    left join pivoted_daily_history \n        on calendar.issue_id = pivoted_daily_history.issue_id\n        and calendar.date_day = pivoted_daily_history.valid_starting_on\n    \n    \n    left join most_recent_data\n        on calendar.issue_id = most_recent_data.issue_id\n        and calendar.date_day = most_recent_data.date_day\n    \n),\n\nset_values as (\n    select\n        date_day,\n        issue_id,\n        joined.status_id,\n        sum( case when joined.status_id is null then 0 else 1 end) over ( partition by issue_id\n            order by date_day rows unbounded preceding) as status_id_field_partition\n\n        -- list of exception columns\n        \n\n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n            , coalesce(field_option_sprint.field_option_name, joined.sprint) as sprint\n            -- create a batch/partition once a new value is provided\n            , sum( case when joined.sprint is null then 0 else 1 end) over ( partition by issue_id\n                order by date_day rows unbounded preceding) as sprint_field_partition\n\n            \n        \n\n    from joined\n\n    \n        \n    \n        \n    \n        \n    \n        \n    \n        \n    \n        \n        left join field_option as field_option_sprint\n            on cast(field_option_sprint.field_id as TEXT) = joined.sprint\n\n        \n    \n),\n\nfill_values as (\n\n    select  \n        date_day,\n        issue_id,\n        first_value( status_id ) over (\n            partition by issue_id, status_id_field_partition \n            order by date_day asc rows between unbounded preceding and current row) as status_id\n\n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n        \n            \n            -- grab the value that started this batch/partition\n            , first_value( sprint ) over (\n                partition by issue_id, sprint_field_partition \n                order by date_day asc rows between unbounded preceding and current row) as sprint\n\n            \n        \n\n    from set_values\n),\n\nfix_null_values as (\n\n    select  \n        date_day,\n        issue_id\n\n        \n            \n        \n            \n        \n            \n        \n            \n            -- we de-nulled the true null values earlier in order to differentiate them from nulls that just needed to be backfilled\n            , case when status_id = 'is_null' then null else status_id end as status_id\n\n            \n        \n            \n        \n            \n            -- we de-nulled the true null values earlier in order to differentiate them from nulls that just needed to be backfilled\n            , case when sprint = 'is_null' then null else sprint end as sprint\n\n            \n        \n\n    from fill_values\n\n),\n\nsurrogate_key as (\n\n    select\n        fix_null_values.date_day,\n        fix_null_values.issue_id,\n        statuses.status_name as status\n\n        \n            \n        \n            \n        \n            \n        \n             \n            , fix_null_values.status_id as status_id\n\n            \n        \n            \n        \n             \n            , fix_null_values.sprint as sprint\n\n            \n        \n\n        , md5(cast(coalesce(cast(date_day as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(issue_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as issue_day_id\n\n    from fix_null_values\n\n    left join statuses\n        on cast(statuses.status_id as TEXT) = fix_null_values.status_id\n)\n\nselect *\nfrom surrogate_key", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira\".\"jira__daily_issue_field_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:07.812094Z", "completed_at": "2024-04-16T00:22:07.820469Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:07.821471Z", "completed_at": "2024-04-16T00:22:07.821478Z"}], "thread_id": "Thread-7", "execution_time": 0.021799802780151367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_jira__daily_issue_field_history_issue_day_id.d13b058bcd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_day_id\nfrom \"postgres\".\"jira_integrations_tests_241_jira\".\"jira__daily_issue_field_history\"\nwhere issue_day_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:07.816755Z", "completed_at": "2024-04-16T00:22:07.821115Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:07.822757Z", "completed_at": "2024-04-16T00:22:07.822761Z"}], "thread_id": "Thread-5", "execution_time": 0.01275777816772461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_jira__daily_issue_field_history_issue_day_id.75c24d3154", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_day_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_241_jira\".\"jira__daily_issue_field_history\"\nwhere issue_day_id is not null\ngroup by issue_day_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:07.801119Z", "completed_at": "2024-04-16T00:22:08.349084Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:08.350163Z", "completed_at": "2024-04-16T00:22:08.350177Z"}], "thread_id": "Thread-3", "execution_time": 0.5894320011138916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.jira__issue_enhanced", "compiled": true, "compiled_code": "with issue as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira\".\"int_jira__issue_join\"\n),daily_issue_field_history as (\n    \n    select\n        *,\n        row_number() over (partition by issue_id order by date_day desc) = 1 as latest_record\n    from \"postgres\".\"jira_integrations_tests_241_jira\".\"jira__daily_issue_field_history\"\n\n),\n\nlatest_issue_field_history as (\n    \n    select\n        *\n    from daily_issue_field_history\n    where latest_record\n),\n\nfinal as (\n\n    select \n    \n        issue.*,\n\n        \n        (\n        (\n        (\n        ((coalesce(resolved_at, \n    current_timestamp::timestamp\n))::date - (created_at)::date)\n     * 24 + date_part('hour', (coalesce(resolved_at, \n    current_timestamp::timestamp\n))::timestamp) - date_part('hour', (created_at)::timestamp))\n     * 60 + date_part('minute', (coalesce(resolved_at, \n    current_timestamp::timestamp\n))::timestamp) - date_part('minute', (created_at)::timestamp))\n     * 60 + floor(date_part('second', (coalesce(resolved_at, \n    current_timestamp::timestamp\n))::timestamp)) - floor(date_part('second', (created_at)::timestamp)))\n     open_duration_seconds,\n\n        -- this will be null if no one has been assigned\n        \n        (\n        (\n        (\n        ((coalesce(resolved_at, \n    current_timestamp::timestamp\n))::date - (first_assigned_at)::date)\n     * 24 + date_part('hour', (coalesce(resolved_at, \n    current_timestamp::timestamp\n))::timestamp) - date_part('hour', (first_assigned_at)::timestamp))\n     * 60 + date_part('minute', (coalesce(resolved_at, \n    current_timestamp::timestamp\n))::timestamp) - date_part('minute', (first_assigned_at)::timestamp))\n     * 60 + floor(date_part('second', (coalesce(resolved_at, \n    current_timestamp::timestamp\n))::timestamp)) - floor(date_part('second', (first_assigned_at)::timestamp)))\n     any_assignment_duration_seconds,\n\n        -- if an issue is not currently assigned this will not be null\n        \n        (\n        (\n        (\n        ((coalesce(resolved_at, \n    current_timestamp::timestamp\n))::date - (last_assigned_at)::date)\n     * 24 + date_part('hour', (coalesce(resolved_at, \n    current_timestamp::timestamp\n))::timestamp) - date_part('hour', (last_assigned_at)::timestamp))\n     * 60 + date_part('minute', (coalesce(resolved_at, \n    current_timestamp::timestamp\n))::timestamp) - date_part('minute', (last_assigned_at)::timestamp))\n     * 60 + floor(date_part('second', (coalesce(resolved_at, \n    current_timestamp::timestamp\n))::timestamp)) - floor(date_part('second', (last_assigned_at)::timestamp)))\n     last_assignment_duration_seconds \n\n        , status, sprint\n\n    from issue\n    \n    left join latest_issue_field_history \n        on issue.issue_id = latest_issue_field_history.issue_id\n        \n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira\".\"jira__issue_enhanced\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:08.424334Z", "completed_at": "2024-04-16T00:22:08.463583Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:08.465636Z", "completed_at": "2024-04-16T00:22:08.465640Z"}], "thread_id": "Thread-6", "execution_time": 0.07269978523254395, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_jira__issue_enhanced_issue_id.6b18e0db38", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issue_id\nfrom \"postgres\".\"jira_integrations_tests_241_jira\".\"jira__issue_enhanced\"\nwhere issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:08.460252Z", "completed_at": "2024-04-16T00:22:08.464794Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:08.468092Z", "completed_at": "2024-04-16T00:22:08.468095Z"}], "thread_id": "Thread-8", "execution_time": 0.07511711120605469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_jira__issue_enhanced_issue_id.fec6e723ee", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    issue_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_241_jira\".\"jira__issue_enhanced\"\nwhere issue_id is not null\ngroup by issue_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:08.486907Z", "completed_at": "2024-04-16T00:22:08.511494Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:08.513386Z", "completed_at": "2024-04-16T00:22:08.513392Z"}], "thread_id": "Thread-5", "execution_time": 0.04645514488220215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__project_metrics_project_id.1542338148", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_jira__project_metrics as (\nwith issue as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_241_jira\".\"jira__issue_enhanced\"\n    where project_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        project_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_age_currently_open_seconds,\n\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_assigned_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_age_currently_open_assigned_seconds\n\n    from issue\n\n     group by project_id \n),\n\n-- grouping because the medians were calculated using window functions (except in postgres)\nmedian_metrics as (\n\n    select \n        project_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds,\n        median_assigned_close_time_seconds,\n        median_age_currently_open_assigned_seconds\n\n    from calculate_medians\n    group by 1,2,3,4,5\n),\n\n\n-- get appropriate counts + sums to calculate averages\nproject_issues as (\n    select\n        project_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        -- using the below to calculate averages\n\n        -- assigned issues\n        sum(case when resolved_at is null and assignee_user_id is not null then 1 else 0 end) as count_open_assigned_issues,\n        sum(case when resolved_at is not null and assignee_user_id is not null then 1 else 0 end) as count_closed_assigned_issues,\n\n        -- close time \n        sum(case when resolved_at is not null then open_duration_seconds else 0 end) as sum_close_time_seconds,\n        sum(case when resolved_at is not null then any_assignment_duration_seconds else 0 end) as sum_assigned_close_time_seconds,\n\n        -- age of currently open tasks\n        sum(case when resolved_at is null then open_duration_seconds else 0 end) as sum_currently_open_duration_seconds,\n        sum(case when resolved_at is null then any_assignment_duration_seconds else 0 end) as sum_currently_open_assigned_duration_seconds\n\n    from issue\n\n    group by 1\n),\n\ncalculate_avg_metrics as (\n\n    select\n        project_id,\n        count_closed_issues,\n        count_open_issues,\n        count_open_assigned_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues  as numeric(28,6) ), 0) end as avg_close_time_seconds,\n\n        case when count_closed_assigned_issues = 0 then 0 else\n        round( cast(sum_assigned_close_time_seconds * 1.0 / count_closed_assigned_issues  as numeric(28,6) ), 0) end as avg_assigned_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_currently_open_duration_seconds * 1.0 / count_open_issues as numeric(28,6) ), 0) end as avg_age_currently_open_seconds,\n\n        case when count_open_assigned_issues = 0 then 0 else\n        round( cast(sum_currently_open_assigned_duration_seconds * 1.0 / count_open_assigned_issues as numeric(28,6) ), 0) end as avg_age_currently_open_assigned_seconds\n\n    from project_issues\n),\n\n-- join medians and averages + convert to days\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n\n        -- there are 86400 seconds in a day\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_assigned_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as avg_assigned_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as avg_age_currently_open_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_assigned_seconds / 86400.0 as numeric(28,6) ), 0) as avg_age_currently_open_assigned_days,\n\n        median_metrics.median_close_time_seconds, \n        median_metrics.median_age_currently_open_seconds,\n        median_metrics.median_assigned_close_time_seconds,\n        median_metrics.median_age_currently_open_assigned_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as median_age_currently_open_days,\n        round( cast(median_metrics.median_assigned_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as median_assigned_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_assigned_seconds / 86400.0 as numeric(28,6) ), 0) as median_age_currently_open_assigned_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(project_id)\n)\n\nselect * from join_metrics\n) select project_id\nfrom __dbt__cte__int_jira__project_metrics\nwhere project_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:08.471660Z", "completed_at": "2024-04-16T00:22:08.511892Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:08.514112Z", "completed_at": "2024-04-16T00:22:08.514115Z"}], "thread_id": "Thread-7", "execution_time": 0.04856395721435547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.jira__project_enhanced", "compiled": true, "compiled_code": "with  __dbt__cte__int_jira__project_metrics as (\nwith issue as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_241_jira\".\"jira__issue_enhanced\"\n    where project_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        project_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_age_currently_open_seconds,\n\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_assigned_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_age_currently_open_assigned_seconds\n\n    from issue\n\n     group by project_id \n),\n\n-- grouping because the medians were calculated using window functions (except in postgres)\nmedian_metrics as (\n\n    select \n        project_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds,\n        median_assigned_close_time_seconds,\n        median_age_currently_open_assigned_seconds\n\n    from calculate_medians\n    group by 1,2,3,4,5\n),\n\n\n-- get appropriate counts + sums to calculate averages\nproject_issues as (\n    select\n        project_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        -- using the below to calculate averages\n\n        -- assigned issues\n        sum(case when resolved_at is null and assignee_user_id is not null then 1 else 0 end) as count_open_assigned_issues,\n        sum(case when resolved_at is not null and assignee_user_id is not null then 1 else 0 end) as count_closed_assigned_issues,\n\n        -- close time \n        sum(case when resolved_at is not null then open_duration_seconds else 0 end) as sum_close_time_seconds,\n        sum(case when resolved_at is not null then any_assignment_duration_seconds else 0 end) as sum_assigned_close_time_seconds,\n\n        -- age of currently open tasks\n        sum(case when resolved_at is null then open_duration_seconds else 0 end) as sum_currently_open_duration_seconds,\n        sum(case when resolved_at is null then any_assignment_duration_seconds else 0 end) as sum_currently_open_assigned_duration_seconds\n\n    from issue\n\n    group by 1\n),\n\ncalculate_avg_metrics as (\n\n    select\n        project_id,\n        count_closed_issues,\n        count_open_issues,\n        count_open_assigned_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues  as numeric(28,6) ), 0) end as avg_close_time_seconds,\n\n        case when count_closed_assigned_issues = 0 then 0 else\n        round( cast(sum_assigned_close_time_seconds * 1.0 / count_closed_assigned_issues  as numeric(28,6) ), 0) end as avg_assigned_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_currently_open_duration_seconds * 1.0 / count_open_issues as numeric(28,6) ), 0) end as avg_age_currently_open_seconds,\n\n        case when count_open_assigned_issues = 0 then 0 else\n        round( cast(sum_currently_open_assigned_duration_seconds * 1.0 / count_open_assigned_issues as numeric(28,6) ), 0) end as avg_age_currently_open_assigned_seconds\n\n    from project_issues\n),\n\n-- join medians and averages + convert to days\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n\n        -- there are 86400 seconds in a day\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_assigned_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as avg_assigned_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as avg_age_currently_open_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_assigned_seconds / 86400.0 as numeric(28,6) ), 0) as avg_age_currently_open_assigned_days,\n\n        median_metrics.median_close_time_seconds, \n        median_metrics.median_age_currently_open_seconds,\n        median_metrics.median_assigned_close_time_seconds,\n        median_metrics.median_age_currently_open_assigned_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as median_age_currently_open_days,\n        round( cast(median_metrics.median_assigned_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as median_assigned_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_assigned_seconds / 86400.0 as numeric(28,6) ), 0) as median_age_currently_open_assigned_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(project_id)\n)\n\nselect * from join_metrics\n), project as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__project\"\n),\n\nproject_metrics as (\n\n    select * \n    from __dbt__cte__int_jira__project_metrics\n),\n\n-- user is reserved in AWS\njira_user as (\n-- to grab the project lead\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__user\"\n),\n\nagg_epics as (\n\n    select \n        project_id,\n        \n    string_agg(issue_name, ', ')\n\n as epics\n\n    from \"postgres\".\"jira_integrations_tests_241_jira\".\"jira__issue_enhanced\"\n    where lower(issue_type) = 'epic'\n    -- should we limit to active epics?\n    group by 1\n\n),\n\n\n\nagg_components as (\n    -- i'm just aggregating the components here, but perhaps pivoting out components (and epics) \n    -- into columns where the values are the number of issues completed and/or open would be more valuable\n    select \n        project_id,\n        \n    string_agg(component_name, ', ')\n\n as components\n\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__component\"\n\n    group by 1\n),\n\n\n\nproject_join as (\n\n    select\n        project.*,\n        jira_user.user_display_name as project_lead_user_name,\n        jira_user.email as project_lead_email,\n        agg_epics.epics,\n        \n        \n        agg_components.components,\n        \n\n        coalesce(project_metrics.count_closed_issues, 0) as count_closed_issues,\n        coalesce(project_metrics.count_open_issues, 0) as count_open_issues,\n        coalesce(project_metrics.count_open_assigned_issues, 0) as count_open_assigned_issues,\n\n        -- days\n        project_metrics.avg_close_time_days,\n        project_metrics.avg_assigned_close_time_days,\n\n        project_metrics.avg_age_currently_open_days,\n        project_metrics.avg_age_currently_open_assigned_days,\n\n        project_metrics.median_close_time_days, \n        project_metrics.median_age_currently_open_days,\n        project_metrics.median_assigned_close_time_days,\n        project_metrics.median_age_currently_open_assigned_days,\n\n        -- seconds\n        project_metrics.avg_close_time_seconds,\n        project_metrics.avg_assigned_close_time_seconds,\n\n        project_metrics.avg_age_currently_open_seconds,\n        project_metrics.avg_age_currently_open_assigned_seconds,\n\n        project_metrics.median_close_time_seconds, \n        project_metrics.median_age_currently_open_seconds,\n        project_metrics.median_assigned_close_time_seconds,\n        project_metrics.median_age_currently_open_assigned_seconds\n\n    from project\n    left join project_metrics on project.project_id = project_metrics.project_id\n    left join jira_user on project.project_lead_user_id = jira_user.user_id\n    left join agg_epics on project.project_id = agg_epics.project_id \n    \n    \n    left join agg_components on project.project_id = agg_components.project_id \n    \n\n)\n\nselect * from project_join", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira\".\"jira__project_enhanced\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:08.494668Z", "completed_at": "2024-04-16T00:22:08.512829Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:08.516348Z", "completed_at": "2024-04-16T00:22:08.516351Z"}], "thread_id": "Thread-4", "execution_time": 0.04828500747680664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.jira.jira__user_enhanced", "compiled": true, "compiled_code": "with  __dbt__cte__int_jira__user_metrics as (\nwith issue as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira\".\"jira__issue_enhanced\" \n    where assignee_user_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        assignee_user_id as user_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6)), 0) as median_close_time_seconds,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6)), 0) as median_age_currently_open_seconds\n\n    from issue\n\n     group by 1 \n),\n\n-- grouping because the medians were calculated using window functions (except postgres)\nmedian_metrics as (\n\n    select \n        user_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds\n\n    from calculate_medians\n    group by 1,2,3\n),\n\n\nuser_issues as (\n\n    select\n        assignee_user_id as user_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        sum(case when resolved_at is not null then last_assignment_duration_seconds end) as sum_close_time_seconds,\n        sum(case when resolved_at is null then last_assignment_duration_seconds end) as sum_current_open_seconds\n\n    from issue\n\n    group by 1\n\n),\n\ncalculate_avg_metrics as (\n\n    select \n        user_id,\n        count_closed_issues,\n        count_open_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues as numeric(28,6) ), 0) end as avg_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_current_open_seconds * 1.0 / count_open_issues as numeric(28,6) ), 0) end as avg_age_currently_open_seconds\n\n    from user_issues\n),\n\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as avg_age_currently_open_days,\n\n        median_metrics.median_close_time_seconds,\n        median_metrics.median_age_currently_open_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as median_age_currently_open_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(user_id)\n)\n\nselect * from join_metrics\n), jira_user as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira_source\".\"stg_jira__user\"\n),\n\nuser_metrics as (\n\n    select *\n    from __dbt__cte__int_jira__user_metrics\n),\n\nissue as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira\".\"jira__issue_enhanced\" \n),\n\nuser_project as (\n\n    select \n        assignee_user_id,\n        project_name\n\n    from issue\n    group by 1,2\n\n),\n\nagg_user_projects as (\n\n    select \n        assignee_user_id,\n        \n    string_agg(project_name, ', ')\n\n as projects\n\n    from user_project\n    group by 1\n),\n\nuser_join as (\n\n    select\n        jira_user.*,\n        agg_user_projects.projects, -- projects they've worked on issues for\n        coalesce(user_metrics.count_closed_issues, 0) as count_closed_issues,\n        coalesce(user_metrics.count_open_issues, 0) as count_open_issues,\n\n        -- days\n        user_metrics.avg_close_time_days,\n        user_metrics.avg_age_currently_open_days,\n        \n        user_metrics.median_close_time_days,\n        user_metrics.median_age_currently_open_days,\n\n        -- seconds\n        user_metrics.avg_close_time_seconds,\n        user_metrics.avg_age_currently_open_seconds,\n        \n        user_metrics.median_close_time_seconds,\n        user_metrics.median_age_currently_open_seconds\n\n    from jira_user \n    left join user_metrics on jira_user.user_id = user_metrics.user_id\n    left join agg_user_projects on jira_user.user_id = agg_user_projects.assignee_user_id\n)\n\nselect * from user_join", "relation_name": "\"postgres\".\"jira_integrations_tests_241_jira\".\"jira__user_enhanced\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:08.490247Z", "completed_at": "2024-04-16T00:22:08.513135Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:08.516617Z", "completed_at": "2024-04-16T00:22:08.516620Z"}], "thread_id": "Thread-1", "execution_time": 0.04963994026184082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__project_metrics_project_id.154ccc194e", "compiled": true, "compiled_code": "\n    \n    \n\nwith __dbt__cte__int_jira__project_metrics as (\nwith issue as (\n\n    select * \n    from \"postgres\".\"jira_integrations_tests_241_jira\".\"jira__issue_enhanced\"\n    where project_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        project_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then open_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_age_currently_open_seconds,\n\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_assigned_close_time_seconds,\n        round( cast(\n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then any_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6) ), 0) as median_age_currently_open_assigned_seconds\n\n    from issue\n\n     group by project_id \n),\n\n-- grouping because the medians were calculated using window functions (except in postgres)\nmedian_metrics as (\n\n    select \n        project_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds,\n        median_assigned_close_time_seconds,\n        median_age_currently_open_assigned_seconds\n\n    from calculate_medians\n    group by 1,2,3,4,5\n),\n\n\n-- get appropriate counts + sums to calculate averages\nproject_issues as (\n    select\n        project_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        -- using the below to calculate averages\n\n        -- assigned issues\n        sum(case when resolved_at is null and assignee_user_id is not null then 1 else 0 end) as count_open_assigned_issues,\n        sum(case when resolved_at is not null and assignee_user_id is not null then 1 else 0 end) as count_closed_assigned_issues,\n\n        -- close time \n        sum(case when resolved_at is not null then open_duration_seconds else 0 end) as sum_close_time_seconds,\n        sum(case when resolved_at is not null then any_assignment_duration_seconds else 0 end) as sum_assigned_close_time_seconds,\n\n        -- age of currently open tasks\n        sum(case when resolved_at is null then open_duration_seconds else 0 end) as sum_currently_open_duration_seconds,\n        sum(case when resolved_at is null then any_assignment_duration_seconds else 0 end) as sum_currently_open_assigned_duration_seconds\n\n    from issue\n\n    group by 1\n),\n\ncalculate_avg_metrics as (\n\n    select\n        project_id,\n        count_closed_issues,\n        count_open_issues,\n        count_open_assigned_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues  as numeric(28,6) ), 0) end as avg_close_time_seconds,\n\n        case when count_closed_assigned_issues = 0 then 0 else\n        round( cast(sum_assigned_close_time_seconds * 1.0 / count_closed_assigned_issues  as numeric(28,6) ), 0) end as avg_assigned_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_currently_open_duration_seconds * 1.0 / count_open_issues as numeric(28,6) ), 0) end as avg_age_currently_open_seconds,\n\n        case when count_open_assigned_issues = 0 then 0 else\n        round( cast(sum_currently_open_assigned_duration_seconds * 1.0 / count_open_assigned_issues as numeric(28,6) ), 0) end as avg_age_currently_open_assigned_seconds\n\n    from project_issues\n),\n\n-- join medians and averages + convert to days\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n\n        -- there are 86400 seconds in a day\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_assigned_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as avg_assigned_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as avg_age_currently_open_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_assigned_seconds / 86400.0 as numeric(28,6) ), 0) as avg_age_currently_open_assigned_days,\n\n        median_metrics.median_close_time_seconds, \n        median_metrics.median_age_currently_open_seconds,\n        median_metrics.median_assigned_close_time_seconds,\n        median_metrics.median_age_currently_open_assigned_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as median_age_currently_open_days,\n        round( cast(median_metrics.median_assigned_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as median_assigned_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_assigned_seconds / 86400.0 as numeric(28,6) ), 0) as median_age_currently_open_assigned_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(project_id)\n)\n\nselect * from join_metrics\n) select\n    project_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_jira__project_metrics\nwhere project_id is not null\ngroup by project_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:08.503831Z", "completed_at": "2024-04-16T00:22:08.513624Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:08.516939Z", "completed_at": "2024-04-16T00:22:08.516942Z"}], "thread_id": "Thread-2", "execution_time": 0.04874897003173828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_int_jira__user_metrics_user_id.2143177b14", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nwith __dbt__cte__int_jira__user_metrics as (\nwith issue as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira\".\"jira__issue_enhanced\" \n    where assignee_user_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        assignee_user_id as user_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6)), 0) as median_close_time_seconds,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6)), 0) as median_age_currently_open_seconds\n\n    from issue\n\n     group by 1 \n),\n\n-- grouping because the medians were calculated using window functions (except postgres)\nmedian_metrics as (\n\n    select \n        user_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds\n\n    from calculate_medians\n    group by 1,2,3\n),\n\n\nuser_issues as (\n\n    select\n        assignee_user_id as user_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        sum(case when resolved_at is not null then last_assignment_duration_seconds end) as sum_close_time_seconds,\n        sum(case when resolved_at is null then last_assignment_duration_seconds end) as sum_current_open_seconds\n\n    from issue\n\n    group by 1\n\n),\n\ncalculate_avg_metrics as (\n\n    select \n        user_id,\n        count_closed_issues,\n        count_open_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues as numeric(28,6) ), 0) end as avg_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_current_open_seconds * 1.0 / count_open_issues as numeric(28,6) ), 0) end as avg_age_currently_open_seconds\n\n    from user_issues\n),\n\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as avg_age_currently_open_days,\n\n        median_metrics.median_close_time_seconds,\n        median_metrics.median_age_currently_open_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as median_age_currently_open_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(user_id)\n)\n\nselect * from join_metrics\n) select user_id\nfrom __dbt__cte__int_jira__user_metrics\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:08.507093Z", "completed_at": "2024-04-16T00:22:08.513865Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:08.517214Z", "completed_at": "2024-04-16T00:22:08.517219Z"}], "thread_id": "Thread-3", "execution_time": 0.04871511459350586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_int_jira__user_metrics_user_id.c042bcdd66", "compiled": true, "compiled_code": "\n    \n    \n\nwith __dbt__cte__int_jira__user_metrics as (\nwith issue as (\n\n    select *\n    from \"postgres\".\"jira_integrations_tests_241_jira\".\"jira__issue_enhanced\" \n    where assignee_user_id is not null\n),\n\ncalculate_medians as (\n\n    select \n        assignee_user_id as user_id,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is not null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6)), 0) as median_close_time_seconds,\n        round( cast( \n\n    percentile_cont( \n        0.5 )\n        within group ( order by case when resolved_at is null then last_assignment_duration_seconds end )\n    /* have to group by partition field */\n\n as numeric(28,6)), 0) as median_age_currently_open_seconds\n\n    from issue\n\n     group by 1 \n),\n\n-- grouping because the medians were calculated using window functions (except postgres)\nmedian_metrics as (\n\n    select \n        user_id, \n        median_close_time_seconds, \n        median_age_currently_open_seconds\n\n    from calculate_medians\n    group by 1,2,3\n),\n\n\nuser_issues as (\n\n    select\n        assignee_user_id as user_id,\n        sum(case when resolved_at is not null then 1 else 0 end) as count_closed_issues,\n        sum(case when resolved_at is null then 1 else 0 end) as count_open_issues,\n\n        sum(case when resolved_at is not null then last_assignment_duration_seconds end) as sum_close_time_seconds,\n        sum(case when resolved_at is null then last_assignment_duration_seconds end) as sum_current_open_seconds\n\n    from issue\n\n    group by 1\n\n),\n\ncalculate_avg_metrics as (\n\n    select \n        user_id,\n        count_closed_issues,\n        count_open_issues,\n\n        case when count_closed_issues = 0 then 0 else\n        round( cast(sum_close_time_seconds * 1.0 / count_closed_issues as numeric(28,6) ), 0) end as avg_close_time_seconds,\n\n        case when count_open_issues = 0 then 0 else\n        round( cast(sum_current_open_seconds * 1.0 / count_open_issues as numeric(28,6) ), 0) end as avg_age_currently_open_seconds\n\n    from user_issues\n),\n\njoin_metrics as (\n\n    select\n        calculate_avg_metrics.*,\n        round( cast(calculate_avg_metrics.avg_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as avg_close_time_days,\n        round( cast(calculate_avg_metrics.avg_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as avg_age_currently_open_days,\n\n        median_metrics.median_close_time_seconds,\n        median_metrics.median_age_currently_open_seconds,\n\n        round( cast(median_metrics.median_close_time_seconds / 86400.0 as numeric(28,6) ), 0) as median_close_time_days,\n        round( cast(median_metrics.median_age_currently_open_seconds / 86400.0 as numeric(28,6) ), 0) as median_age_currently_open_days\n        \n    from calculate_avg_metrics\n    left join median_metrics using(user_id)\n)\n\nselect * from join_metrics\n) select\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom __dbt__cte__int_jira__user_metrics\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:08.522693Z", "completed_at": "2024-04-16T00:22:08.536091Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:08.537264Z", "completed_at": "2024-04-16T00:22:08.537271Z"}], "thread_id": "Thread-6", "execution_time": 0.018474102020263672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_jira__project_enhanced_project_id.4f7c58f1d4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect project_id\nfrom \"postgres\".\"jira_integrations_tests_241_jira\".\"jira__project_enhanced\"\nwhere project_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:08.526135Z", "completed_at": "2024-04-16T00:22:08.536880Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:08.538955Z", "completed_at": "2024-04-16T00:22:08.538962Z"}], "thread_id": "Thread-8", "execution_time": 0.019105911254882812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_jira__project_enhanced_project_id.c18e39faef", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    project_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_241_jira\".\"jira__project_enhanced\"\nwhere project_id is not null\ngroup by project_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:08.530249Z", "completed_at": "2024-04-16T00:22:08.537825Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:08.540289Z", "completed_at": "2024-04-16T00:22:08.540293Z"}], "thread_id": "Thread-7", "execution_time": 0.0192720890045166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.not_null_jira__user_enhanced_user_id.aecc00744a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom \"postgres\".\"jira_integrations_tests_241_jira\".\"jira__user_enhanced\"\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-04-16T00:22:08.533306Z", "completed_at": "2024-04-16T00:22:08.538120Z"}, {"name": "execute", "started_at": "2024-04-16T00:22:08.540569Z", "completed_at": "2024-04-16T00:22:08.540572Z"}], "thread_id": "Thread-5", "execution_time": 0.019216060638427734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.jira.unique_jira__user_enhanced_user_id.c9ee73454a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"jira_integrations_tests_241_jira\".\"jira__user_enhanced\"\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "relation_name": null}], "elapsed_time": 6.451889753341675, "args": {"log_path": "/Users/catherinefritz/Documents/dbt_packages/jira/dbt_jira/integration_tests/logs", "strict_mode": false, "defer": false, "send_anonymous_usage_stats": true, "vars": {}, "warn_error_options": {"include": [], "exclude": []}, "log_format": "default", "show_resource_report": false, "print": true, "select": [], "static_parser": true, "indirect_selection": "eager", "populate_cache": true, "profiles_dir": "/Users/catherinefritz/.dbt", "partial_parse_file_diff": true, "version_check": true, "macro_debugging": false, "compile": true, "log_format_file": "debug", "empty_catalog": false, "which": "generate", "static": false, "exclude": [], "introspect": true, "log_level_file": "debug", "favor_state": false, "write_json": true, "invocation_command": "dbt docs generate", "cache_selected_only": false, "log_level": "info", "enable_legacy_logger": false, "use_colors_file": true, "project_dir": "/Users/catherinefritz/Documents/dbt_packages/jira/dbt_jira/integration_tests", "partial_parse": true, "quiet": false, "log_file_max_bytes": 10485760, "use_colors": true, "printer_width": 80}}